package net.skds.jvk.generated.structs;
import net.skds.jvk.annotation.NativeType;
import net.skds.ninvoker.struct.AbstractNativeStructure;
import net.skds.ninvoker.struct.NativeStructureWrapper;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkVideoEncodeH265CapabilitiesEXT extends AbstractNativeStructure {


	public static final NativeStructureWrapper WRAPPER = new NativeStructureWrapper(VkVideoEncodeH265CapabilitiesEXT.class);

	/**
	* values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT
	*/
	@NativeType("VkStructureType")
	public int sType;

	/**
	* optional
	*/
	@NativeType("void*")
	public long pNext;

	@NativeType("VkVideoEncodeH265CapabilityFlagsEXT")
	public int flags;

	@NativeType("VkVideoEncodeH265InputModeFlagsEXT")
	public int inputModeFlags;

	@NativeType("VkVideoEncodeH265OutputModeFlagsEXT")
	public int outputModeFlags;

	@NativeType("VkVideoEncodeH265CtbSizeFlagsEXT")
	public int ctbSizes;

	@NativeType("VkVideoEncodeH265TransformBlockSizeFlagsEXT")
	public int transformBlockSizes;

	@NativeType("uint8_t")
	public byte maxPPictureL0ReferenceCount;

	@NativeType("uint8_t")
	public byte maxBPictureL0ReferenceCount;

	@NativeType("uint8_t")
	public byte maxL1ReferenceCount;

	@NativeType("uint8_t")
	public byte maxSubLayersCount;

	@NativeType("uint8_t")
	public byte minLog2MinLumaCodingBlockSizeMinus3;

	@NativeType("uint8_t")
	public byte maxLog2MinLumaCodingBlockSizeMinus3;

	@NativeType("uint8_t")
	public byte minLog2MinLumaTransformBlockSizeMinus2;

	@NativeType("uint8_t")
	public byte maxLog2MinLumaTransformBlockSizeMinus2;

	@NativeType("uint8_t")
	public byte minMaxTransformHierarchyDepthInter;

	@NativeType("uint8_t")
	public byte maxMaxTransformHierarchyDepthInter;

	@NativeType("uint8_t")
	public byte minMaxTransformHierarchyDepthIntra;

	@NativeType("uint8_t")
	public byte maxMaxTransformHierarchyDepthIntra;

	@NativeType("uint8_t")
	public byte maxDiffCuQpDeltaDepth;

	@NativeType("uint8_t")
	public byte minMaxNumMergeCand;

	@NativeType("uint8_t")
	public byte maxMaxNumMergeCand;


	@Override
	protected NativeStructureWrapper getWrapper() {
		return WRAPPER;
	}
}