package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrDeferredHostOperations {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 0;

	private static final MethodHandle vkCreateDeferredOperationKHR = createHandle("vkCreateDeferredOperationKHR", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateDeferredOperationKHR(@NativeType("VkDevice*") long device, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkDeferredOperationKHR**") long pDeferredOperation) {
		try {
			return (int) vkCreateDeferredOperationKHR.invokeExact(device, pAllocator, pDeferredOperation);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyDeferredOperationKHR = createHandle("vkDestroyDeferredOperationKHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyDeferredOperationKHR(@NativeType("VkDevice*") long device, @NativeType("VkDeferredOperationKHR*") /*optional, external sync*/ long operation, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyDeferredOperationKHR.invokeExact(device, operation, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetDeferredOperationMaxConcurrencyKHR = createHandle("vkGetDeferredOperationMaxConcurrencyKHR", INT, LONG, LONG);

	@NativeType("uint32_t")
	public static int vkGetDeferredOperationMaxConcurrencyKHR(@NativeType("VkDevice*") long device, @NativeType("VkDeferredOperationKHR*") long operation) {
		try {
			return (int) vkGetDeferredOperationMaxConcurrencyKHR.invokeExact(device, operation);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetDeferredOperationResultKHR = createHandle("vkGetDeferredOperationResultKHR", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_NOT_READY
	*/
	@NativeType("VkResult")
	public static int vkGetDeferredOperationResultKHR(@NativeType("VkDevice*") long device, @NativeType("VkDeferredOperationKHR*") long operation) {
		try {
			return (int) vkGetDeferredOperationResultKHR.invokeExact(device, operation);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDeferredOperationJoinKHR = createHandle("vkDeferredOperationJoinKHR", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_THREAD_DONE_KHR,VK_THREAD_IDLE_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkDeferredOperationJoinKHR(@NativeType("VkDevice*") long device, @NativeType("VkDeferredOperationKHR*") long operation) {
		try {
			return (int) vkDeferredOperationJoinKHR.invokeExact(device, operation);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	public static final int VK_THREAD_IDLE_KHR = 0;

	public static final int VK_THREAD_DONE_KHR = 1;

	public static final int VK_OPERATION_DEFERRED_KHR = 2;

	public static final int VK_OPERATION_NOT_DEFERRED_KHR = 3;
}