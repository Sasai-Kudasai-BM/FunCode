package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkHuaweiSubpassShading {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 2;

	public static final int VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 3;

	public static final long VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 549755813888L;

	public static final int VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384;

	private static final MethodHandle vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = createHandle("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(@NativeType("VkDevice*") long device, @NativeType("VkRenderPass*") long renderpass, @NativeType("VkExtent2D*") long pMaxWorkgroupSize) {
		try {
			return (int) vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.invokeExact(device, renderpass, pMaxWorkgroupSize);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdSubpassShadingHUAWEI = createHandle("vkCmdSubpassShadingHUAWEI", VOID, LONG);

	@NativeType("void")
	public static void vkCmdSubpassShadingHUAWEI(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer) {
		try {
			vkCmdSubpassShadingHUAWEI.invokeExact(commandBuffer);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}