package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrPipelineExecutableProperties {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 2;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 3;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 4;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 5;

	public static final int VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64;

	public static final int VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128;

	private static final MethodHandle vkGetPipelineExecutablePropertiesKHR = createHandle("vkGetPipelineExecutablePropertiesKHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetPipelineExecutablePropertiesKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineInfoKHR*") long pPipelineInfo, @NativeType("uint32_t*") /*optional*/ long pExecutableCount, @NativeType("VkPipelineExecutablePropertiesKHR*") /*optional*/ long pProperties) {
		try {
			return (int) vkGetPipelineExecutablePropertiesKHR.invokeExact(device, pPipelineInfo, pExecutableCount, pProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPipelineExecutableStatisticsKHR = createHandle("vkGetPipelineExecutableStatisticsKHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetPipelineExecutableStatisticsKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineExecutableInfoKHR*") long pExecutableInfo, @NativeType("uint32_t*") /*optional*/ long pStatisticCount, @NativeType("VkPipelineExecutableStatisticKHR*") /*optional*/ long pStatistics) {
		try {
			return (int) vkGetPipelineExecutableStatisticsKHR.invokeExact(device, pExecutableInfo, pStatisticCount, pStatistics);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPipelineExecutableInternalRepresentationsKHR = createHandle("vkGetPipelineExecutableInternalRepresentationsKHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetPipelineExecutableInternalRepresentationsKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineExecutableInfoKHR*") long pExecutableInfo, @NativeType("uint32_t*") /*optional*/ long pInternalRepresentationCount, @NativeType("VkPipelineExecutableInternalRepresentationKHR*") /*optional*/ long pInternalRepresentations) {
		try {
			return (int) vkGetPipelineExecutableInternalRepresentationsKHR.invokeExact(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}