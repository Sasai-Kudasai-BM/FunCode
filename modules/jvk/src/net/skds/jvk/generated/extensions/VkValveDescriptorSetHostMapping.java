package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkValveDescriptorSetHostMapping {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 0;

	public static final int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1;

	public static final int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 2;

	private static final MethodHandle vkGetDescriptorSetLayoutHostMappingInfoVALVE = createHandle("vkGetDescriptorSetLayoutHostMappingInfoVALVE", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetDescriptorSetLayoutHostMappingInfoVALVE(@NativeType("VkDevice*") long device, @NativeType("VkDescriptorSetBindingReferenceVALVE*") long pBindingReference, @NativeType("VkDescriptorSetLayoutHostMappingInfoVALVE*") long pHostMapping) {
		try {
			vkGetDescriptorSetLayoutHostMappingInfoVALVE.invokeExact(device, pBindingReference, pHostMapping);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetDescriptorSetHostMappingVALVE = createHandle("vkGetDescriptorSetHostMappingVALVE", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetDescriptorSetHostMappingVALVE(@NativeType("VkDevice*") long device, @NativeType("VkDescriptorSet*") long descriptorSet, @NativeType("void*") long ppData) {
		try {
			vkGetDescriptorSetHostMappingVALVE.invokeExact(device, descriptorSet, ppData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}