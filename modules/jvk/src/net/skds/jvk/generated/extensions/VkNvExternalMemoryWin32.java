package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkNvExternalMemoryWin32 {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 0;

	public static final int VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1;

	private static final MethodHandle vkGetMemoryWin32HandleNV = createHandle("vkGetMemoryWin32HandleNV", INT, LONG, LONG, INT, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetMemoryWin32HandleNV(@NativeType("VkDevice*") long device, @NativeType("VkDeviceMemory*") long memory, @NativeType("VkExternalMemoryHandleTypeFlagsNV") int handleType, @NativeType("HANDLE**") long pHandle) {
		try {
			return (int) vkGetMemoryWin32HandleNV.invokeExact(device, memory, handleType, pHandle);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}