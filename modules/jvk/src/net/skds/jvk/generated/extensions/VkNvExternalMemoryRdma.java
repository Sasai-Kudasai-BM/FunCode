package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkNvExternalMemoryRdma {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1;

	public static final int VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256;

	public static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096;

	private static final MethodHandle vkGetMemoryRemoteAddressNV = createHandle("vkGetMemoryRemoteAddressNV", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INVALID_EXTERNAL_HANDLE
	*/
	@NativeType("VkResult")
	public static int vkGetMemoryRemoteAddressNV(@NativeType("VkDevice*") long device, @NativeType("VkMemoryGetRemoteAddressInfoNV*") long pMemoryGetRemoteAddressInfo, @NativeType("VkRemoteAddressNV**") long pAddress) {
		try {
			return (int) vkGetMemoryRemoteAddressNV.invokeExact(device, pMemoryGetRemoteAddressInfo, pAddress);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}