package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkFuchsiaBufferCollection {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 0;

	// VkBufferCollectionFUCHSIA

	/**
	* VkBufferCollectionFUCHSIA
	*/
	public static final int VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 0;

	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1;

	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 2;

	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 3;

	public static final int VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 4;

	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 5;

	public static final int VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 6;

	public static final int VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 7;

	public static final int VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 8;

	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 9;

	// Will add VkImageFormatConstraintsFlagBitsFUCHSIA when bits are defined in the future

	private static final MethodHandle vkCreateBufferCollectionFUCHSIA = createHandle("vkCreateBufferCollectionFUCHSIA", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_INITIALIZATION_FAILED
	*/
	@NativeType("VkResult")
	public static int vkCreateBufferCollectionFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionCreateInfoFUCHSIA*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkBufferCollectionFUCHSIA**") long pCollection) {
		try {
			return (int) vkCreateBufferCollectionFUCHSIA.invokeExact(device, pCreateInfo, pAllocator, pCollection);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkSetBufferCollectionImageConstraintsFUCHSIA = createHandle("vkSetBufferCollectionImageConstraintsFUCHSIA", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED
	*/
	@NativeType("VkResult")
	public static int vkSetBufferCollectionImageConstraintsFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, @NativeType("VkImageConstraintsInfoFUCHSIA*") long pImageConstraintsInfo) {
		try {
			return (int) vkSetBufferCollectionImageConstraintsFUCHSIA.invokeExact(device, collection, pImageConstraintsInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkSetBufferCollectionBufferConstraintsFUCHSIA = createHandle("vkSetBufferCollectionBufferConstraintsFUCHSIA", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED
	*/
	@NativeType("VkResult")
	public static int vkSetBufferCollectionBufferConstraintsFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, @NativeType("VkBufferConstraintsInfoFUCHSIA*") long pBufferConstraintsInfo) {
		try {
			return (int) vkSetBufferCollectionBufferConstraintsFUCHSIA.invokeExact(device, collection, pBufferConstraintsInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyBufferCollectionFUCHSIA = createHandle("vkDestroyBufferCollectionFUCHSIA", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyBufferCollectionFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyBufferCollectionFUCHSIA.invokeExact(device, collection, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetBufferCollectionPropertiesFUCHSIA = createHandle("vkGetBufferCollectionPropertiesFUCHSIA", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*/
	@NativeType("VkResult")
	public static int vkGetBufferCollectionPropertiesFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, @NativeType("VkBufferCollectionPropertiesFUCHSIA*") long pProperties) {
		try {
			return (int) vkGetBufferCollectionPropertiesFUCHSIA.invokeExact(device, collection, pProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}