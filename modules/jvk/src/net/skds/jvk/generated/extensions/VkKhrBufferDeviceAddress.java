package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrBufferDeviceAddress {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 2;

	public static final int VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 3;

	public static final int VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 4;

	public static final int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072;

	public static final int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16;

	public static final int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2;

	public static final int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4;

	public static final int VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = 0;

	private static final MethodHandle vkGetBufferDeviceAddressKHR = createHandle("vkGetBufferDeviceAddressKHR", LONG, LONG, LONG);

	@NativeType("VkDeviceAddress")
	public static long vkGetBufferDeviceAddressKHR(@NativeType("VkDevice*") long device, @NativeType("VkBufferDeviceAddressInfo*") long pInfo) {
		try {
			return (long) vkGetBufferDeviceAddressKHR.invokeExact(device, pInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetBufferOpaqueCaptureAddressKHR = createHandle("vkGetBufferOpaqueCaptureAddressKHR", LONG, LONG, LONG);

	@NativeType("uint64_t")
	public static long vkGetBufferOpaqueCaptureAddressKHR(@NativeType("VkDevice*") long device, @NativeType("VkBufferDeviceAddressInfo*") long pInfo) {
		try {
			return (long) vkGetBufferOpaqueCaptureAddressKHR.invokeExact(device, pInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetDeviceMemoryOpaqueCaptureAddressKHR = createHandle("vkGetDeviceMemoryOpaqueCaptureAddressKHR", LONG, LONG, LONG);

	@NativeType("uint64_t")
	public static long vkGetDeviceMemoryOpaqueCaptureAddressKHR(@NativeType("VkDevice*") long device, @NativeType("VkDeviceMemoryOpaqueCaptureAddressInfo*") long pInfo) {
		try {
			return (long) vkGetDeviceMemoryOpaqueCaptureAddressKHR.invokeExact(device, pInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}