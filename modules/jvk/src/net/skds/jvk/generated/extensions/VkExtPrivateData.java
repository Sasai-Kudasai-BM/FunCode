package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtPrivateData {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 2;

	public static final int VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 0;

	// Will add VkPrivateDataSlotCreateFlagBits when bits are defined in the future

	private static final MethodHandle vkCreatePrivateDataSlotEXT = createHandle("vkCreatePrivateDataSlotEXT", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreatePrivateDataSlotEXT(@NativeType("VkDevice*") long device, @NativeType("VkPrivateDataSlotCreateInfo*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkPrivateDataSlot**") long pPrivateDataSlot) {
		try {
			return (int) vkCreatePrivateDataSlotEXT.invokeExact(device, pCreateInfo, pAllocator, pPrivateDataSlot);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyPrivateDataSlotEXT = createHandle("vkDestroyPrivateDataSlotEXT", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyPrivateDataSlotEXT(@NativeType("VkDevice*") long device, @NativeType("VkPrivateDataSlot*") /*optional, external sync*/ long privateDataSlot, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyPrivateDataSlotEXT.invokeExact(device, privateDataSlot, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkSetPrivateDataEXT = createHandle("vkSetPrivateDataEXT", INT, LONG, INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkSetPrivateDataEXT(@NativeType("VkDevice*") long device, @NativeType("VkObjectType") int objectType, @NativeType("uint64_t") long objectHandle, @NativeType("VkPrivateDataSlot*") long privateDataSlot, @NativeType("uint64_t") long data) {
		try {
			return (int) vkSetPrivateDataEXT.invokeExact(device, objectType, objectHandle, privateDataSlot, data);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPrivateDataEXT = createHandle("vkGetPrivateDataEXT", VOID, LONG, INT, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetPrivateDataEXT(@NativeType("VkDevice*") long device, @NativeType("VkObjectType") int objectType, @NativeType("uint64_t") long objectHandle, @NativeType("VkPrivateDataSlot*") long privateDataSlot, @NativeType("uint64_t*") long pData) {
		try {
			vkGetPrivateDataEXT.invokeExact(device, objectType, objectHandle, privateDataSlot, pData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}