package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtTransformFeedback {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	private static final MethodHandle vkCmdBindTransformFeedbackBuffersEXT = createHandle("vkCmdBindTransformFeedbackBuffersEXT", VOID, LONG, INT, INT, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkCmdBindTransformFeedbackBuffersEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("uint32_t") int firstBinding, @NativeType("uint32_t") int bindingCount, @NativeType("VkBuffer**") long pBuffers, @NativeType("VkDeviceSize*") long pOffsets, @NativeType("VkDeviceSize*") /*optional*/ long pSizes) {
		try {
			vkCmdBindTransformFeedbackBuffersEXT.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdBeginTransformFeedbackEXT = createHandle("vkCmdBeginTransformFeedbackEXT", VOID, LONG, INT, INT, LONG, LONG);

	@NativeType("void")
	public static void vkCmdBeginTransformFeedbackEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("uint32_t") int firstCounterBuffer, @NativeType("uint32_t") /*optional*/ int counterBufferCount, @NativeType("VkBuffer**") long pCounterBuffers, @NativeType("VkDeviceSize*") /*optional*/ long pCounterBufferOffsets) {
		try {
			vkCmdBeginTransformFeedbackEXT.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdEndTransformFeedbackEXT = createHandle("vkCmdEndTransformFeedbackEXT", VOID, LONG, INT, INT, LONG, LONG);

	@NativeType("void")
	public static void vkCmdEndTransformFeedbackEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("uint32_t") int firstCounterBuffer, @NativeType("uint32_t") /*optional*/ int counterBufferCount, @NativeType("VkBuffer**") long pCounterBuffers, @NativeType("VkDeviceSize*") /*optional*/ long pCounterBufferOffsets) {
		try {
			vkCmdEndTransformFeedbackEXT.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdBeginQueryIndexedEXT = createHandle("vkCmdBeginQueryIndexedEXT", VOID, LONG, LONG, INT, INT, INT);

	@NativeType("void")
	public static void vkCmdBeginQueryIndexedEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int query, @NativeType("VkQueryControlFlags") /*optional*/ int flags, @NativeType("uint32_t") int index) {
		try {
			vkCmdBeginQueryIndexedEXT.invokeExact(commandBuffer, queryPool, query, flags, index);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdEndQueryIndexedEXT = createHandle("vkCmdEndQueryIndexedEXT", VOID, LONG, LONG, INT, INT);

	@NativeType("void")
	public static void vkCmdEndQueryIndexedEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int query, @NativeType("uint32_t") int index) {
		try {
			vkCmdEndQueryIndexedEXT.invokeExact(commandBuffer, queryPool, query, index);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdDrawIndirectByteCountEXT = createHandle("vkCmdDrawIndirectByteCountEXT", VOID, LONG, INT, INT, LONG, LONG, INT, INT);

	@NativeType("void")
	public static void vkCmdDrawIndirectByteCountEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("uint32_t") int instanceCount, @NativeType("uint32_t") int firstInstance, @NativeType("VkBuffer*") long counterBuffer, @NativeType("VkDeviceSize") long counterBufferOffset, @NativeType("uint32_t") int counterOffset, @NativeType("uint32_t") int vertexStride) {
		try {
			vkCmdDrawIndirectByteCountEXT.invokeExact(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 2;

	public static final int VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 4;

	public static final int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048;

	public static final int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096;

	public static final int VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432;

	public static final int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864;

	public static final int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728;

	public static final int VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216;
}