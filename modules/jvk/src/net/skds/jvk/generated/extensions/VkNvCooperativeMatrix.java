package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkNvCooperativeMatrix {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 0;

	public static final int VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 2;

	private static final MethodHandle vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = createHandle("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t*") /*optional*/ long pPropertyCount, @NativeType("VkCooperativeMatrixPropertiesNV*") /*optional*/ long pProperties) {
		try {
			return (int) vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.invokeExact(physicalDevice, pPropertyCount, pProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}