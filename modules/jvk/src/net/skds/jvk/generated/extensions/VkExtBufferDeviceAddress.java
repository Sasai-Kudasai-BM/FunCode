package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtBufferDeviceAddress {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 2;

	public static final int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072;

	public static final int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16;

	public static final int VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = 0;

	private static final MethodHandle vkGetBufferDeviceAddressEXT = createHandle("vkGetBufferDeviceAddressEXT", LONG, LONG, LONG);

	@NativeType("VkDeviceAddress")
	public static long vkGetBufferDeviceAddressEXT(@NativeType("VkDevice*") long device, @NativeType("VkBufferDeviceAddressInfo*") long pInfo) {
		try {
			return (long) vkGetBufferDeviceAddressEXT.invokeExact(device, pInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}