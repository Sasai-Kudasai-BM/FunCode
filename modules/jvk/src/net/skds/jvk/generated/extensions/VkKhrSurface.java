package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrSurface {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_ERROR_SURFACE_LOST_KHR = 0;

	public static final int VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = 1;

	public static final int VK_OBJECT_TYPE_SURFACE_KHR = 0;

	private static final MethodHandle vkDestroySurfaceKHR = createHandle("vkDestroySurfaceKHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroySurfaceKHR(@NativeType("VkInstance*") long instance, @NativeType("VkSurfaceKHR*") /*optional, external sync*/ long surface, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroySurfaceKHR.invokeExact(instance, surface, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceSurfaceSupportKHR = createHandle("vkGetPhysicalDeviceSurfaceSupportKHR", INT, LONG, INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceSupportKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int queueFamilyIndex, @NativeType("VkSurfaceKHR*") long surface, @NativeType("VkBool32*") long pSupported) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceSupportKHR.invokeExact(physicalDevice, queueFamilyIndex, surface, pSupported);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceSurfaceCapabilitiesKHR = createHandle("vkGetPhysicalDeviceSurfaceCapabilitiesKHR", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceCapabilitiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkSurfaceKHR*") long surface, @NativeType("VkSurfaceCapabilitiesKHR*") long pSurfaceCapabilities) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceCapabilitiesKHR.invokeExact(physicalDevice, surface, pSurfaceCapabilities);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceSurfaceFormatsKHR = createHandle("vkGetPhysicalDeviceSurfaceFormatsKHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceFormatsKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkSurfaceKHR*") /*optional*/ long surface, @NativeType("uint32_t*") /*optional*/ long pSurfaceFormatCount, @NativeType("VkSurfaceFormatKHR*") /*optional*/ long pSurfaceFormats) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceFormatsKHR.invokeExact(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceSurfacePresentModesKHR = createHandle("vkGetPhysicalDeviceSurfacePresentModesKHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfacePresentModesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkSurfaceKHR*") /*optional*/ long surface, @NativeType("uint32_t*") /*optional*/ long pPresentModeCount, @NativeType("VkPresentModeKHR*") /*optional*/ long pPresentModes) {
		try {
			return (int) vkGetPhysicalDeviceSurfacePresentModesKHR.invokeExact(physicalDevice, surface, pPresentModeCount, pPresentModes);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}