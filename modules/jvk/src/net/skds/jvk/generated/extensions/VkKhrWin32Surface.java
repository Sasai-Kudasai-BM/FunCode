package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrWin32Surface {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 0;

	private static final MethodHandle vkCreateWin32SurfaceKHR = createHandle("vkCreateWin32SurfaceKHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateWin32SurfaceKHR(@NativeType("VkInstance*") long instance, @NativeType("VkWin32SurfaceCreateInfoKHR*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkSurfaceKHR**") long pSurface) {
		try {
			return (int) vkCreateWin32SurfaceKHR.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceWin32PresentationSupportKHR = createHandle("vkGetPhysicalDeviceWin32PresentationSupportKHR", INT, LONG, INT);

	@NativeType("VkBool32")
	public static int vkGetPhysicalDeviceWin32PresentationSupportKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int queueFamilyIndex) {
		try {
			return (int) vkGetPhysicalDeviceWin32PresentationSupportKHR.invokeExact(physicalDevice, queueFamilyIndex);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}