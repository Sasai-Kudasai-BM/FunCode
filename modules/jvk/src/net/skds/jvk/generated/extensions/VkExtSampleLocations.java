package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtSampleLocations {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096;

	public static final int VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 2;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 3;

	public static final int VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 4;

	public static final int VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 0;

	private static final MethodHandle vkCmdSetSampleLocationsEXT = createHandle("vkCmdSetSampleLocationsEXT", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdSetSampleLocationsEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkSampleLocationsInfoEXT*") long pSampleLocationsInfo) {
		try {
			vkCmdSetSampleLocationsEXT.invokeExact(commandBuffer, pSampleLocationsInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceMultisamplePropertiesEXT = createHandle("vkGetPhysicalDeviceMultisamplePropertiesEXT", VOID, LONG, INT, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceMultisamplePropertiesEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkSampleCountFlagBits") int samples, @NativeType("VkMultisamplePropertiesEXT*") long pMultisampleProperties) {
		try {
			vkGetPhysicalDeviceMultisamplePropertiesEXT.invokeExact(physicalDevice, samples, pMultisampleProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}