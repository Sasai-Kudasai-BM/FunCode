package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtAcquireDrmDisplay {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	private static final MethodHandle vkAcquireDrmDisplayEXT = createHandle("vkAcquireDrmDisplayEXT", INT, LONG, INT, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED
	*/
	@NativeType("VkResult")
	public static int vkAcquireDrmDisplayEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("int32_t") int drmFd, @NativeType("VkDisplayKHR*") long display) {
		try {
			return (int) vkAcquireDrmDisplayEXT.invokeExact(physicalDevice, drmFd, display);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetDrmDisplayEXT = createHandle("vkGetDrmDisplayEXT", INT, LONG, INT, INT, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetDrmDisplayEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("int32_t") int drmFd, @NativeType("uint32_t") int connectorId, @NativeType("VkDisplayKHR**") long display) {
		try {
			return (int) vkGetDrmDisplayEXT.invokeExact(physicalDevice, drmFd, connectorId, display);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}