package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkFuchsiaExternalSemaphore {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 0;

	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1;

	public static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128;

	private static final MethodHandle vkImportSemaphoreZirconHandleFUCHSIA = createHandle("vkImportSemaphoreZirconHandleFUCHSIA", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE
	*/
	@NativeType("VkResult")
	public static int vkImportSemaphoreZirconHandleFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkImportSemaphoreZirconHandleInfoFUCHSIA*") long pImportSemaphoreZirconHandleInfo) {
		try {
			return (int) vkImportSemaphoreZirconHandleFUCHSIA.invokeExact(device, pImportSemaphoreZirconHandleInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetSemaphoreZirconHandleFUCHSIA = createHandle("vkGetSemaphoreZirconHandleFUCHSIA", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetSemaphoreZirconHandleFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkSemaphoreGetZirconHandleInfoFUCHSIA*") long pGetZirconHandleInfo, @NativeType("zx_handle_t**") long pZirconHandle) {
		try {
			return (int) vkGetSemaphoreZirconHandleFUCHSIA.invokeExact(device, pGetZirconHandleInfo, pZirconHandle);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}