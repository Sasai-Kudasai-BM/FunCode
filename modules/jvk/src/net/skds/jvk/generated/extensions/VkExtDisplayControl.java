package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtDisplayControl {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 2;

	public static final int VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 3;

	private static final MethodHandle vkDisplayPowerControlEXT = createHandle("vkDisplayPowerControlEXT", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkDisplayPowerControlEXT(@NativeType("VkDevice*") long device, @NativeType("VkDisplayKHR*") long display, @NativeType("VkDisplayPowerInfoEXT*") long pDisplayPowerInfo) {
		try {
			return (int) vkDisplayPowerControlEXT.invokeExact(device, display, pDisplayPowerInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkRegisterDeviceEventEXT = createHandle("vkRegisterDeviceEventEXT", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkRegisterDeviceEventEXT(@NativeType("VkDevice*") long device, @NativeType("VkDeviceEventInfoEXT*") long pDeviceEventInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkFence**") long pFence) {
		try {
			return (int) vkRegisterDeviceEventEXT.invokeExact(device, pDeviceEventInfo, pAllocator, pFence);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkRegisterDisplayEventEXT = createHandle("vkRegisterDisplayEventEXT", INT, LONG, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkRegisterDisplayEventEXT(@NativeType("VkDevice*") long device, @NativeType("VkDisplayKHR*") long display, @NativeType("VkDisplayEventInfoEXT*") long pDisplayEventInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkFence**") long pFence) {
		try {
			return (int) vkRegisterDisplayEventEXT.invokeExact(device, display, pDisplayEventInfo, pAllocator, pFence);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetSwapchainCounterEXT = createHandle("vkGetSwapchainCounterEXT", INT, LONG, LONG, INT, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetSwapchainCounterEXT(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain, @NativeType("VkSurfaceCounterFlagBitsEXT") int counter, @NativeType("uint64_t*") long pCounterValue) {
		try {
			return (int) vkGetSwapchainCounterEXT.invokeExact(device, swapchain, counter, pCounterValue);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}