package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtToolingInfo {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 0;

	private static final MethodHandle vkGetPhysicalDeviceToolPropertiesEXT = createHandle("vkGetPhysicalDeviceToolPropertiesEXT", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceToolPropertiesEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t*") /*optional*/ long pToolCount, @NativeType("VkPhysicalDeviceToolProperties*") /*optional*/ long pToolProperties) {
		try {
			return (int) vkGetPhysicalDeviceToolPropertiesEXT.invokeExact(physicalDevice, pToolCount, pToolProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	public static final int VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32;

	public static final int VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64;
}