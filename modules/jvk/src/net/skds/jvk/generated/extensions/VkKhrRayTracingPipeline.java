package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrRayTracingPipeline {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_SHADER_UNUSED_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 15;

	public static final int VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 16;

	public static final int VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 18;

	public static final int VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256;

	public static final int VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512;

	public static final int VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024;

	public static final int VK_SHADER_STAGE_MISS_BIT_KHR = 2048;

	public static final int VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096;

	public static final int VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192;

	public static final int VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152;

	public static final int VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024;

	public static final int VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 0;

	public static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384;

	public static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768;

	public static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536;

	public static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072;

	public static final int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096;

	public static final int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192;

	public static final int VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288;

	public static final int VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 0;

	private static final MethodHandle vkCmdTraceRaysKHR = createHandle("vkCmdTraceRaysKHR", VOID, LONG, LONG, LONG, LONG, LONG, INT, INT, INT);

	@NativeType("void")
	public static void vkCmdTraceRaysKHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkStridedDeviceAddressRegionKHR*") long pRaygenShaderBindingTable, @NativeType("VkStridedDeviceAddressRegionKHR*") long pMissShaderBindingTable, @NativeType("VkStridedDeviceAddressRegionKHR*") long pHitShaderBindingTable, @NativeType("VkStridedDeviceAddressRegionKHR*") long pCallableShaderBindingTable, @NativeType("uint32_t") int width, @NativeType("uint32_t") int height, @NativeType("uint32_t") int depth) {
		try {
			vkCmdTraceRaysKHR.invokeExact(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCreateRayTracingPipelinesKHR = createHandle("vkCreateRayTracingPipelinesKHR", INT, LONG, LONG, LONG, INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR,VK_PIPELINE_COMPILE_REQUIRED_EXT
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS
	*/
	@NativeType("VkResult")
	public static int vkCreateRayTracingPipelinesKHR(@NativeType("VkDevice*") long device, @NativeType("VkDeferredOperationKHR*") /*optional*/ long deferredOperation, @NativeType("VkPipelineCache*") /*optional*/ long pipelineCache, @NativeType("uint32_t") int createInfoCount, @NativeType("VkRayTracingPipelineCreateInfoKHR*") long pCreateInfos, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkPipeline**") long pPipelines) {
		try {
			return (int) vkCreateRayTracingPipelinesKHR.invokeExact(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetRayTracingShaderGroupHandlesKHR = createHandle("vkGetRayTracingShaderGroupHandlesKHR", INT, LONG, LONG, INT, INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetRayTracingShaderGroupHandlesKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long pipeline, @NativeType("uint32_t") int firstGroup, @NativeType("uint32_t") int groupCount, @NativeType("size_t") long dataSize, @NativeType("void*") long pData) {
		try {
			return (int) vkGetRayTracingShaderGroupHandlesKHR.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = createHandle("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", INT, LONG, LONG, INT, INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long pipeline, @NativeType("uint32_t") int firstGroup, @NativeType("uint32_t") int groupCount, @NativeType("size_t") long dataSize, @NativeType("void*") long pData) {
		try {
			return (int) vkGetRayTracingCaptureReplayShaderGroupHandlesKHR.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdTraceRaysIndirectKHR = createHandle("vkCmdTraceRaysIndirectKHR", VOID, LONG, LONG, LONG, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkCmdTraceRaysIndirectKHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkStridedDeviceAddressRegionKHR*") long pRaygenShaderBindingTable, @NativeType("VkStridedDeviceAddressRegionKHR*") long pMissShaderBindingTable, @NativeType("VkStridedDeviceAddressRegionKHR*") long pHitShaderBindingTable, @NativeType("VkStridedDeviceAddressRegionKHR*") long pCallableShaderBindingTable, @NativeType("VkDeviceAddress") long indirectDeviceAddress) {
		try {
			vkCmdTraceRaysIndirectKHR.invokeExact(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetRayTracingShaderGroupStackSizeKHR = createHandle("vkGetRayTracingShaderGroupStackSizeKHR", LONG, LONG, LONG, INT, INT);

	@NativeType("VkDeviceSize")
	public static long vkGetRayTracingShaderGroupStackSizeKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long pipeline, @NativeType("uint32_t") int group, @NativeType("VkShaderGroupShaderKHR") int groupShader) {
		try {
			return (long) vkGetRayTracingShaderGroupStackSizeKHR.invokeExact(device, pipeline, group, groupShader);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdSetRayTracingPipelineStackSizeKHR = createHandle("vkCmdSetRayTracingPipelineStackSizeKHR", VOID, LONG, INT);

	@NativeType("void")
	public static void vkCmdSetRayTracingPipelineStackSizeKHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("uint32_t") int pipelineStackSize) {
		try {
			vkCmdSetRayTracingPipelineStackSizeKHR.invokeExact(commandBuffer, pipelineStackSize);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}