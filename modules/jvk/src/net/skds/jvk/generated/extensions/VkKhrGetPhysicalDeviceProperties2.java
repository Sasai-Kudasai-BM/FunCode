package net.skds.jvk.generated.extensions;
import net.skds.jvk.annotation.NativeType;
import static net.skds.ninvoker.NInvoker.*;
import java.lang.invoke.MethodHandle;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrGetPhysicalDeviceProperties2 {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 2;

	public static final int VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 3;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 4;

	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 5;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 6;

	public static final int VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 7;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 8;

	private static final MethodHandle vkGetPhysicalDeviceFeatures2KHR = createHandle("vkGetPhysicalDeviceFeatures2KHR", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceFeatures2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceFeatures2*") long pFeatures) {
		try {
			vkGetPhysicalDeviceFeatures2KHR.invokeExact(physicalDevice, pFeatures);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceProperties2KHR = createHandle("vkGetPhysicalDeviceProperties2KHR", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceProperties2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceProperties2*") long pProperties) {
		try {
			vkGetPhysicalDeviceProperties2KHR.invokeExact(physicalDevice, pProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceFormatProperties2KHR = createHandle("vkGetPhysicalDeviceFormatProperties2KHR", VOID, LONG, INT, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceFormatProperties2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkFormat") int format, @NativeType("VkFormatProperties2*") long pFormatProperties) {
		try {
			vkGetPhysicalDeviceFormatProperties2KHR.invokeExact(physicalDevice, format, pFormatProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceImageFormatProperties2KHR = createHandle("vkGetPhysicalDeviceImageFormatProperties2KHR", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceImageFormatProperties2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceImageFormatInfo2*") long pImageFormatInfo, @NativeType("VkImageFormatProperties2*") long pImageFormatProperties) {
		try {
			return (int) vkGetPhysicalDeviceImageFormatProperties2KHR.invokeExact(physicalDevice, pImageFormatInfo, pImageFormatProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceQueueFamilyProperties2KHR = createHandle("vkGetPhysicalDeviceQueueFamilyProperties2KHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceQueueFamilyProperties2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t*") /*optional*/ long pQueueFamilyPropertyCount, @NativeType("VkQueueFamilyProperties2*") /*optional*/ long pQueueFamilyProperties) {
		try {
			vkGetPhysicalDeviceQueueFamilyProperties2KHR.invokeExact(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceMemoryProperties2KHR = createHandle("vkGetPhysicalDeviceMemoryProperties2KHR", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceMemoryProperties2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceMemoryProperties2*") long pMemoryProperties) {
		try {
			vkGetPhysicalDeviceMemoryProperties2KHR.invokeExact(physicalDevice, pMemoryProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceSparseImageFormatProperties2KHR = createHandle("vkGetPhysicalDeviceSparseImageFormatProperties2KHR", VOID, LONG, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceSparseImageFormatInfo2*") long pFormatInfo, @NativeType("uint32_t*") /*optional*/ long pPropertyCount, @NativeType("VkSparseImageFormatProperties2*") /*optional*/ long pProperties) {
		try {
			vkGetPhysicalDeviceSparseImageFormatProperties2KHR.invokeExact(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}