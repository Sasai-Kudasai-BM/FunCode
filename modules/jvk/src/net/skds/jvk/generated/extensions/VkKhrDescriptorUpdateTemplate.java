package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrDescriptorUpdateTemplate {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 0;

	public static final int VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 0;

	private static final MethodHandle vkCreateDescriptorUpdateTemplateKHR = createHandle("vkCreateDescriptorUpdateTemplateKHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateDescriptorUpdateTemplateKHR(@NativeType("VkDevice*") long device, @NativeType("VkDescriptorUpdateTemplateCreateInfo*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkDescriptorUpdateTemplate**") long pDescriptorUpdateTemplate) {
		try {
			return (int) vkCreateDescriptorUpdateTemplateKHR.invokeExact(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyDescriptorUpdateTemplateKHR = createHandle("vkDestroyDescriptorUpdateTemplateKHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyDescriptorUpdateTemplateKHR(@NativeType("VkDevice*") long device, @NativeType("VkDescriptorUpdateTemplate*") /*optional, external sync*/ long descriptorUpdateTemplate, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyDescriptorUpdateTemplateKHR.invokeExact(device, descriptorUpdateTemplate, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkUpdateDescriptorSetWithTemplateKHR = createHandle("vkUpdateDescriptorSetWithTemplateKHR", VOID, LONG, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkUpdateDescriptorSetWithTemplateKHR(@NativeType("VkDevice*") long device, @NativeType("VkDescriptorSet*") /*external sync*/ long descriptorSet, @NativeType("VkDescriptorUpdateTemplate*") long descriptorUpdateTemplate, @NativeType("void*") long pData) {
		try {
			vkUpdateDescriptorSetWithTemplateKHR.invokeExact(device, descriptorSet, descriptorUpdateTemplate, pData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	public static final int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0;

	private static final MethodHandle vkCmdPushDescriptorSetWithTemplateKHR = createHandle("vkCmdPushDescriptorSetWithTemplateKHR", VOID, LONG, LONG, LONG, INT, LONG);

	@NativeType("void")
	public static void vkCmdPushDescriptorSetWithTemplateKHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkDescriptorUpdateTemplate*") long descriptorUpdateTemplate, @NativeType("VkPipelineLayout*") long layout, @NativeType("uint32_t") int set, @NativeType("void*") long pData) {
		try {
			vkCmdPushDescriptorSetWithTemplateKHR.invokeExact(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	// Create descriptor update template for pushed descriptor updates

	/**
	* Create descriptor update template for pushed descriptor updates
	*/
	public static final int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1;

	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 0;
}