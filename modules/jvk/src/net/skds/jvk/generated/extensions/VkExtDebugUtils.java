package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import net.skds.lib.utils.annotations.AutoGenerated;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtDebugUtils {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 2;

	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 3;

	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 4;

	public static final int VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 0;

	private static final MethodHandle vkSetDebugUtilsObjectNameEXT = createHandle("vkSetDebugUtilsObjectNameEXT", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkSetDebugUtilsObjectNameEXT(@NativeType("VkDevice*") long device, @NativeType("VkDebugUtilsObjectNameInfoEXT*") /*external sync*/ long pNameInfo) {
		try {
			return (int) vkSetDebugUtilsObjectNameEXT.invokeExact(device, pNameInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkSetDebugUtilsObjectTagEXT = createHandle("vkSetDebugUtilsObjectTagEXT", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkSetDebugUtilsObjectTagEXT(@NativeType("VkDevice*") long device, @NativeType("VkDebugUtilsObjectTagInfoEXT*") /*external sync*/ long pTagInfo) {
		try {
			return (int) vkSetDebugUtilsObjectTagEXT.invokeExact(device, pTagInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkQueueBeginDebugUtilsLabelEXT = createHandle("vkQueueBeginDebugUtilsLabelEXT", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkQueueBeginDebugUtilsLabelEXT(@NativeType("VkQueue*") long queue, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkQueueBeginDebugUtilsLabelEXT.invokeExact(queue, pLabelInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkQueueEndDebugUtilsLabelEXT = createHandle("vkQueueEndDebugUtilsLabelEXT", VOID, LONG);

	@NativeType("void")
	public static void vkQueueEndDebugUtilsLabelEXT(@NativeType("VkQueue*") long queue) {
		try {
			vkQueueEndDebugUtilsLabelEXT.invokeExact(queue);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkQueueInsertDebugUtilsLabelEXT = createHandle("vkQueueInsertDebugUtilsLabelEXT", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkQueueInsertDebugUtilsLabelEXT(@NativeType("VkQueue*") long queue, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkQueueInsertDebugUtilsLabelEXT.invokeExact(queue, pLabelInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdBeginDebugUtilsLabelEXT = createHandle("vkCmdBeginDebugUtilsLabelEXT", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdBeginDebugUtilsLabelEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkCmdBeginDebugUtilsLabelEXT.invokeExact(commandBuffer, pLabelInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdEndDebugUtilsLabelEXT = createHandle("vkCmdEndDebugUtilsLabelEXT", VOID, LONG);

	@NativeType("void")
	public static void vkCmdEndDebugUtilsLabelEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer) {
		try {
			vkCmdEndDebugUtilsLabelEXT.invokeExact(commandBuffer);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdInsertDebugUtilsLabelEXT = createHandle("vkCmdInsertDebugUtilsLabelEXT", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdInsertDebugUtilsLabelEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkCmdInsertDebugUtilsLabelEXT.invokeExact(commandBuffer, pLabelInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCreateDebugUtilsMessengerEXT = createHandle("vkCreateDebugUtilsMessengerEXT", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateDebugUtilsMessengerEXT(@NativeType("VkInstance*") long instance, @NativeType("VkDebugUtilsMessengerCreateInfoEXT*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkDebugUtilsMessengerEXT**") long pMessenger) {
		try {
			return (int) vkCreateDebugUtilsMessengerEXT.invokeExact(instance, pCreateInfo, pAllocator, pMessenger);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyDebugUtilsMessengerEXT = createHandle("vkDestroyDebugUtilsMessengerEXT", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyDebugUtilsMessengerEXT(@NativeType("VkInstance*") long instance, @NativeType("VkDebugUtilsMessengerEXT*") /*optional, external sync*/ long messenger, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyDebugUtilsMessengerEXT.invokeExact(instance, messenger, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkSubmitDebugUtilsMessageEXT = createHandle("vkSubmitDebugUtilsMessageEXT", VOID, LONG, INT, INT, LONG);

	@NativeType("void")
	public static void vkSubmitDebugUtilsMessageEXT(@NativeType("VkInstance*") long instance, @NativeType("VkDebugUtilsMessageSeverityFlagBitsEXT") int messageSeverity, @NativeType("VkDebugUtilsMessageTypeFlagsEXT") int messageTypes, @NativeType("VkDebugUtilsMessengerCallbackDataEXT*") long pCallbackData) {
		try {
			vkSubmitDebugUtilsMessageEXT.invokeExact(instance, messageSeverity, messageTypes, pCallbackData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}