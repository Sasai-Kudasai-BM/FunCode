package net.skds.jvk.generator;

import lombok.RequiredArgsConstructor;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@RequiredArgsConstructor
public class ClassBuilder {

	public final String pack;
	public final String name;
	public final Type type;
	public final boolean fnl;

	public final Set<Class<?>> imports = new HashSet<>();
	public final List<Field> fields = new ArrayList<>();
	public final List<Method> methods = new ArrayList<>();

	public ClassBuilder(String pack, String name, Type type) {
		this.pack = pack;
		this.name = name;
		this.type = type;
		this.fnl = true;
	}

	public void method(String name, Class<?> rt, String body, String comment, Arg... args) {
		methods.add(new Method(name, rt, args, body, comment));
		checkImport(rt);
		checkImport(args);
	}

	public void field(String name, Class<?> type, String initializer, String comment) {
		fields.add(new Field(name, type, initializer, comment));
		checkImport(type);
	}

	public void export() {
		try {
			File dir = new File(VKGen.EXPORT_DIR, pack.replace(".", "/"));
			dir.mkdirs();
			File fl = new File(dir, name + ".java");
			Files.writeString(fl.toPath(), toString(), StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("package ").append(pack).append(";\n");

		for (Class<?> imp : imports) {
			sb.append("import ").append(imp.getName()).append(";\n");
		}
		sb.append("\n@AutoGenerated\npublic ");
		if (fnl) {
			sb.append("final ");
		}
		sb.append(type.name().toLowerCase()).append(" ").append(name).append(" {\n\n");

		for (Field fld : fields) {
			sb.append("\t");
			if (fld.comment != null && !fld.comment.isEmpty()) {
				sb.append("// ").append(fld.comment.replace("\n", "\n\t//")).append("\n\t");
			}
			if (fld.type != null) {
				if (type == Type.CLASS) {
					sb.append("public static final");
				}
				sb.append(" ").append(fld.type.getSimpleName()).append(" ").append(fld.name);
				if (fld.initializer != null && !fld.initializer.isEmpty()) {
					sb.append(" = ").append(fld.initializer);
				}
				sb.append(";");
			}
			sb.append("\n");
		}

		sb.append("\n");

		for (Method mtd : methods) {
			sb.append("\t");
			if (mtd.comment != null && !mtd.comment.isEmpty()) {
				sb.append("// ").append(mtd.comment.replace("\n", "\n\t//")).append("\n\t");
			}
			sb.append("public static ");

			sb.append(mtd.rt.getSimpleName()).append(" ").append(mtd.name).append("(");
			if (mtd.args != null) {
				for (int i = 0; i < mtd.args.length; i++) {
					Arg arg = mtd.args[i];
					if (arg.insertion != null) {
						sb.append(arg.insertion).append(" ");
					}
					sb.append(arg.type.getSimpleName()).append(" ").append(arg.name);
				}
			}
			sb.append(") {\n");
			sb.append(mtd.body);
			sb.append("\t}\n");
		}

		return sb.append("}").toString();
	}

	public record Arg(Class<?> type, String name, String insertion) {
		public Arg(Class<?> type, String name) {
			this(type, name, null);
		}
	}

	public record Method(String name, Class<?> rt, Arg[] args, String body, String comment) {

	}

	public record Field(String name, Class<?> type, String initializer, String comment) {

	}

	public enum Type {
		CLASS, ENUM;
	}

	private void checkImport(Arg... type) {
		for (int i = 0; i < type.length; i++) {
			checkImport(type[i].type);
		}
	}

	private void checkImport(Class<?> type) {
		if (type == null || type.isPrimitive()) return;
		imports.add(type);
	}
}
