package net.skds.jvk.generator;

import lombok.RequiredArgsConstructor;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@RequiredArgsConstructor
public class ClassBuilder {

	public final String pack;
	public final String name;
	public final Type type;

	public final Set<Class<?>> imports = new HashSet<>();
	public final List<Field> fields = new ArrayList<>();
	public final List<Method> methods = new ArrayList<>();

	public void method(String name, Class<?> rt, String body, String comment, Class<?>... args) {
		methods.add(new Method(name, rt, args, body, comment));
		checkImport(rt);
		checkImport(args);
	}

	public void field(String name, Class<?> type, String initializer, String comment) {
		fields.add(new Field(name, type, initializer, comment));
		checkImport(type);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("package").append(pack).append(";\n");

		for (Class<?> imp : imports) {
			sb.append("import ").append(imp.getName()).append(";\n");
		}
		sb.append("\n@AutoGenerated\npublic ").append(type.name().toLowerCase()).append(" ").append(name).append(" {\n\n");

		for (Field fld : fields) {
			sb.append("\t");
			if (fld.comment != null && !fld.comment.isEmpty()) {
				sb.append("// ").append(fld.comment).append("\n\t");
			}
			if (type == Type.CLASS) {
				sb.append("public static final");
			}
			sb.append(" ").append(fld.type.getSimpleName()).append(" ").append(fld.name);
			if (fld.initializer != null && !fld.initializer.isEmpty()) {
				sb.append(" = ").append(fld.initializer);
			}
			sb.append(";\n");
		}

		for (Method mtd : methods) {
			sb.append("\t");
			if (fld.comment != null && !fld.comment.isEmpty()) {
				sb.append("// ").append(fld.comment).append("\n\t");
			}
			if (type == Type.CLASS) {
				sb.append("public static final");
			}
			sb.append(" ").append(fld.type.getSimpleName()).append(" ").append(fld.name);
			if (fld.initializer != null && !fld.initializer.isEmpty()) {
				sb.append(" = ").append(fld.initializer);
			}
			sb.append(";\n");
		}

		return sb.append("}").toString();
	}

	public record Method(String name, Class<?> rt, Class<?>[] args, String body, String comment) {

	}

	public record Field(String name, Class<?> type, String initializer, String comment) {

	}

	public enum Type {
		CLASS, ENUM;
	}

	private void checkImport(Class<?>... type) {
		for (int i = 0; i < type.length; i++) {
			checkImport(type[i]);
		}
	}

	private void checkImport(Class<?> type) {
		if (type.isPrimitive()) return;
		imports.add(type);
	}
}
