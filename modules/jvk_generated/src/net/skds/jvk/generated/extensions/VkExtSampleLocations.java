package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkExtSampleLocations {
	
	public static final int VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096;
	public static final int VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000;
	public static final int VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003;
	public static final int VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004;
	public static final int VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000;
	private static final MethodHandle vkCmdSetSampleLocationsEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetSampleLocationsEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdSetSampleLocationsEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkSampleLocationsInfoEXT*") long pSampleLocationsInfo) {
		try {
			vkCmdSetSampleLocationsEXT.invokeExact(commandBuffer, pSampleLocationsInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceMultisamplePropertiesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceMultisamplePropertiesEXT", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkGetPhysicalDeviceMultisamplePropertiesEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkSampleCountFlagBits") int samples, @NativeType("VkMultisamplePropertiesEXT*") long pMultisampleProperties) {
		try {
			vkGetPhysicalDeviceMultisamplePropertiesEXT.invokeExact(physicalDevice, samples, pMultisampleProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}