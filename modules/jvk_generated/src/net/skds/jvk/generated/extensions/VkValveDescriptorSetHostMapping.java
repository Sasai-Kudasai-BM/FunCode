package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkValveDescriptorSetHostMapping {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000;
	public static final int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001;
	public static final int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002;
	private static final MethodHandle vkGetDescriptorSetLayoutHostMappingInfoVALVE = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDescriptorSetLayoutHostMappingInfoVALVE", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDescriptorSetLayoutHostMappingInfoVALVE(@NativeType("VkDevice*") long device, @NativeType("VkDescriptorSetBindingReferenceVALVE*") long pBindingReference, @NativeType("VkDescriptorSetLayoutHostMappingInfoVALVE*") long pHostMapping) {
		try {
			vkGetDescriptorSetLayoutHostMappingInfoVALVE.invokeExact(device, pBindingReference, pHostMapping);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDescriptorSetHostMappingVALVE = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDescriptorSetHostMappingVALVE", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDescriptorSetHostMappingVALVE(@NativeType("VkDevice*") long device, @NativeType("VkDescriptorSet*") long descriptorSet, @NativeType("void*") long ppData) {
		try {
			vkGetDescriptorSetHostMappingVALVE.invokeExact(device, descriptorSet, ppData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}