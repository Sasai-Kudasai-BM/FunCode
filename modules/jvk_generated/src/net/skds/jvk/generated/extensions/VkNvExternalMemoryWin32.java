package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvExternalMemoryWin32 {
	
	public static final int VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000;
	public static final int VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001;
	private static final MethodHandle vkGetMemoryWin32HandleNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetMemoryWin32HandleNV", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetMemoryWin32HandleNV(@NativeType("VkDevice*") long device, @NativeType("VkDeviceMemory*") long memory, @NativeType("VkExternalMemoryHandleTypeFlagsNV") int handleType, @NativeType("HANDLE**") long pHandle) {
		try {
			return (int) vkGetMemoryWin32HandleNV.invokeExact(device, memory, handleType, pHandle);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}