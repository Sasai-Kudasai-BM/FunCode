package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkExtDisplayControl {
	
	public static final int VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000;
	public static final int VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001;
	public static final int VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002;
	public static final int VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003;
	private static final MethodHandle vkDisplayPowerControlEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDisplayPowerControlEXT", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkDisplayPowerControlEXT(@NativeType("VkDevice*") long device, @NativeType("VkDisplayKHR*") long display, @NativeType("VkDisplayPowerInfoEXT*") long pDisplayPowerInfo) {
		try {
			return (int) vkDisplayPowerControlEXT.invokeExact(device, display, pDisplayPowerInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkRegisterDeviceEventEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkRegisterDeviceEventEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkRegisterDeviceEventEXT(@NativeType("VkDevice*") long device, @NativeType("VkDeviceEventInfoEXT*") long pDeviceEventInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkFence**") long pFence) {
		try {
			return (int) vkRegisterDeviceEventEXT.invokeExact(device, pDeviceEventInfo, pAllocator, pFence);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkRegisterDisplayEventEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkRegisterDisplayEventEXT", INT, LONG, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkRegisterDisplayEventEXT(@NativeType("VkDevice*") long device, @NativeType("VkDisplayKHR*") long display, @NativeType("VkDisplayEventInfoEXT*") long pDisplayEventInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkFence**") long pFence) {
		try {
			return (int) vkRegisterDisplayEventEXT.invokeExact(device, display, pDisplayEventInfo, pAllocator, pFence);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetSwapchainCounterEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetSwapchainCounterEXT", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetSwapchainCounterEXT(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain, @NativeType("VkSurfaceCounterFlagBitsEXT") int counter, @NativeType("uint64_t*") long pCounterValue) {
		try {
			return (int) vkGetSwapchainCounterEXT.invokeExact(device, swapchain, counter, pCounterValue);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}