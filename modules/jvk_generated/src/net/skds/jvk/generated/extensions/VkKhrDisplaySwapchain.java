package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkKhrDisplaySwapchain {
	
	public static final int VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000;
	public static final int VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = 1000003001;
	private static final MethodHandle vkCreateSharedSwapchainsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateSharedSwapchainsKHR", INT, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateSharedSwapchainsKHR(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int swapchainCount, @NativeType("VkSwapchainCreateInfoKHR*") long pCreateInfos, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkSwapchainKHR**") long pSwapchains) {
		try {
			return (int) vkCreateSharedSwapchainsKHR.invokeExact(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}