package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkNvDeviceGeneratedCommands {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	// 
	//                    This extension requires buffer_device_address functionality.
	//                    VK_EXT_buffer_device_address is also acceptable, but since it is deprecated the KHR version is
	//                    preferred.
	//                

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 0;

	public static final int VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1;

	public static final int VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 2;

	public static final int VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 3;

	public static final int VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 4;

	public static final int VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 5;

	public static final int VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 6;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 7;

	public static final int VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144;

	public static final int VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072;

	public static final int VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072;

	public static final int VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144;

	public static final int VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 0;

	private static final MethodHandle vkGetGeneratedCommandsMemoryRequirementsNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetGeneratedCommandsMemoryRequirementsNV", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetGeneratedCommandsMemoryRequirementsNV(@NativeType("VkDevice*") long device, @NativeType("VkGeneratedCommandsMemoryRequirementsInfoNV*") long pInfo, @NativeType("VkMemoryRequirements2*") long pMemoryRequirements) {
		try {
			vkGetGeneratedCommandsMemoryRequirementsNV.invokeExact(device, pInfo, pMemoryRequirements);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdPreprocessGeneratedCommandsNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdPreprocessGeneratedCommandsNV", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdPreprocessGeneratedCommandsNV(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkGeneratedCommandsInfoNV*") long pGeneratedCommandsInfo) {
		try {
			vkCmdPreprocessGeneratedCommandsNV.invokeExact(commandBuffer, pGeneratedCommandsInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdExecuteGeneratedCommandsNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdExecuteGeneratedCommandsNV", VOID, LONG, INT, LONG);

	@NativeType("void")
	public static void vkCmdExecuteGeneratedCommandsNV(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkBool32") int isPreprocessed, @NativeType("VkGeneratedCommandsInfoNV*") long pGeneratedCommandsInfo) {
		try {
			vkCmdExecuteGeneratedCommandsNV.invokeExact(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdBindPipelineShaderGroupNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdBindPipelineShaderGroupNV", VOID, LONG, INT, LONG, INT);

	@NativeType("void")
	public static void vkCmdBindPipelineShaderGroupNV(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkPipelineBindPoint") int pipelineBindPoint, @NativeType("VkPipeline*") long pipeline, @NativeType("uint32_t") int groupIndex) {
		try {
			vkCmdBindPipelineShaderGroupNV.invokeExact(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCreateIndirectCommandsLayoutNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCreateIndirectCommandsLayoutNV", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateIndirectCommandsLayoutNV(@NativeType("VkDevice*") long device, @NativeType("VkIndirectCommandsLayoutCreateInfoNV*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkIndirectCommandsLayoutNV**") long pIndirectCommandsLayout) {
		try {
			return (int) vkCreateIndirectCommandsLayoutNV.invokeExact(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyIndirectCommandsLayoutNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkDestroyIndirectCommandsLayoutNV", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyIndirectCommandsLayoutNV(@NativeType("VkDevice*") long device, @NativeType("VkIndirectCommandsLayoutNV*") /*optional, external sync*/ long indirectCommandsLayout, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyIndirectCommandsLayoutNV.invokeExact(device, indirectCommandsLayout, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}