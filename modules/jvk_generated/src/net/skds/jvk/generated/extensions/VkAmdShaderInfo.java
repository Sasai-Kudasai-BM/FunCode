package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkAmdShaderInfo {
	
	private static final MethodHandle vkGetShaderInfoAMD = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetShaderInfoAMD", INT, LONG, LONG, INT, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetShaderInfoAMD(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long pipeline, @NativeType("VkShaderStageFlagBits") int shaderStage, @NativeType("VkShaderInfoTypeAMD") int infoType, /* optional */ @NativeType("size_t*") long pInfoSize, /* optional */ @NativeType("void*") long pInfo) {
		try {
			return (int) vkGetShaderInfoAMD.invokeExact(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}