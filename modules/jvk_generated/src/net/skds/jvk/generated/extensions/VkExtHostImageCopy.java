package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkExtHostImageCopy {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = 1000270000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = 1000270001;
	public static final int VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = 1000270002;
	public static final int VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = 1000270003;
	public static final int VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = 1000270004;
	public static final int VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = 1000270005;
	public static final int VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = 1000270006;
	public static final int VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = 1000270007;
	public static final int VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = 1000270008;
	public static final int VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = 1000270009;
	
	// Can be used with host image copies
	
	/** Can be used with host image copies **/
	public static final int VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = 4194304;
	
	// Host image copies are supported
	
	/** Host image copies are supported **/
	public static final long VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT = 70368744177664L;
	public static final int VK_HOST_IMAGE_COPY_MEMCPY_BIT_EXT = 1;
	public static final int VK_HOST_IMAGE_COPY_MEMCPY_EXT = 1;
	private static final MethodHandle vkCopyMemoryToImageEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyMemoryToImageEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyMemoryToImageEXT(@NativeType("VkDevice*") long device, @NativeType("VkCopyMemoryToImageInfo*") long pCopyMemoryToImageInfo) {
		try {
			return (int) vkCopyMemoryToImageEXT.invokeExact(device, pCopyMemoryToImageInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyImageToMemoryEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyImageToMemoryEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyImageToMemoryEXT(@NativeType("VkDevice*") long device, @NativeType("VkCopyImageToMemoryInfo*") long pCopyImageToMemoryInfo) {
		try {
			return (int) vkCopyImageToMemoryEXT.invokeExact(device, pCopyImageToMemoryInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyImageToImageEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyImageToImageEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyImageToImageEXT(@NativeType("VkDevice*") long device, @NativeType("VkCopyImageToImageInfo*") long pCopyImageToImageInfo) {
		try {
			return (int) vkCopyImageToImageEXT.invokeExact(device, pCopyImageToImageInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkTransitionImageLayoutEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkTransitionImageLayoutEXT", INT, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkTransitionImageLayoutEXT(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int transitionCount, @NativeType("VkHostImageLayoutTransitionInfo*") long pTransitions) {
		try {
			return (int) vkTransitionImageLayoutEXT.invokeExact(device, transitionCount, pTransitions);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// Taken from VK_EXT_image_compression_control. VkStructureType enums defined in that extension
	
	private static final MethodHandle vkGetImageSubresourceLayout2EXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetImageSubresourceLayout2EXT", VOID, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetImageSubresourceLayout2EXT(@NativeType("VkDevice*") long device, @NativeType("VkImage*") long image, @NativeType("VkImageSubresource2*") long pSubresource, @NativeType("VkSubresourceLayout2*") long pLayout) {
		try {
			vkGetImageSubresourceLayout2EXT.invokeExact(device, image, pSubresource, pLayout);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}