package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrSharedPresentableImage {
	
	public static final int VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000;
	public static final int VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000;
	public static final int VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001;
	public static final int VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000;
	private static final MethodHandle vkGetSwapchainStatusKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetSwapchainStatusKHR", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_SUBOPTIMAL_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetSwapchainStatusKHR(@NativeType("VkDevice*") long device, /* external sync */ @NativeType("VkSwapchainKHR*") long swapchain) {
		try {
			return (int) vkGetSwapchainStatusKHR.invokeExact(device, swapchain);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}