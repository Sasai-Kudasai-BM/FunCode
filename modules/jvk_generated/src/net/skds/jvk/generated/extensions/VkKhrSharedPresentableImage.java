package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.lib2.utils.annotations.AutoGenerated;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrSharedPresentableImage {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 0;

	public static final int VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 0;

	public static final int VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1;

	public static final int VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 0;

	private static final MethodHandle vkGetSwapchainStatusKHR = createHandle("vkGetSwapchainStatusKHR", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_SUBOPTIMAL_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT
	*/
	@NativeType("VkResult")
	public static int vkGetSwapchainStatusKHR(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") /*external sync*/ long swapchain) {
		try {
			return (int) vkGetSwapchainStatusKHR.invokeExact(device, swapchain);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}