package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrSurface {
	
	public static final int VK_ERROR_SURFACE_LOST_KHR = 0;
	public static final int VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = 1;
	public static final int VK_OBJECT_TYPE_SURFACE_KHR = 0;
	private static final MethodHandle vkDestroySurfaceKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroySurfaceKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroySurfaceKHR(@NativeType("VkInstance*") long instance, /* optional, external sync */ @NativeType("VkSurfaceKHR*") long surface, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroySurfaceKHR.invokeExact(instance, surface, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceSurfaceSupportKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSurfaceSupportKHR", INT, LONG, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceSupportKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int queueFamilyIndex, @NativeType("VkSurfaceKHR*") long surface, @NativeType("VkBool32*") long pSupported) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceSupportKHR.invokeExact(physicalDevice, queueFamilyIndex, surface, pSupported);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceSurfaceCapabilitiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceCapabilitiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkSurfaceKHR*") long surface, @NativeType("VkSurfaceCapabilitiesKHR*") long pSurfaceCapabilities) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceCapabilitiesKHR.invokeExact(physicalDevice, surface, pSurfaceCapabilities);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceSurfaceFormatsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSurfaceFormatsKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceFormatsKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("VkSurfaceKHR*") long surface, /* optional */ @NativeType("uint32_t*") long pSurfaceFormatCount, /* optional */ @NativeType("VkSurfaceFormatKHR*") long pSurfaceFormats) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceFormatsKHR.invokeExact(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceSurfacePresentModesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSurfacePresentModesKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfacePresentModesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("VkSurfaceKHR*") long surface, /* optional */ @NativeType("uint32_t*") long pPresentModeCount, /* optional */ @NativeType("VkPresentModeKHR*") long pPresentModes) {
		try {
			return (int) vkGetPhysicalDeviceSurfacePresentModesKHR.invokeExact(physicalDevice, surface, pPresentModeCount, pPresentModes);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}