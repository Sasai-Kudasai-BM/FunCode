package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkExtLineRasterization {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 2;

	public static final int VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 0;

	private static final MethodHandle vkCmdSetLineStippleEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdSetLineStippleEXT", VOID, LONG, INT, SHORT);

	@NativeType("void")
	public static void vkCmdSetLineStippleEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("uint32_t") int lineStippleFactor, @NativeType("uint16_t") short lineStipplePattern) {
		try {
			vkCmdSetLineStippleEXT.invokeExact(commandBuffer, lineStippleFactor, lineStipplePattern);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}