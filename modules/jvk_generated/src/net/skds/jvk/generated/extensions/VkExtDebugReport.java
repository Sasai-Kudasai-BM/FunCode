package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkExtDebugReport {
	
	public static final int VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000;
	public static final int VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000;
	public static final int VK_ERROR_VALIDATION_FAILED_EXT = 1000011001;
	public static final int VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000;
	private static final MethodHandle vkCreateDebugReportCallbackEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateDebugReportCallbackEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateDebugReportCallbackEXT(@NativeType("VkInstance*") long instance, @NativeType("VkDebugReportCallbackCreateInfoEXT*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkDebugReportCallbackEXT**") long pCallback) {
		try {
			return (int) vkCreateDebugReportCallbackEXT.invokeExact(instance, pCreateInfo, pAllocator, pCallback);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyDebugReportCallbackEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyDebugReportCallbackEXT", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyDebugReportCallbackEXT(@NativeType("VkInstance*") long instance, /* optional, external sync */ @NativeType("VkDebugReportCallbackEXT*") long callback, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyDebugReportCallbackEXT.invokeExact(instance, callback, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDebugReportMessageEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDebugReportMessageEXT", VOID, LONG, INT, INT, LONG, LONG, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkDebugReportMessageEXT(@NativeType("VkInstance*") long instance, @NativeType("VkDebugReportFlagsEXT") int flags, @NativeType("VkDebugReportObjectTypeEXT") int objectType, @NativeType("uint64_t") long object, @NativeType("size_t") long location, @NativeType("int32_t") int messageCode, @NativeType("char*") long pLayerPrefix, @NativeType("char*") long pMessage) {
		try {
			vkDebugReportMessageEXT.invokeExact(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// This duplicates definitions in other extensions, below
	
	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000;
	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000;
}