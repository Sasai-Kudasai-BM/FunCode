package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrDisplay {
	
	public static final int VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 0;
	public static final int VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1;
	public static final int VK_OBJECT_TYPE_DISPLAY_KHR = 0;
	public static final int VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1;
	private static final MethodHandle vkGetPhysicalDeviceDisplayPropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceDisplayPropertiesKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceDisplayPropertiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("uint32_t*") long pPropertyCount, /* optional */ @NativeType("VkDisplayPropertiesKHR*") long pProperties) {
		try {
			return (int) vkGetPhysicalDeviceDisplayPropertiesKHR.invokeExact(physicalDevice, pPropertyCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceDisplayPlanePropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceDisplayPlanePropertiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("uint32_t*") long pPropertyCount, /* optional */ @NativeType("VkDisplayPlanePropertiesKHR*") long pProperties) {
		try {
			return (int) vkGetPhysicalDeviceDisplayPlanePropertiesKHR.invokeExact(physicalDevice, pPropertyCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDisplayPlaneSupportedDisplaysKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDisplayPlaneSupportedDisplaysKHR", INT, LONG, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDisplayPlaneSupportedDisplaysKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int planeIndex, /* optional */ @NativeType("uint32_t*") long pDisplayCount, /* optional */ @NativeType("VkDisplayKHR**") long pDisplays) {
		try {
			return (int) vkGetDisplayPlaneSupportedDisplaysKHR.invokeExact(physicalDevice, planeIndex, pDisplayCount, pDisplays);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDisplayModePropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDisplayModePropertiesKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDisplayModePropertiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkDisplayKHR*") long display, /* optional */ @NativeType("uint32_t*") long pPropertyCount, /* optional */ @NativeType("VkDisplayModePropertiesKHR*") long pProperties) {
		try {
			return (int) vkGetDisplayModePropertiesKHR.invokeExact(physicalDevice, display, pPropertyCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateDisplayModeKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateDisplayModeKHR", INT, LONG, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateDisplayModeKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* external sync */ @NativeType("VkDisplayKHR*") long display, @NativeType("VkDisplayModeCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkDisplayModeKHR**") long pMode) {
		try {
			return (int) vkCreateDisplayModeKHR.invokeExact(physicalDevice, display, pCreateInfo, pAllocator, pMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDisplayPlaneCapabilitiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDisplayPlaneCapabilitiesKHR", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDisplayPlaneCapabilitiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* external sync */ @NativeType("VkDisplayModeKHR*") long mode, @NativeType("uint32_t") int planeIndex, @NativeType("VkDisplayPlaneCapabilitiesKHR*") long pCapabilities) {
		try {
			return (int) vkGetDisplayPlaneCapabilitiesKHR.invokeExact(physicalDevice, mode, planeIndex, pCapabilities);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateDisplayPlaneSurfaceKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateDisplayPlaneSurfaceKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateDisplayPlaneSurfaceKHR(@NativeType("VkInstance*") long instance, @NativeType("VkDisplaySurfaceCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkSurfaceKHR**") long pSurface) {
		try {
			return (int) vkCreateDisplayPlaneSurfaceKHR.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}