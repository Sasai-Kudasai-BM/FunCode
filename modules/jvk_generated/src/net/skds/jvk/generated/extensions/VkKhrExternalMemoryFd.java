package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrExternalMemoryFd {
	
	public static final int VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000;
	public static final int VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001;
	public static final int VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002;
	private static final MethodHandle vkGetMemoryFdKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetMemoryFdKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetMemoryFdKHR(@NativeType("VkDevice*") long device, @NativeType("VkMemoryGetFdInfoKHR*") long pGetFdInfo, @NativeType("int*") long pFd) {
		try {
			return (int) vkGetMemoryFdKHR.invokeExact(device, pGetFdInfo, pFd);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetMemoryFdPropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetMemoryFdPropertiesKHR", INT, LONG, INT, SHORT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetMemoryFdPropertiesKHR(@NativeType("VkDevice*") long device, @NativeType("VkExternalMemoryHandleTypeFlagBits") int handleType, @NativeType("int") short fd, @NativeType("VkMemoryFdPropertiesKHR*") long pMemoryFdProperties) {
		try {
			return (int) vkGetMemoryFdPropertiesKHR.invokeExact(device, handleType, fd, pMemoryFdProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}