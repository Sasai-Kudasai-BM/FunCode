package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvExternalComputeQueue {
	
	public static final int VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DEVICE_CREATE_INFO_NV = 1000556000;
	public static final int VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_CREATE_INFO_NV = 1000556001;
	public static final int VK_STRUCTURE_TYPE_EXTERNAL_COMPUTE_QUEUE_DATA_PARAMS_NV = 1000556002;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_COMPUTE_QUEUE_PROPERTIES_NV = 1000556003;
	public static final int VK_OBJECT_TYPE_EXTERNAL_COMPUTE_QUEUE_NV = 1000556000;
	private static final MethodHandle vkCreateExternalComputeQueueNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateExternalComputeQueueNV", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_TOO_MANY_OBJECTS
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateExternalComputeQueueNV(@NativeType("VkDevice*") long device, @NativeType("VkExternalComputeQueueCreateInfoNV*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkExternalComputeQueueNV**") long pExternalQueue) {
		try {
			return (int) vkCreateExternalComputeQueueNV.invokeExact(device, pCreateInfo, pAllocator, pExternalQueue);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyExternalComputeQueueNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyExternalComputeQueueNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyExternalComputeQueueNV(@NativeType("VkDevice*") long device, @NativeType("VkExternalComputeQueueNV*") long externalQueue, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyExternalComputeQueueNV.invokeExact(device, externalQueue, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetExternalComputeQueueDataNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetExternalComputeQueueDataNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetExternalComputeQueueDataNV(@NativeType("VkExternalComputeQueueNV*") long externalQueue, @NativeType("VkExternalComputeQueueDataParamsNV*") long params, @NativeType("void*") long pData) {
		try {
			vkGetExternalComputeQueueDataNV.invokeExact(externalQueue, params, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}