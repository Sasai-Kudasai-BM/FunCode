package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.lib2.utils.annotations.AutoGenerated;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrCreateRenderpass2 {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 2;

	public static final int VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 3;

	public static final int VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 4;

	public static final int VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 5;

	public static final int VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 6;

	private static final MethodHandle vkCreateRenderPass2KHR = createHandle("vkCreateRenderPass2KHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateRenderPass2KHR(@NativeType("VkDevice*") long device, @NativeType("VkRenderPassCreateInfo2*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkRenderPass**") long pRenderPass) {
		try {
			return (int) vkCreateRenderPass2KHR.invokeExact(device, pCreateInfo, pAllocator, pRenderPass);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdBeginRenderPass2KHR = createHandle("vkCmdBeginRenderPass2KHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkCmdBeginRenderPass2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkRenderPassBeginInfo*") long pRenderPassBegin, @NativeType("VkSubpassBeginInfo*") long pSubpassBeginInfo) {
		try {
			vkCmdBeginRenderPass2KHR.invokeExact(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdNextSubpass2KHR = createHandle("vkCmdNextSubpass2KHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkCmdNextSubpass2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkSubpassBeginInfo*") long pSubpassBeginInfo, @NativeType("VkSubpassEndInfo*") long pSubpassEndInfo) {
		try {
			vkCmdNextSubpass2KHR.invokeExact(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdEndRenderPass2KHR = createHandle("vkCmdEndRenderPass2KHR", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdEndRenderPass2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkSubpassEndInfo*") long pSubpassEndInfo) {
		try {
			vkCmdEndRenderPass2KHR.invokeExact(commandBuffer, pSubpassEndInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}