package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvCopyMemoryIndirect {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001;
	private static final MethodHandle vkCmdCopyMemoryIndirectNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyMemoryIndirectNV", VOID, LONG, LONG, INT, INT);
	
	@NativeType("void")
	public static void vkCmdCopyMemoryIndirectNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDeviceAddress") long copyBufferAddress, @NativeType("uint32_t") int copyCount, @NativeType("uint32_t") int stride) {
		try {
			vkCmdCopyMemoryIndirectNV.invokeExact(commandBuffer, copyBufferAddress, copyCount, stride);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyMemoryToImageIndirectNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyMemoryToImageIndirectNV", VOID, LONG, LONG, INT, INT, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyMemoryToImageIndirectNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDeviceAddress") long copyBufferAddress, @NativeType("uint32_t") int copyCount, @NativeType("uint32_t") int stride, @NativeType("VkImage*") long dstImage, @NativeType("VkImageLayout") int dstImageLayout, @NativeType("VkImageSubresourceLayers*") long pImageSubresources) {
		try {
			vkCmdCopyMemoryToImageIndirectNV.invokeExact(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}