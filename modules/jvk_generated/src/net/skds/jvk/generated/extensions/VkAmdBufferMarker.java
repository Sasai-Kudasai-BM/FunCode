package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkAmdBufferMarker {
	
	private static final MethodHandle vkCmdWriteBufferMarkerAMD = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWriteBufferMarkerAMD", VOID, LONG, INT, LONG, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdWriteBufferMarkerAMD(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("VkPipelineStageFlagBits") int pipelineStage, @NativeType("VkBuffer*") long dstBuffer, @NativeType("VkDeviceSize") long dstOffset, @NativeType("uint32_t") int marker) {
		try {
			vkCmdWriteBufferMarkerAMD.invokeExact(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWriteBufferMarker2AMD = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWriteBufferMarker2AMD", VOID, LONG, LONG, LONG, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdWriteBufferMarker2AMD(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("VkPipelineStageFlags2") long stage, @NativeType("VkBuffer*") long dstBuffer, @NativeType("VkDeviceSize") long dstOffset, @NativeType("uint32_t") int marker) {
		try {
			vkCmdWriteBufferMarker2AMD.invokeExact(commandBuffer, stage, dstBuffer, dstOffset, marker);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}