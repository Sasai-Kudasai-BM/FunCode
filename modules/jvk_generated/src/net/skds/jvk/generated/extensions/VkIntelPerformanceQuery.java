package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkIntelPerformanceQuery {
	
	public static final int VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000;
	public static final int VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000;
	public static final int VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001;
	public static final int VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002;
	public static final int VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003;
	public static final int VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004;
	public static final int VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005;
	public static final int VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000;
	public static final int VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000;
	private static final MethodHandle vkInitializePerformanceApiINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkInitializePerformanceApiINTEL", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkInitializePerformanceApiINTEL(@NativeType("VkDevice*") long device, @NativeType("VkInitializePerformanceApiInfoINTEL*") long pInitializeInfo) {
		try {
			return (int) vkInitializePerformanceApiINTEL.invokeExact(device, pInitializeInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkUninitializePerformanceApiINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkUninitializePerformanceApiINTEL", VOID, LONG);
	
	@NativeType("void")
	public static void vkUninitializePerformanceApiINTEL(@NativeType("VkDevice*") long device) {
		try {
			vkUninitializePerformanceApiINTEL.invokeExact(device);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPerformanceMarkerINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPerformanceMarkerINTEL", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCmdSetPerformanceMarkerINTEL(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPerformanceMarkerInfoINTEL*") long pMarkerInfo) {
		try {
			return (int) vkCmdSetPerformanceMarkerINTEL.invokeExact(commandBuffer, pMarkerInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPerformanceStreamMarkerINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPerformanceStreamMarkerINTEL", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCmdSetPerformanceStreamMarkerINTEL(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPerformanceStreamMarkerInfoINTEL*") long pMarkerInfo) {
		try {
			return (int) vkCmdSetPerformanceStreamMarkerINTEL.invokeExact(commandBuffer, pMarkerInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPerformanceOverrideINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPerformanceOverrideINTEL", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCmdSetPerformanceOverrideINTEL(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPerformanceOverrideInfoINTEL*") long pOverrideInfo) {
		try {
			return (int) vkCmdSetPerformanceOverrideINTEL.invokeExact(commandBuffer, pOverrideInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkAcquirePerformanceConfigurationINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkAcquirePerformanceConfigurationINTEL", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkAcquirePerformanceConfigurationINTEL(@NativeType("VkDevice*") long device, @NativeType("VkPerformanceConfigurationAcquireInfoINTEL*") long pAcquireInfo, @NativeType("VkPerformanceConfigurationINTEL**") long pConfiguration) {
		try {
			return (int) vkAcquirePerformanceConfigurationINTEL.invokeExact(device, pAcquireInfo, pConfiguration);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkReleasePerformanceConfigurationINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkReleasePerformanceConfigurationINTEL", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkReleasePerformanceConfigurationINTEL(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkPerformanceConfigurationINTEL*") long configuration) {
		try {
			return (int) vkReleasePerformanceConfigurationINTEL.invokeExact(device, configuration);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkQueueSetPerformanceConfigurationINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkQueueSetPerformanceConfigurationINTEL", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkQueueSetPerformanceConfigurationINTEL(/* external sync */ @NativeType("VkQueue*") long queue, @NativeType("VkPerformanceConfigurationINTEL*") long configuration) {
		try {
			return (int) vkQueueSetPerformanceConfigurationINTEL.invokeExact(queue, configuration);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPerformanceParameterINTEL = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPerformanceParameterINTEL", INT, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPerformanceParameterINTEL(@NativeType("VkDevice*") long device, @NativeType("VkPerformanceParameterTypeINTEL") int parameter, @NativeType("VkPerformanceValueINTEL*") long pValue) {
		try {
			return (int) vkGetPerformanceParameterINTEL.invokeExact(device, parameter, pValue);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}