package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrPresentWait {
	
	private static final MethodHandle vkWaitForPresentKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkWaitForPresentKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_TIMEOUT,VK_SUBOPTIMAL_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkWaitForPresentKHR(@NativeType("VkDevice*") long device, /* external sync */ @NativeType("VkSwapchainKHR*") long swapchain, @NativeType("uint64_t") long presentId, @NativeType("uint64_t") long timeout) {
		try {
			return (int) vkWaitForPresentKHR.invokeExact(device, swapchain, presentId, timeout);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000;
}