package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkExtCalibratedTimestamps {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 0;

	private static final MethodHandle vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t*") /*optional*/ long pTimeDomainCount, @NativeType("VkTimeDomainEXT*") /*optional*/ long pTimeDomains) {
		try {
			return (int) vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.invokeExact(physicalDevice, pTimeDomainCount, pTimeDomains);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetCalibratedTimestampsEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetCalibratedTimestampsEXT", INT, LONG, INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetCalibratedTimestampsEXT(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int timestampCount, @NativeType("VkCalibratedTimestampInfoEXT*") long pTimestampInfos, @NativeType("uint64_t*") long pTimestamps, @NativeType("uint64_t*") long pMaxDeviation) {
		try {
			return (int) vkGetCalibratedTimestampsEXT.invokeExact(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}