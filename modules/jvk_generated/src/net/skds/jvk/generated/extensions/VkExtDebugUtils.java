package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkExtDebugUtils {
	
	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000;
	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001;
	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002;
	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003;
	public static final int VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004;
	public static final int VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000;
	private static final MethodHandle vkSetDebugUtilsObjectNameEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetDebugUtilsObjectNameEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSetDebugUtilsObjectNameEXT(@NativeType("VkDevice*") long device, /* external sync */ @NativeType("VkDebugUtilsObjectNameInfoEXT*") long pNameInfo) {
		try {
			return (int) vkSetDebugUtilsObjectNameEXT.invokeExact(device, pNameInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSetDebugUtilsObjectTagEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetDebugUtilsObjectTagEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSetDebugUtilsObjectTagEXT(@NativeType("VkDevice*") long device, @NativeType("VkDebugUtilsObjectTagInfoEXT*") long pTagInfo) {
		try {
			return (int) vkSetDebugUtilsObjectTagEXT.invokeExact(device, pTagInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkQueueBeginDebugUtilsLabelEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkQueueBeginDebugUtilsLabelEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkQueueBeginDebugUtilsLabelEXT(/* external sync */ @NativeType("VkQueue*") long queue, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkQueueBeginDebugUtilsLabelEXT.invokeExact(queue, pLabelInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkQueueEndDebugUtilsLabelEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkQueueEndDebugUtilsLabelEXT", VOID, LONG);
	
	@NativeType("void")
	public static void vkQueueEndDebugUtilsLabelEXT(/* external sync */ @NativeType("VkQueue*") long queue) {
		try {
			vkQueueEndDebugUtilsLabelEXT.invokeExact(queue);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkQueueInsertDebugUtilsLabelEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkQueueInsertDebugUtilsLabelEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkQueueInsertDebugUtilsLabelEXT(/* external sync */ @NativeType("VkQueue*") long queue, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkQueueInsertDebugUtilsLabelEXT.invokeExact(queue, pLabelInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBeginDebugUtilsLabelEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBeginDebugUtilsLabelEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBeginDebugUtilsLabelEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkCmdBeginDebugUtilsLabelEXT.invokeExact(commandBuffer, pLabelInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdEndDebugUtilsLabelEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdEndDebugUtilsLabelEXT", VOID, LONG);
	
	@NativeType("void")
	public static void vkCmdEndDebugUtilsLabelEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer) {
		try {
			vkCmdEndDebugUtilsLabelEXT.invokeExact(commandBuffer);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdInsertDebugUtilsLabelEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdInsertDebugUtilsLabelEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdInsertDebugUtilsLabelEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDebugUtilsLabelEXT*") long pLabelInfo) {
		try {
			vkCmdInsertDebugUtilsLabelEXT.invokeExact(commandBuffer, pLabelInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateDebugUtilsMessengerEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateDebugUtilsMessengerEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateDebugUtilsMessengerEXT(@NativeType("VkInstance*") long instance, @NativeType("VkDebugUtilsMessengerCreateInfoEXT*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkDebugUtilsMessengerEXT**") long pMessenger) {
		try {
			return (int) vkCreateDebugUtilsMessengerEXT.invokeExact(instance, pCreateInfo, pAllocator, pMessenger);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyDebugUtilsMessengerEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyDebugUtilsMessengerEXT", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyDebugUtilsMessengerEXT(@NativeType("VkInstance*") long instance, /* optional, external sync */ @NativeType("VkDebugUtilsMessengerEXT*") long messenger, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyDebugUtilsMessengerEXT.invokeExact(instance, messenger, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSubmitDebugUtilsMessageEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSubmitDebugUtilsMessageEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkSubmitDebugUtilsMessageEXT(@NativeType("VkInstance*") long instance, @NativeType("VkDebugUtilsMessageSeverityFlagBitsEXT") int messageSeverity, @NativeType("VkDebugUtilsMessageTypeFlagsEXT") int messageTypes, @NativeType("VkDebugUtilsMessengerCallbackDataEXT*") long pCallbackData) {
		try {
			vkSubmitDebugUtilsMessageEXT.invokeExact(instance, messageSeverity, messageTypes, pCallbackData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}