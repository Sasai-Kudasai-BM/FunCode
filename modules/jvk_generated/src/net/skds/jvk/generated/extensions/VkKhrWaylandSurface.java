package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkKhrWaylandSurface {
	
	public static final int VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000;
	private static final MethodHandle vkCreateWaylandSurfaceKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateWaylandSurfaceKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateWaylandSurfaceKHR(@NativeType("VkInstance*") long instance, @NativeType("VkWaylandSurfaceCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkSurfaceKHR**") long pSurface) {
		try {
			return (int) vkCreateWaylandSurfaceKHR.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceWaylandPresentationSupportKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", INT, LONG, INT, LONG);
	
	@NativeType("VkBool32")
	public static boolean vkGetPhysicalDeviceWaylandPresentationSupportKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int queueFamilyIndex, @NativeType("wl_display**") long display) {
		try {
			return (int) vkGetPhysicalDeviceWaylandPresentationSupportKHR.invokeExact(physicalDevice, queueFamilyIndex, display) != 0;
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}