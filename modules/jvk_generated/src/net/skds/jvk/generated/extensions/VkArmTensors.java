package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkArmTensors {
	
	public static final int VK_STRUCTURE_TYPE_TENSOR_CREATE_INFO_ARM = 1000460000;
	public static final int VK_STRUCTURE_TYPE_TENSOR_VIEW_CREATE_INFO_ARM = 1000460001;
	public static final int VK_STRUCTURE_TYPE_BIND_TENSOR_MEMORY_INFO_ARM = 1000460002;
	public static final int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_TENSOR_ARM = 1000460003;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_PROPERTIES_ARM = 1000460004;
	public static final int VK_STRUCTURE_TYPE_TENSOR_FORMAT_PROPERTIES_ARM = 1000460005;
	public static final int VK_STRUCTURE_TYPE_TENSOR_DESCRIPTION_ARM = 1000460006;
	public static final int VK_STRUCTURE_TYPE_TENSOR_MEMORY_REQUIREMENTS_INFO_ARM = 1000460007;
	public static final int VK_STRUCTURE_TYPE_TENSOR_MEMORY_BARRIER_ARM = 1000460008;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_FEATURES_ARM = 1000460009;
	public static final int VK_STRUCTURE_TYPE_DEVICE_TENSOR_MEMORY_REQUIREMENTS_ARM = 1000460010;
	public static final int VK_STRUCTURE_TYPE_COPY_TENSOR_INFO_ARM = 1000460011;
	public static final int VK_STRUCTURE_TYPE_TENSOR_COPY_ARM = 1000460012;
	public static final int VK_STRUCTURE_TYPE_TENSOR_DEPENDENCY_INFO_ARM = 1000460013;
	public static final int VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_TENSOR_ARM = 1000460014;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_TENSOR_INFO_ARM = 1000460015;
	public static final int VK_STRUCTURE_TYPE_EXTERNAL_TENSOR_PROPERTIES_ARM = 1000460016;
	public static final int VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_TENSOR_CREATE_INFO_ARM = 1000460017;
	public static final int VK_OBJECT_TYPE_TENSOR_ARM = 1000460000;
	public static final int VK_OBJECT_TYPE_TENSOR_VIEW_ARM = 1000460001;
	public static final int VK_DESCRIPTOR_TYPE_TENSOR_ARM = 1000460000;
	public static final long VK_FORMAT_FEATURE_2_TENSOR_SHADER_BIT_ARM = 549755813888L;
	public static final long VK_FORMAT_FEATURE_2_TENSOR_IMAGE_ALIASING_BIT_ARM = 8796093022208L;
	public static final int VK_IMAGE_USAGE_TENSOR_ALIASING_BIT_ARM = 8388608;
	public static final int VK_IMAGE_LAYOUT_TENSOR_ALIASING_ARM = 1000460000;
	public static final int VK_FORMAT_R8_BOOL_ARM = 1000460000;
	private static final MethodHandle vkCreateTensorARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateTensorARM", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateTensorARM(@NativeType("VkDevice*") long device, @NativeType("VkTensorCreateInfoARM*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkTensorARM**") long pTensor) {
		try {
			return (int) vkCreateTensorARM.invokeExact(device, pCreateInfo, pAllocator, pTensor);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyTensorARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyTensorARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyTensorARM(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkTensorARM*") long tensor, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyTensorARM.invokeExact(device, tensor, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateTensorViewARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateTensorViewARM", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateTensorViewARM(@NativeType("VkDevice*") long device, @NativeType("VkTensorViewCreateInfoARM*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkTensorViewARM**") long pView) {
		try {
			return (int) vkCreateTensorViewARM.invokeExact(device, pCreateInfo, pAllocator, pView);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyTensorViewARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyTensorViewARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyTensorViewARM(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkTensorViewARM*") long tensorView, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyTensorViewARM.invokeExact(device, tensorView, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetTensorMemoryRequirementsARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetTensorMemoryRequirementsARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetTensorMemoryRequirementsARM(@NativeType("VkDevice*") long device, @NativeType("VkTensorMemoryRequirementsInfoARM*") long pInfo, @NativeType("VkMemoryRequirements2*") long pMemoryRequirements) {
		try {
			vkGetTensorMemoryRequirementsARM.invokeExact(device, pInfo, pMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBindTensorMemoryARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBindTensorMemoryARM", INT, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBindTensorMemoryARM(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int bindInfoCount, @NativeType("VkBindTensorMemoryInfoARM*") long pBindInfos) {
		try {
			return (int) vkBindTensorMemoryARM.invokeExact(device, bindInfoCount, pBindInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDeviceTensorMemoryRequirementsARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceTensorMemoryRequirementsARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDeviceTensorMemoryRequirementsARM(@NativeType("VkDevice*") long device, @NativeType("VkDeviceTensorMemoryRequirementsARM*") long pInfo, @NativeType("VkMemoryRequirements2*") long pMemoryRequirements) {
		try {
			vkGetDeviceTensorMemoryRequirementsARM.invokeExact(device, pInfo, pMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyTensorARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyTensorARM", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyTensorARM(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyTensorInfoARM*") long pCopyTensorInfo) {
		try {
			vkCmdCopyTensorARM.invokeExact(commandBuffer, pCopyTensorInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceExternalTensorPropertiesARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceExternalTensorPropertiesARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetPhysicalDeviceExternalTensorPropertiesARM(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceExternalTensorInfoARM*") long pExternalTensorInfo, @NativeType("VkExternalTensorPropertiesARM*") long pExternalTensorProperties) {
		try {
			vkGetPhysicalDeviceExternalTensorPropertiesARM.invokeExact(physicalDevice, pExternalTensorInfo, pExternalTensorProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_FEATURES_ARM = 1000460018;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_PROPERTIES_ARM = 1000460019;
	public static final int VK_STRUCTURE_TYPE_DESCRIPTOR_GET_TENSOR_INFO_ARM = 1000460020;
	public static final int VK_STRUCTURE_TYPE_TENSOR_CAPTURE_DESCRIPTOR_DATA_INFO_ARM = 1000460021;
	public static final int VK_STRUCTURE_TYPE_TENSOR_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_ARM = 1000460022;
	public static final long VK_TENSOR_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM = 4L;
	public static final long VK_TENSOR_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM = 1L;
	private static final MethodHandle vkGetTensorOpaqueCaptureDescriptorDataARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetTensorOpaqueCaptureDescriptorDataARM", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetTensorOpaqueCaptureDescriptorDataARM(@NativeType("VkDevice*") long device, @NativeType("VkTensorCaptureDescriptorDataInfoARM*") long pInfo, @NativeType("void*") long pData) {
		try {
			return (int) vkGetTensorOpaqueCaptureDescriptorDataARM.invokeExact(device, pInfo, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetTensorViewOpaqueCaptureDescriptorDataARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetTensorViewOpaqueCaptureDescriptorDataARM", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetTensorViewOpaqueCaptureDescriptorDataARM(@NativeType("VkDevice*") long device, @NativeType("VkTensorViewCaptureDescriptorDataInfoARM*") long pInfo, @NativeType("void*") long pData) {
		try {
			return (int) vkGetTensorViewOpaqueCaptureDescriptorDataARM.invokeExact(device, pInfo, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_FRAME_BOUNDARY_TENSORS_ARM = 1000460023;
}