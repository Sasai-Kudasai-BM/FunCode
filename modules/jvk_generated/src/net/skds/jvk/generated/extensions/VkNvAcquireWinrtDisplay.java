package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkNvAcquireWinrtDisplay {
	
	private static final MethodHandle vkAcquireWinrtDisplayNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkAcquireWinrtDisplayNV", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkAcquireWinrtDisplayNV(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkDisplayKHR*") long display) {
		try {
			return (int) vkAcquireWinrtDisplayNV.invokeExact(physicalDevice, display);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetWinrtDisplayNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetWinrtDisplayNV", INT, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetWinrtDisplayNV(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int deviceRelativeId, @NativeType("VkDisplayKHR**") long pDisplay) {
		try {
			return (int) vkGetWinrtDisplayNV.invokeExact(physicalDevice, deviceRelativeId, pDisplay);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}