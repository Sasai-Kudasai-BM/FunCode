package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkKhrRayTracingMaintenance1 {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 0;

	public static final int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 0;

	public static final int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1;

	public static final long VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 268435456L;

	public static final long VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 1099511627776L;

	private static final MethodHandle vkCmdTraceRaysIndirect2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdTraceRaysIndirect2KHR", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdTraceRaysIndirect2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkDeviceAddress") long indirectDeviceAddress) {
		try {
			vkCmdTraceRaysIndirect2KHR.invokeExact(commandBuffer, indirectDeviceAddress);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}