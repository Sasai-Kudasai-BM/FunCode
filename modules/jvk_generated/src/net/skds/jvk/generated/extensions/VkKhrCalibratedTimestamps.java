package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrCalibratedTimestamps {
	
	public static final int VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR = 1000184000;
	private static final MethodHandle vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("uint32_t*") long pTimeDomainCount, /* optional */ @NativeType("VkTimeDomainKHR*") long pTimeDomains) {
		try {
			return (int) vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.invokeExact(physicalDevice, pTimeDomainCount, pTimeDomains);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetCalibratedTimestampsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetCalibratedTimestampsKHR", INT, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetCalibratedTimestampsKHR(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int timestampCount, @NativeType("VkCalibratedTimestampInfoKHR*") long pTimestampInfos, @NativeType("uint64_t*") long pTimestamps, @NativeType("uint64_t*") long pMaxDeviation) {
		try {
			return (int) vkGetCalibratedTimestampsKHR.invokeExact(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}