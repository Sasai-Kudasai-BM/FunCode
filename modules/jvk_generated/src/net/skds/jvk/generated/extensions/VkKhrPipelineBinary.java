package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrPipelineBinary {
	
	public static final int VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR = 32;
	private static final MethodHandle vkCreatePipelineBinariesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreatePipelineBinariesKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE,VK_PIPELINE_BINARY_MISSING_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreatePipelineBinariesKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineBinaryCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkPipelineBinaryHandlesInfoKHR*") long pBinaries) {
		try {
			return (int) vkCreatePipelineBinariesKHR.invokeExact(device, pCreateInfo, pAllocator, pBinaries);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyPipelineBinaryKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyPipelineBinaryKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyPipelineBinaryKHR(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkPipelineBinaryKHR*") long pipelineBinary, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyPipelineBinaryKHR.invokeExact(device, pipelineBinary, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPipelineKeyKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPipelineKeyKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPipelineKeyKHR(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkPipelineCreateInfoKHR*") long pPipelineCreateInfo, @NativeType("VkPipelineBinaryKeyKHR*") long pPipelineKey) {
		try {
			return (int) vkGetPipelineKeyKHR.invokeExact(device, pPipelineCreateInfo, pPipelineKey);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPipelineBinaryDataKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPipelineBinaryDataKHR", INT, LONG, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NOT_ENOUGH_SPACE_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPipelineBinaryDataKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineBinaryDataInfoKHR*") long pInfo, @NativeType("VkPipelineBinaryKeyKHR*") long pPipelineBinaryKey, /* optional */ @NativeType("size_t*") long pPipelineBinaryDataSize, /* optional */ @NativeType("void*") long pPipelineBinaryData) {
		try {
			return (int) vkGetPipelineBinaryDataKHR.invokeExact(device, pInfo, pPipelineBinaryKey, pPipelineBinaryDataSize, pPipelineBinaryData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkReleaseCapturedPipelineDataKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkReleaseCapturedPipelineDataKHR", INT, LONG, LONG, LONG);
	
	/** successcodes = VK_SUCCESS **/
	@NativeType("VkResult")
	public static int vkReleaseCapturedPipelineDataKHR(@NativeType("VkDevice*") long device, @NativeType("VkReleaseCapturedPipelineDataInfoKHR*") long pInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			return (int) vkReleaseCapturedPipelineDataKHR.invokeExact(device, pInfo, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR = 1000483000;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR = 1000483001;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR = 1000483002;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR = 1000483003;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR = 1000483004;
	public static final int VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR = 1000483005;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR = 1000483006;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR = 1000483007;
	public static final int VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR = 1000483008;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR = 1000483009;
	public static final int VK_OBJECT_TYPE_PIPELINE_BINARY_KHR = 1000483000;
	public static final int VK_PIPELINE_BINARY_MISSING_KHR = 1000483000;
	public static final int VK_ERROR_NOT_ENOUGH_SPACE_KHR = 1000483000;
	public static final long VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR = 2147483648L;
}