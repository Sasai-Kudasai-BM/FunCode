package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkNvxBinaryImport {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 0;

	public static final int VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1;

	public static final int VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 2;

	public static final int VK_OBJECT_TYPE_CU_MODULE_NVX = 0;

	public static final int VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1;

	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 0;

	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1;

	private static final MethodHandle vkCreateCuModuleNVX = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCreateCuModuleNVX", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*/
	@NativeType("VkResult")
	public static int vkCreateCuModuleNVX(@NativeType("VkDevice*") long device, @NativeType("VkCuModuleCreateInfoNVX*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkCuModuleNVX**") long pModule) {
		try {
			return (int) vkCreateCuModuleNVX.invokeExact(device, pCreateInfo, pAllocator, pModule);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCreateCuFunctionNVX = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCreateCuFunctionNVX", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*/
	@NativeType("VkResult")
	public static int vkCreateCuFunctionNVX(@NativeType("VkDevice*") long device, @NativeType("VkCuFunctionCreateInfoNVX*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkCuFunctionNVX**") long pFunction) {
		try {
			return (int) vkCreateCuFunctionNVX.invokeExact(device, pCreateInfo, pAllocator, pFunction);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyCuModuleNVX = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkDestroyCuModuleNVX", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyCuModuleNVX(@NativeType("VkDevice*") long device, @NativeType("VkCuModuleNVX*") long module, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyCuModuleNVX.invokeExact(device, module, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyCuFunctionNVX = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkDestroyCuFunctionNVX", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyCuFunctionNVX(@NativeType("VkDevice*") long device, @NativeType("VkCuFunctionNVX*") long function, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyCuFunctionNVX.invokeExact(device, function, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdCuLaunchKernelNVX = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdCuLaunchKernelNVX", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdCuLaunchKernelNVX(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCuLaunchInfoNVX*") long pLaunchInfo) {
		try {
			vkCmdCuLaunchKernelNVX.invokeExact(commandBuffer, pLaunchInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}