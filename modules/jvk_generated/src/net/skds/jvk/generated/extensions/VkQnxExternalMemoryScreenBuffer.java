package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkQnxExternalMemoryScreenBuffer {
	
	public static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384;
	public static final int VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000;
	public static final int VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001;
	public static final int VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002;
	public static final int VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004;
	private static final MethodHandle vkGetScreenBufferPropertiesQNX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetScreenBufferPropertiesQNX", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetScreenBufferPropertiesQNX(@NativeType("VkDevice*") long device, @NativeType("_screen_buffer**") long buffer, @NativeType("VkScreenBufferPropertiesQNX*") long pProperties) {
		try {
			return (int) vkGetScreenBufferPropertiesQNX.invokeExact(device, buffer, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}