package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.lib2.utils.annotations.AutoGenerated;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkKhrExternalSemaphoreCapabilities {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 4;

	public static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1;

	public static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2;

	public static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4;

	public static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8;

	public static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16;

	public static final int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1;

	public static final int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2;

	private static final MethodHandle vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = createHandle("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceExternalSemaphoreInfo*") long pExternalSemaphoreInfo, @NativeType("VkExternalSemaphoreProperties*") long pExternalSemaphoreProperties) {
		try {
			vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.invokeExact(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}