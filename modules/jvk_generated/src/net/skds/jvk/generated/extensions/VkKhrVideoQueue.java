package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrVideoQueue {
	
	public static final int VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000;
	public static final int VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001;
	public static final int VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002;
	public static final int VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003;
	public static final int VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004;
	public static final int VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005;
	public static final int VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006;
	public static final int VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007;
	public static final int VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008;
	public static final int VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009;
	public static final int VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010;
	public static final int VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011;
	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012;
	public static final int VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014;
	public static final int VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015;
	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016;
	
	// VkVideoSessionKHR
	
	/** VkVideoSessionKHR **/
	public static final int VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000;
	
	// VkVideoSessionParametersKHR
	
	/** VkVideoSessionParametersKHR **/
	public static final int VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001;
	public static final int VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000;
	public static final int VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16;
	public static final int VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = 1000023000;
	public static final int VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = 1000023001;
	public static final int VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = 1000023002;
	public static final int VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = 1000023003;
	public static final int VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = 1000023004;
	public static final int VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = 1000023005;
	private static final MethodHandle vkGetPhysicalDeviceVideoCapabilitiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceVideoCapabilitiesKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceVideoCapabilitiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkVideoProfileInfoKHR*") long pVideoProfile, @NativeType("VkVideoCapabilitiesKHR*") long pCapabilities) {
		try {
			return (int) vkGetPhysicalDeviceVideoCapabilitiesKHR.invokeExact(physicalDevice, pVideoProfile, pCapabilities);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceVideoFormatPropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceVideoFormatPropertiesKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceVideoFormatPropertiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceVideoFormatInfoKHR*") long pVideoFormatInfo, /* optional */ @NativeType("uint32_t*") long pVideoFormatPropertyCount, /* optional */ @NativeType("VkVideoFormatPropertiesKHR*") long pVideoFormatProperties) {
		try {
			return (int) vkGetPhysicalDeviceVideoFormatPropertiesKHR.invokeExact(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateVideoSessionKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateVideoSessionKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateVideoSessionKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkVideoSessionKHR**") long pVideoSession) {
		try {
			return (int) vkCreateVideoSessionKHR.invokeExact(device, pCreateInfo, pAllocator, pVideoSession);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyVideoSessionKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyVideoSessionKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyVideoSessionKHR(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkVideoSessionKHR*") long videoSession, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyVideoSessionKHR.invokeExact(device, videoSession, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetVideoSessionMemoryRequirementsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetVideoSessionMemoryRequirementsKHR", INT, LONG, LONG, LONG, LONG);
	
	/** successcodes = VK_SUCCESS,VK_INCOMPLETE **/
	@NativeType("VkResult")
	public static int vkGetVideoSessionMemoryRequirementsKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionKHR*") long videoSession, /* optional */ @NativeType("uint32_t*") long pMemoryRequirementsCount, /* optional */ @NativeType("VkVideoSessionMemoryRequirementsKHR*") long pMemoryRequirements) {
		try {
			return (int) vkGetVideoSessionMemoryRequirementsKHR.invokeExact(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBindVideoSessionMemoryKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBindVideoSessionMemoryKHR", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBindVideoSessionMemoryKHR(@NativeType("VkDevice*") long device, /* external sync */ @NativeType("VkVideoSessionKHR*") long videoSession, @NativeType("uint32_t") int bindSessionMemoryInfoCount, @NativeType("VkBindVideoSessionMemoryInfoKHR*") long pBindSessionMemoryInfos) {
		try {
			return (int) vkBindVideoSessionMemoryKHR.invokeExact(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateVideoSessionParametersKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateVideoSessionParametersKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateVideoSessionParametersKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionParametersCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkVideoSessionParametersKHR**") long pVideoSessionParameters) {
		try {
			return (int) vkCreateVideoSessionParametersKHR.invokeExact(device, pCreateInfo, pAllocator, pVideoSessionParameters);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkUpdateVideoSessionParametersKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkUpdateVideoSessionParametersKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkUpdateVideoSessionParametersKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionParametersKHR*") long videoSessionParameters, @NativeType("VkVideoSessionParametersUpdateInfoKHR*") long pUpdateInfo) {
		try {
			return (int) vkUpdateVideoSessionParametersKHR.invokeExact(device, videoSessionParameters, pUpdateInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyVideoSessionParametersKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyVideoSessionParametersKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyVideoSessionParametersKHR(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkVideoSessionParametersKHR*") long videoSessionParameters, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyVideoSessionParametersKHR.invokeExact(device, videoSessionParameters, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBeginVideoCodingKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBeginVideoCodingKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBeginVideoCodingKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkVideoBeginCodingInfoKHR*") long pBeginInfo) {
		try {
			vkCmdBeginVideoCodingKHR.invokeExact(commandBuffer, pBeginInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdEndVideoCodingKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdEndVideoCodingKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdEndVideoCodingKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkVideoEndCodingInfoKHR*") long pEndCodingInfo) {
		try {
			vkCmdEndVideoCodingKHR.invokeExact(commandBuffer, pEndCodingInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdControlVideoCodingKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdControlVideoCodingKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdControlVideoCodingKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkVideoCodingControlInfoKHR*") long pCodingControlInfo) {
		try {
			vkCmdControlVideoCodingKHR.invokeExact(commandBuffer, pCodingControlInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}