package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrVideoQueue {
	
	public static final int VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR = 0;
	public static final int VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1;
	public static final int VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR = 2;
	public static final int VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR = 3;
	public static final int VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR = 4;
	public static final int VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 5;
	public static final int VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 6;
	public static final int VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 7;
	public static final int VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 8;
	public static final int VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 9;
	public static final int VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 10;
	public static final int VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR = 11;
	public static final int VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR = 12;
	public static final int VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR = 13;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 14;
	public static final int VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 15;
	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_2_KHR = 16;
	
	// VkVideoSessionKHR
	
	/** VkVideoSessionKHR **/
	public static final int VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 0;
	
	// VkVideoSessionParametersKHR
	
	/** VkVideoSessionParametersKHR **/
	public static final int VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1;
	public static final int VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 0;
	public static final int VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16;
	private static final MethodHandle vkGetPhysicalDeviceVideoCapabilitiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceVideoCapabilitiesKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_FORMAT_NOT_SUPPORTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceVideoCapabilitiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkVideoProfileKHR*") long pVideoProfile, @NativeType("VkVideoCapabilitiesKHR*") long pCapabilities) {
		try {
			return (int) vkGetPhysicalDeviceVideoCapabilitiesKHR.invokeExact(physicalDevice, pVideoProfile, pCapabilities);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceVideoFormatPropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceVideoFormatPropertiesKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_FORMAT_NOT_SUPPORTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceVideoFormatPropertiesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceVideoFormatInfoKHR*") long pVideoFormatInfo, /* optional */ @NativeType("uint32_t*") long pVideoFormatPropertyCount, /* optional */ @NativeType("VkVideoFormatPropertiesKHR*") long pVideoFormatProperties) {
		try {
			return (int) vkGetPhysicalDeviceVideoFormatPropertiesKHR.invokeExact(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateVideoSessionKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateVideoSessionKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_INCOMPATIBLE_DRIVER,VK_ERROR_FEATURE_NOT_PRESENT
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateVideoSessionKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkVideoSessionKHR**") long pVideoSession) {
		try {
			return (int) vkCreateVideoSessionKHR.invokeExact(device, pCreateInfo, pAllocator, pVideoSession);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyVideoSessionKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyVideoSessionKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyVideoSessionKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionKHR*") long videoSession, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyVideoSessionKHR.invokeExact(device, videoSession, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetVideoSessionMemoryRequirementsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetVideoSessionMemoryRequirementsKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetVideoSessionMemoryRequirementsKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionKHR*") long videoSession, /* optional */ @NativeType("uint32_t*") long pVideoSessionMemoryRequirementsCount, /* optional */ @NativeType("VkVideoGetMemoryPropertiesKHR*") long pVideoSessionMemoryRequirements) {
		try {
			return (int) vkGetVideoSessionMemoryRequirementsKHR.invokeExact(device, videoSession, pVideoSessionMemoryRequirementsCount, pVideoSessionMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBindVideoSessionMemoryKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBindVideoSessionMemoryKHR", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBindVideoSessionMemoryKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionKHR*") long videoSession, @NativeType("uint32_t") int videoSessionBindMemoryCount, @NativeType("VkVideoBindMemoryKHR*") long pVideoSessionBindMemories) {
		try {
			return (int) vkBindVideoSessionMemoryKHR.invokeExact(device, videoSession, videoSessionBindMemoryCount, pVideoSessionBindMemories);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateVideoSessionParametersKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateVideoSessionParametersKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateVideoSessionParametersKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionParametersCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkVideoSessionParametersKHR**") long pVideoSessionParameters) {
		try {
			return (int) vkCreateVideoSessionParametersKHR.invokeExact(device, pCreateInfo, pAllocator, pVideoSessionParameters);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkUpdateVideoSessionParametersKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkUpdateVideoSessionParametersKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_TOO_MANY_OBJECTS
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkUpdateVideoSessionParametersKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionParametersKHR*") long videoSessionParameters, @NativeType("VkVideoSessionParametersUpdateInfoKHR*") long pUpdateInfo) {
		try {
			return (int) vkUpdateVideoSessionParametersKHR.invokeExact(device, videoSessionParameters, pUpdateInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyVideoSessionParametersKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyVideoSessionParametersKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyVideoSessionParametersKHR(@NativeType("VkDevice*") long device, @NativeType("VkVideoSessionParametersKHR*") long videoSessionParameters, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyVideoSessionParametersKHR.invokeExact(device, videoSessionParameters, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBeginVideoCodingKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBeginVideoCodingKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBeginVideoCodingKHR(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkVideoBeginCodingInfoKHR*") long pBeginInfo) {
		try {
			vkCmdBeginVideoCodingKHR.invokeExact(commandBuffer, pBeginInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdEndVideoCodingKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdEndVideoCodingKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdEndVideoCodingKHR(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkVideoEndCodingInfoKHR*") long pEndCodingInfo) {
		try {
			vkCmdEndVideoCodingKHR.invokeExact(commandBuffer, pEndCodingInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdControlVideoCodingKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdControlVideoCodingKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdControlVideoCodingKHR(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkVideoCodingControlInfoKHR*") long pCodingControlInfo) {
		try {
			vkCmdControlVideoCodingKHR.invokeExact(commandBuffer, pCodingControlInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}