package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkExtToolingInfo {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000;
	public static final int VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1;
	public static final int VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2;
	public static final int VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4;
	public static final int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8;
	public static final int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16;
	private static final MethodHandle vkGetPhysicalDeviceToolPropertiesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceToolPropertiesEXT", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceToolPropertiesEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("uint32_t*") long pToolCount, /* optional */ @NativeType("VkPhysicalDeviceToolProperties*") long pToolProperties) {
		try {
			return (int) vkGetPhysicalDeviceToolPropertiesEXT.invokeExact(physicalDevice, pToolCount, pToolProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32;
	public static final int VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64;
}