package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkNvOpticalFlow {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001;
	public static final int VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002;
	public static final int VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003;
	public static final int VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004;
	public static final int VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005;
	public static final int VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010;
	
	// NV internal use only
	
	public static final int VK_FORMAT_R16G16_SFIXED5_NV = 1000464000;
	public static final int VK_FORMAT_R16G16_S10_5_NV = 1000464000;
	public static final int VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000;
	public static final int VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256;
	public static final long VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 536870912L;
	public static final long VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 4398046511104L;
	public static final long VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 8796093022208L;
	public static final long VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 1099511627776L;
	public static final long VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 2199023255552L;
	public static final long VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 4398046511104L;
	private static final MethodHandle vkGetPhysicalDeviceOpticalFlowImageFormatsNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_FORMAT_NOT_SUPPORTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceOpticalFlowImageFormatsNV(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkOpticalFlowImageFormatInfoNV*") long pOpticalFlowImageFormatInfo, /* optional */ @NativeType("uint32_t*") long pFormatCount, /* optional */ @NativeType("VkOpticalFlowImageFormatPropertiesNV*") long pImageFormatProperties) {
		try {
			return (int) vkGetPhysicalDeviceOpticalFlowImageFormatsNV.invokeExact(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateOpticalFlowSessionNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateOpticalFlowSessionNV", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateOpticalFlowSessionNV(@NativeType("VkDevice*") long device, @NativeType("VkOpticalFlowSessionCreateInfoNV*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkOpticalFlowSessionNV**") long pSession) {
		try {
			return (int) vkCreateOpticalFlowSessionNV.invokeExact(device, pCreateInfo, pAllocator, pSession);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyOpticalFlowSessionNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyOpticalFlowSessionNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyOpticalFlowSessionNV(@NativeType("VkDevice*") long device, @NativeType("VkOpticalFlowSessionNV*") long session, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyOpticalFlowSessionNV.invokeExact(device, session, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBindOpticalFlowSessionImageNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBindOpticalFlowSessionImageNV", INT, LONG, LONG, INT, LONG, INT);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBindOpticalFlowSessionImageNV(@NativeType("VkDevice*") long device, @NativeType("VkOpticalFlowSessionNV*") long session, @NativeType("VkOpticalFlowSessionBindingPointNV") int bindingPoint, /* optional */ @NativeType("VkImageView*") long view, @NativeType("VkImageLayout") int layout) {
		try {
			return (int) vkBindOpticalFlowSessionImageNV.invokeExact(device, session, bindingPoint, view, layout);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdOpticalFlowExecuteNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdOpticalFlowExecuteNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdOpticalFlowExecuteNV(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkOpticalFlowSessionNV*") long session, @NativeType("VkOpticalFlowExecuteInfoNV*") long pExecuteInfo) {
		try {
			vkCmdOpticalFlowExecuteNV.invokeExact(commandBuffer, session, pExecuteInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}