package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkNvExternalSciSync {
	
	public static final int VK_STRUCTURE_TYPE_IMPORT_FENCE_SCI_SYNC_INFO_NV = 1000373000;
	public static final int VK_STRUCTURE_TYPE_EXPORT_FENCE_SCI_SYNC_INFO_NV = 1000373001;
	public static final int VK_STRUCTURE_TYPE_FENCE_GET_SCI_SYNC_INFO_NV = 1000373002;
	public static final int VK_STRUCTURE_TYPE_SCI_SYNC_ATTRIBUTES_INFO_NV = 1000373003;
	public static final int VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV = 1000373004;
	public static final int VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV = 1000373005;
	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_GET_SCI_SYNC_INFO_NV = 1000373006;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV = 1000373007;
	public static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_SCI_SYNC_OBJ_BIT_NV = 16;
	public static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_SCI_SYNC_FENCE_BIT_NV = 32;
	public static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SCI_SYNC_OBJ_BIT_NV = 32;
	private static final MethodHandle vkGetFenceSciSyncFenceNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetFenceSciSyncFenceNV", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetFenceSciSyncFenceNV(@NativeType("VkDevice*") long device, @NativeType("VkFenceGetSciSyncInfoNV*") long pGetSciSyncHandleInfo, @NativeType("void*") long pHandle) {
		try {
			return (int) vkGetFenceSciSyncFenceNV.invokeExact(device, pGetSciSyncHandleInfo, pHandle);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetFenceSciSyncObjNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetFenceSciSyncObjNV", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetFenceSciSyncObjNV(@NativeType("VkDevice*") long device, @NativeType("VkFenceGetSciSyncInfoNV*") long pGetSciSyncHandleInfo, @NativeType("void*") long pHandle) {
		try {
			return (int) vkGetFenceSciSyncObjNV.invokeExact(device, pGetSciSyncHandleInfo, pHandle);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkImportFenceSciSyncFenceNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkImportFenceSciSyncFenceNV", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkImportFenceSciSyncFenceNV(@NativeType("VkDevice*") long device, @NativeType("VkImportFenceSciSyncInfoNV*") long pImportFenceSciSyncInfo) {
		try {
			return (int) vkImportFenceSciSyncFenceNV.invokeExact(device, pImportFenceSciSyncInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkImportFenceSciSyncObjNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkImportFenceSciSyncObjNV", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkImportFenceSciSyncObjNV(@NativeType("VkDevice*") long device, @NativeType("VkImportFenceSciSyncInfoNV*") long pImportFenceSciSyncInfo) {
		try {
			return (int) vkImportFenceSciSyncObjNV.invokeExact(device, pImportFenceSciSyncInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceSciSyncAttributesNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSciSyncAttributesNV", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSciSyncAttributesNV(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkSciSyncAttributesInfoNV*") long pSciSyncAttributesInfo, @NativeType("NvSciSyncAttrList*") long pAttributes) {
		try {
			return (int) vkGetPhysicalDeviceSciSyncAttributesNV.invokeExact(physicalDevice, pSciSyncAttributesInfo, pAttributes);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetSemaphoreSciSyncObjNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetSemaphoreSciSyncObjNV", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetSemaphoreSciSyncObjNV(@NativeType("VkDevice*") long device, @NativeType("VkSemaphoreGetSciSyncInfoNV*") long pGetSciSyncInfo, @NativeType("void*") long pHandle) {
		try {
			return (int) vkGetSemaphoreSciSyncObjNV.invokeExact(device, pGetSciSyncInfo, pHandle);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkImportSemaphoreSciSyncObjNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkImportSemaphoreSciSyncObjNV", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_NOT_PERMITTED,VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkImportSemaphoreSciSyncObjNV(@NativeType("VkDevice*") long device, @NativeType("VkImportSemaphoreSciSyncInfoNV*") long pImportSemaphoreSciSyncInfo) {
		try {
			return (int) vkImportSemaphoreSciSyncObjNV.invokeExact(device, pImportSemaphoreSciSyncInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}