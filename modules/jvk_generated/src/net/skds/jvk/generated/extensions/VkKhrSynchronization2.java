package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkKhrSynchronization2 {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 2;

	public static final int VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 3;

	public static final int VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 4;

	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 5;

	public static final int VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 6;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 7;

	public static final int VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1;

	public static final int VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 0;

	public static final int VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1;

	public static final int VK_PIPELINE_STAGE_NONE_KHR = 0;

	public static final int VK_ACCESS_NONE_KHR = 0;

	private static final MethodHandle vkCmdSetEvent2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdSetEvent2KHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkCmdSetEvent2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkEvent*") long event, @NativeType("VkDependencyInfo*") long pDependencyInfo) {
		try {
			vkCmdSetEvent2KHR.invokeExact(commandBuffer, event, pDependencyInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdResetEvent2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdResetEvent2KHR", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkCmdResetEvent2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkEvent*") long event, @NativeType("VkPipelineStageFlags2") /*optional*/ long stageMask) {
		try {
			vkCmdResetEvent2KHR.invokeExact(commandBuffer, event, stageMask);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdWaitEvents2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdWaitEvents2KHR", VOID, LONG, INT, LONG, LONG);

	@NativeType("void")
	public static void vkCmdWaitEvents2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("uint32_t") int eventCount, @NativeType("VkEvent**") long pEvents, @NativeType("VkDependencyInfo*") long pDependencyInfos) {
		try {
			vkCmdWaitEvents2KHR.invokeExact(commandBuffer, eventCount, pEvents, pDependencyInfos);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdPipelineBarrier2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdPipelineBarrier2KHR", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdPipelineBarrier2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkDependencyInfo*") long pDependencyInfo) {
		try {
			vkCmdPipelineBarrier2KHR.invokeExact(commandBuffer, pDependencyInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdWriteTimestamp2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdWriteTimestamp2KHR", VOID, LONG, LONG, LONG, INT);

	@NativeType("void")
	public static void vkCmdWriteTimestamp2KHR(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkPipelineStageFlags2") /*optional*/ long stage, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int query) {
		try {
			vkCmdWriteTimestamp2KHR.invokeExact(commandBuffer, stage, queryPool, query);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkQueueSubmit2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkQueueSubmit2KHR", INT, LONG, INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST
	*/
	@NativeType("VkResult")
	public static int vkQueueSubmit2KHR(@NativeType("VkQueue*") /*external sync*/ long queue, @NativeType("uint32_t") /*optional*/ int submitCount, @NativeType("VkSubmitInfo2*") long pSubmits, @NativeType("VkFence*") /*optional, external sync*/ long fence) {
		try {
			return (int) vkQueueSubmit2KHR.invokeExact(queue, submitCount, pSubmits, fence);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	public static final long VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216L;

	public static final long VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432L;

	public static final long VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864L;

	public static final long VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728L;

	// A pipeline stage for conditional rendering predicate fetch

	/**
	* A pipeline stage for conditional rendering predicate fetch
	*/
	public static final long VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144L;

	// read access flag for reading conditional rendering predicate

	/**
	* read access flag for reading conditional rendering predicate
	*/
	public static final long VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576L;

	public static final long VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072L;

	public static final long VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072L;

	public static final long VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144L;

	public static final long VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304L;

	public static final long VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608L;

	public static final long VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 4194304L;

	public static final long VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608L;

	public static final long VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432L;

	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152L;

	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304L;

	public static final long VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152L;

	public static final long VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 2097152L;

	public static final long VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432L;

	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152L;

	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304L;

	public static final long VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608L;

	public static final long VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216L;

	public static final long VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288L;

	public static final long VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288L;

	public static final long VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576L;

	private static final MethodHandle vkCmdWriteBufferMarker2AMD = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdWriteBufferMarker2AMD", VOID, LONG, LONG, LONG, LONG, INT);

	@NativeType("void")
	public static void vkCmdWriteBufferMarker2AMD(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkPipelineStageFlags2") /*optional*/ long stage, @NativeType("VkBuffer*") long dstBuffer, @NativeType("VkDeviceSize") long dstOffset, @NativeType("uint32_t") int marker) {
		try {
			vkCmdWriteBufferMarker2AMD.invokeExact(commandBuffer, stage, dstBuffer, dstOffset, marker);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetQueueCheckpointData2NV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetQueueCheckpointData2NV", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetQueueCheckpointData2NV(@NativeType("VkQueue*") long queue, @NativeType("uint32_t*") /*optional*/ long pCheckpointDataCount, @NativeType("VkCheckpointData2NV*") /*optional*/ long pCheckpointData) {
		try {
			vkGetQueueCheckpointData2NV.invokeExact(queue, pCheckpointDataCount, pCheckpointData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 8;

	public static final int VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 9;
}