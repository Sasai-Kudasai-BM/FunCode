package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkKhrSynchronization2 {
	
	public static final int VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000;
	public static final int VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001;
	public static final int VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002;
	public static final int VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003;
	public static final int VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004;
	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005;
	public static final int VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007;
	public static final int VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1;
	public static final int VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000;
	public static final int VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001;
	public static final int VK_PIPELINE_STAGE_NONE_KHR = 0;
	public static final int VK_ACCESS_NONE_KHR = 0;
	public static final long VK_ACCESS_2_NONE_KHR = 0L;
	public static final long VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 1L;
	public static final long VK_ACCESS_2_INDEX_READ_BIT_KHR = 2L;
	public static final long VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 4L;
	public static final long VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 8L;
	public static final long VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 16L;
	public static final long VK_ACCESS_2_SHADER_READ_BIT_KHR = 32L;
	public static final long VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 64L;
	public static final long VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 128L;
	public static final long VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 256L;
	public static final long VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 512L;
	public static final long VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 1024L;
	public static final long VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 2048L;
	public static final long VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 4096L;
	public static final long VK_ACCESS_2_HOST_READ_BIT_KHR = 8192L;
	public static final long VK_ACCESS_2_HOST_WRITE_BIT_KHR = 16384L;
	public static final long VK_ACCESS_2_MEMORY_READ_BIT_KHR = 32768L;
	public static final long VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 65536L;
	public static final long VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 4294967296L;
	public static final long VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 8589934592L;
	public static final long VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 17179869184L;
	public static final long VK_PIPELINE_STAGE_2_NONE_KHR = 0L;
	public static final long VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 1L;
	public static final long VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 2L;
	public static final long VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 4L;
	public static final long VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 8L;
	public static final long VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 16L;
	public static final long VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 32L;
	public static final long VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 64L;
	public static final long VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 128L;
	public static final long VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 256L;
	public static final long VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 512L;
	public static final long VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 1024L;
	public static final long VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 2048L;
	public static final long VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 4096L;
	public static final long VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 4096L;
	public static final long VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 8192L;
	public static final long VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 16384L;
	public static final long VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 32768L;
	public static final long VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 65536L;
	public static final long VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 4294967296L;
	public static final long VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 8589934592L;
	public static final long VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 17179869184L;
	public static final long VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 34359738368L;
	public static final long VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 68719476736L;
	public static final long VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 137438953472L;
	public static final long VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 274877906944L;
	public static final int VK_SUBMIT_PROTECTED_BIT_KHR = 1;
	private static final MethodHandle vkCmdSetEvent2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetEvent2KHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdSetEvent2KHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkEvent*") long event, @NativeType("VkDependencyInfo*") long pDependencyInfo) {
		try {
			vkCmdSetEvent2KHR.invokeExact(commandBuffer, event, pDependencyInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdResetEvent2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdResetEvent2KHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdResetEvent2KHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkEvent*") long event, /* optional */ @NativeType("VkPipelineStageFlags2") long stageMask) {
		try {
			vkCmdResetEvent2KHR.invokeExact(commandBuffer, event, stageMask);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWaitEvents2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWaitEvents2KHR", VOID, LONG, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdWaitEvents2KHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int eventCount, @NativeType("VkEvent**") long pEvents, @NativeType("VkDependencyInfo*") long pDependencyInfos) {
		try {
			vkCmdWaitEvents2KHR.invokeExact(commandBuffer, eventCount, pEvents, pDependencyInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdPipelineBarrier2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdPipelineBarrier2KHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdPipelineBarrier2KHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDependencyInfo*") long pDependencyInfo) {
		try {
			vkCmdPipelineBarrier2KHR.invokeExact(commandBuffer, pDependencyInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWriteTimestamp2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWriteTimestamp2KHR", VOID, LONG, LONG, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdWriteTimestamp2KHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("VkPipelineStageFlags2") long stage, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int query) {
		try {
			vkCmdWriteTimestamp2KHR.invokeExact(commandBuffer, stage, queryPool, query);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkQueueSubmit2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkQueueSubmit2KHR", INT, LONG, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkQueueSubmit2KHR(/* external sync */ @NativeType("VkQueue*") long queue, /* optional */ @NativeType("uint32_t") int submitCount, @NativeType("VkSubmitInfo2*") long pSubmits, /* optional, external sync */ @NativeType("VkFence*") long fence) {
		try {
			return (int) vkQueueSubmit2KHR.invokeExact(queue, submitCount, pSubmits, fence);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final long VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216L;
	public static final long VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432L;
	public static final long VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864L;
	public static final long VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728L;
	
	// A pipeline stage for conditional rendering predicate fetch
	
	/** A pipeline stage for conditional rendering predicate fetch **/
	public static final long VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144L;
	
	// read access flag for reading conditional rendering predicate
	
	/** read access flag for reading conditional rendering predicate **/
	public static final long VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576L;
	public static final long VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072L;
	public static final long VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072L;
	public static final long VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144L;
	public static final long VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT = 131072L;
	public static final long VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT = 131072L;
	public static final long VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT = 262144L;
	public static final long VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304L;
	public static final long VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608L;
	public static final long VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 4194304L;
	public static final long VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608L;
	public static final long VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432L;
	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152L;
	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304L;
	public static final long VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152L;
	public static final long VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 2097152L;
	public static final long VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432L;
	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152L;
	public static final long VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304L;
	public static final long VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608L;
	public static final long VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216L;
	public static final long VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288L;
	public static final long VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288L;
	public static final long VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576L;
	public static final long VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 524288L;
	public static final long VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 1048576L;
}