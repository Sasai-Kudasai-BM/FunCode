package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkExtPipelineProperties {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = 1;

	private static final MethodHandle vkGetPipelinePropertiesEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetPipelinePropertiesEXT", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetPipelinePropertiesEXT(@NativeType("VkDevice*") long device, @NativeType("VkPipelineInfoEXT*") long pPipelineInfo, @NativeType("VkBaseOutStructure*") long pPipelineProperties) {
		try {
			return (int) vkGetPipelinePropertiesEXT.invokeExact(device, pPipelineInfo, pPipelineProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}