package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtAcquireXlibDisplay {
	
	private static final MethodHandle vkAcquireXlibDisplayEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkAcquireXlibDisplayEXT", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkAcquireXlibDisplayEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("Display**") long dpy, @NativeType("VkDisplayKHR*") long display) {
		try {
			return (int) vkAcquireXlibDisplayEXT.invokeExact(physicalDevice, dpy, display);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetRandROutputDisplayEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetRandROutputDisplayEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetRandROutputDisplayEXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("Display**") long dpy, @NativeType("RROutput*") long rrOutput, @NativeType("VkDisplayKHR**") long pDisplay) {
		try {
			return (int) vkGetRandROutputDisplayEXT.invokeExact(physicalDevice, dpy, rrOutput, pDisplay);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}