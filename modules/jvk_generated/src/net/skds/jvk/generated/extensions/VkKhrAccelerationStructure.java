package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkKhrAccelerationStructure {
	
	public static final int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009;
	public static final int VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010;
	public static final int VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011;
	public static final int VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020;
	public static final int VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432;
	public static final int VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000;
	public static final int VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152;
	public static final int VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304;
	public static final int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000;
	public static final int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001;
	public static final int VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000;
	public static final int VK_INDEX_TYPE_NONE_KHR = 1000165000;
	public static final int VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912;
	public static final int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288;
	public static final int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576;
	public static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 1000150002;
	public static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 1000150003;
	private static final MethodHandle vkCreateAccelerationStructureKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateAccelerationStructureKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateAccelerationStructureKHR(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureCreateInfoKHR*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkAccelerationStructureKHR**") long pAccelerationStructure) {
		try {
			return (int) vkCreateAccelerationStructureKHR.invokeExact(device, pCreateInfo, pAllocator, pAccelerationStructure);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyAccelerationStructureKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyAccelerationStructureKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyAccelerationStructureKHR(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkAccelerationStructureKHR*") long accelerationStructure, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyAccelerationStructureKHR.invokeExact(device, accelerationStructure, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBuildAccelerationStructuresKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBuildAccelerationStructuresKHR", VOID, LONG, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBuildAccelerationStructuresKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int infoCount, @NativeType("VkAccelerationStructureBuildGeometryInfoKHR*") long pInfos, @NativeType("VkAccelerationStructureBuildRangeInfoKHR*") long ppBuildRangeInfos) {
		try {
			vkCmdBuildAccelerationStructuresKHR.invokeExact(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBuildAccelerationStructuresIndirectKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBuildAccelerationStructuresIndirectKHR", VOID, LONG, INT, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBuildAccelerationStructuresIndirectKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int infoCount, @NativeType("VkAccelerationStructureBuildGeometryInfoKHR*") long pInfos, @NativeType("VkDeviceAddress*") long pIndirectDeviceAddresses, @NativeType("uint32_t*") long pIndirectStrides, @NativeType("uint32_t*") long ppMaxPrimitiveCounts) {
		try {
			vkCmdBuildAccelerationStructuresIndirectKHR.invokeExact(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBuildAccelerationStructuresKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBuildAccelerationStructuresKHR", INT, LONG, LONG, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBuildAccelerationStructuresKHR(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("uint32_t") int infoCount, @NativeType("VkAccelerationStructureBuildGeometryInfoKHR*") long pInfos, @NativeType("VkAccelerationStructureBuildRangeInfoKHR*") long ppBuildRangeInfos) {
		try {
			return (int) vkBuildAccelerationStructuresKHR.invokeExact(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyAccelerationStructureKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyAccelerationStructureKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyAccelerationStructureKHR(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("VkCopyAccelerationStructureInfoKHR*") long pInfo) {
		try {
			return (int) vkCopyAccelerationStructureKHR.invokeExact(device, deferredOperation, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyAccelerationStructureToMemoryKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyAccelerationStructureToMemoryKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyAccelerationStructureToMemoryKHR(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("VkCopyAccelerationStructureToMemoryInfoKHR*") long pInfo) {
		try {
			return (int) vkCopyAccelerationStructureToMemoryKHR.invokeExact(device, deferredOperation, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyMemoryToAccelerationStructureKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyMemoryToAccelerationStructureKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyMemoryToAccelerationStructureKHR(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("VkCopyMemoryToAccelerationStructureInfoKHR*") long pInfo) {
		try {
			return (int) vkCopyMemoryToAccelerationStructureKHR.invokeExact(device, deferredOperation, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkWriteAccelerationStructuresPropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkWriteAccelerationStructuresPropertiesKHR", INT, LONG, INT, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkWriteAccelerationStructuresPropertiesKHR(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int accelerationStructureCount, @NativeType("VkAccelerationStructureKHR**") long pAccelerationStructures, @NativeType("VkQueryType") int queryType, @NativeType("size_t") long dataSize, @NativeType("void*") long pData, @NativeType("size_t") long stride) {
		try {
			return (int) vkWriteAccelerationStructuresPropertiesKHR.invokeExact(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyAccelerationStructureKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyAccelerationStructureKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyAccelerationStructureKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyAccelerationStructureInfoKHR*") long pInfo) {
		try {
			vkCmdCopyAccelerationStructureKHR.invokeExact(commandBuffer, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyAccelerationStructureToMemoryKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyAccelerationStructureToMemoryKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyAccelerationStructureToMemoryKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyAccelerationStructureToMemoryInfoKHR*") long pInfo) {
		try {
			vkCmdCopyAccelerationStructureToMemoryKHR.invokeExact(commandBuffer, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyMemoryToAccelerationStructureKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyMemoryToAccelerationStructureKHR", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyMemoryToAccelerationStructureKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyMemoryToAccelerationStructureInfoKHR*") long pInfo) {
		try {
			vkCmdCopyMemoryToAccelerationStructureKHR.invokeExact(commandBuffer, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetAccelerationStructureDeviceAddressKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetAccelerationStructureDeviceAddressKHR", LONG, LONG, LONG);
	
	@NativeType("VkDeviceAddress")
	public static long vkGetAccelerationStructureDeviceAddressKHR(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureDeviceAddressInfoKHR*") long pInfo) {
		try {
			return (long) vkGetAccelerationStructureDeviceAddressKHR.invokeExact(device, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWriteAccelerationStructuresPropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWriteAccelerationStructuresPropertiesKHR", VOID, LONG, INT, LONG, INT, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdWriteAccelerationStructuresPropertiesKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int accelerationStructureCount, @NativeType("VkAccelerationStructureKHR**") long pAccelerationStructures, @NativeType("VkQueryType") int queryType, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int firstQuery) {
		try {
			vkCmdWriteAccelerationStructuresPropertiesKHR.invokeExact(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDeviceAccelerationStructureCompatibilityKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceAccelerationStructureCompatibilityKHR", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDeviceAccelerationStructureCompatibilityKHR(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureVersionInfoKHR*") long pVersionInfo, @NativeType("VkAccelerationStructureCompatibilityKHR*") long pCompatibility) {
		try {
			vkGetDeviceAccelerationStructureCompatibilityKHR.invokeExact(device, pVersionInfo, pCompatibility);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetAccelerationStructureBuildSizesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetAccelerationStructureBuildSizesKHR", VOID, LONG, INT, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetAccelerationStructureBuildSizesKHR(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureBuildTypeKHR") int buildType, @NativeType("VkAccelerationStructureBuildGeometryInfoKHR*") long pBuildInfo, /* optional */ @NativeType("uint32_t*") long pMaxPrimitiveCounts, @NativeType("VkAccelerationStructureBuildSizesInfoKHR*") long pSizeInfo) {
		try {
			vkGetAccelerationStructureBuildSizesKHR.invokeExact(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final long VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912L;
	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000;
}