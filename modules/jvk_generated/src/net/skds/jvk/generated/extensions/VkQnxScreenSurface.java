package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.lib2.utils.annotations.AutoGenerated;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkQnxScreenSurface {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 0;

	private static final MethodHandle vkCreateScreenSurfaceQNX = createHandle("vkCreateScreenSurfaceQNX", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateScreenSurfaceQNX(@NativeType("VkInstance*") long instance, @NativeType("VkScreenSurfaceCreateInfoQNX*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkSurfaceKHR**") long pSurface) {
		try {
			return (int) vkCreateScreenSurfaceQNX.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceScreenPresentationSupportQNX = createHandle("vkGetPhysicalDeviceScreenPresentationSupportQNX", INT, LONG, INT, LONG);

	@NativeType("VkBool32")
	public static int vkGetPhysicalDeviceScreenPresentationSupportQNX(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int queueFamilyIndex, @NativeType("_screen_window**") long window) {
		try {
			return (int) vkGetPhysicalDeviceScreenPresentationSupportQNX.invokeExact(physicalDevice, queueFamilyIndex, window);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}