package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvCooperativeVector {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV = 1000491000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV = 1000491001;
	public static final int VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV = 1000491002;
	public static final int VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV = 1000491004;
	public static final int VK_COMPONENT_TYPE_SINT8_PACKED_NV = 1000491000;
	public static final int VK_COMPONENT_TYPE_UINT8_PACKED_NV = 1000491001;
	public static final int VK_COMPONENT_TYPE_FLOAT_E4M3_NV = 1000491002;
	public static final int VK_COMPONENT_TYPE_FLOAT_E5M2_NV = 1000491003;
	public static final long VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV = 17592186044416L;
	private static final MethodHandle vkGetPhysicalDeviceCooperativeVectorPropertiesNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceCooperativeVectorPropertiesNV", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceCooperativeVectorPropertiesNV(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("uint32_t*") long pPropertyCount, /* optional */ @NativeType("VkCooperativeVectorPropertiesNV*") long pProperties) {
		try {
			return (int) vkGetPhysicalDeviceCooperativeVectorPropertiesNV.invokeExact(physicalDevice, pPropertyCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkConvertCooperativeVectorMatrixNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkConvertCooperativeVectorMatrixNV", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkConvertCooperativeVectorMatrixNV(@NativeType("VkDevice*") long device, @NativeType("VkConvertCooperativeVectorMatrixInfoNV*") long pInfo) {
		try {
			return (int) vkConvertCooperativeVectorMatrixNV.invokeExact(device, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdConvertCooperativeVectorMatrixNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdConvertCooperativeVectorMatrixNV", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdConvertCooperativeVectorMatrixNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int infoCount, @NativeType("VkConvertCooperativeVectorMatrixInfoNV*") long pInfos) {
		try {
			vkCmdConvertCooperativeVectorMatrixNV.invokeExact(commandBuffer, infoCount, pInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}