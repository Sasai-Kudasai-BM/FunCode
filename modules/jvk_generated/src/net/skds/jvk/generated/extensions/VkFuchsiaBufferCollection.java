package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkFuchsiaBufferCollection {
	
	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000;
	
	// VkBufferCollectionFUCHSIA
	
	/** VkBufferCollectionFUCHSIA **/
	public static final int VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000;
	public static final int VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001;
	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002;
	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003;
	public static final int VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004;
	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005;
	public static final int VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006;
	public static final int VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007;
	public static final int VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008;
	public static final int VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009;
	
	// Will add VkImageFormatConstraintsFlagBitsFUCHSIA when bits are defined in the future
	
	private static final MethodHandle vkCreateBufferCollectionFUCHSIA = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateBufferCollectionFUCHSIA", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateBufferCollectionFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionCreateInfoFUCHSIA*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkBufferCollectionFUCHSIA**") long pCollection) {
		try {
			return (int) vkCreateBufferCollectionFUCHSIA.invokeExact(device, pCreateInfo, pAllocator, pCollection);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSetBufferCollectionImageConstraintsFUCHSIA = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetBufferCollectionImageConstraintsFUCHSIA", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSetBufferCollectionImageConstraintsFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, @NativeType("VkImageConstraintsInfoFUCHSIA*") long pImageConstraintsInfo) {
		try {
			return (int) vkSetBufferCollectionImageConstraintsFUCHSIA.invokeExact(device, collection, pImageConstraintsInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSetBufferCollectionBufferConstraintsFUCHSIA = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetBufferCollectionBufferConstraintsFUCHSIA", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSetBufferCollectionBufferConstraintsFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, @NativeType("VkBufferConstraintsInfoFUCHSIA*") long pBufferConstraintsInfo) {
		try {
			return (int) vkSetBufferCollectionBufferConstraintsFUCHSIA.invokeExact(device, collection, pBufferConstraintsInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyBufferCollectionFUCHSIA = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyBufferCollectionFUCHSIA", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyBufferCollectionFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyBufferCollectionFUCHSIA.invokeExact(device, collection, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetBufferCollectionPropertiesFUCHSIA = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetBufferCollectionPropertiesFUCHSIA", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetBufferCollectionPropertiesFUCHSIA(@NativeType("VkDevice*") long device, @NativeType("VkBufferCollectionFUCHSIA*") long collection, @NativeType("VkBufferCollectionPropertiesFUCHSIA*") long pProperties) {
		try {
			return (int) vkGetBufferCollectionPropertiesFUCHSIA.invokeExact(device, collection, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000;
}