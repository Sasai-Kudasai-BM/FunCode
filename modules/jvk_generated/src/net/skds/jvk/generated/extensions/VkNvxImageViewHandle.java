package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkNvxImageViewHandle {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 0;

	public static final int VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1;

	private static final MethodHandle vkGetImageViewHandleNVX = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetImageViewHandleNVX", INT, LONG, LONG);

	@NativeType("uint32_t")
	public static int vkGetImageViewHandleNVX(@NativeType("VkDevice*") long device, @NativeType("VkImageViewHandleInfoNVX*") long pInfo) {
		try {
			return (int) vkGetImageViewHandleNVX.invokeExact(device, pInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetImageViewAddressNVX = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetImageViewAddressNVX", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_UNKNOWN
	*/
	@NativeType("VkResult")
	public static int vkGetImageViewAddressNVX(@NativeType("VkDevice*") long device, @NativeType("VkImageView*") long imageView, @NativeType("VkImageViewAddressPropertiesNVX*") long pProperties) {
		try {
			return (int) vkGetImageViewAddressNVX.invokeExact(device, imageView, pProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}