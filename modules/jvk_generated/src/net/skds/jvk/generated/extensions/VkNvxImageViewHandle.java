package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkNvxImageViewHandle {
	
	public static final int VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000;
	public static final int VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001;
	private static final MethodHandle vkGetImageViewHandleNVX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetImageViewHandleNVX", INT, LONG, LONG);
	
	@NativeType("uint32_t")
	public static int vkGetImageViewHandleNVX(@NativeType("VkDevice*") long device, @NativeType("VkImageViewHandleInfoNVX*") long pInfo) {
		try {
			return (int) vkGetImageViewHandleNVX.invokeExact(device, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetImageViewHandle64NVX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetImageViewHandle64NVX", LONG, LONG, LONG);
	
	@NativeType("uint64_t")
	public static long vkGetImageViewHandle64NVX(@NativeType("VkDevice*") long device, @NativeType("VkImageViewHandleInfoNVX*") long pInfo) {
		try {
			return (long) vkGetImageViewHandle64NVX.invokeExact(device, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetImageViewAddressNVX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetImageViewAddressNVX", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetImageViewAddressNVX(@NativeType("VkDevice*") long device, @NativeType("VkImageView*") long imageView, @NativeType("VkImageViewAddressPropertiesNVX*") long pProperties) {
		try {
			return (int) vkGetImageViewAddressNVX.invokeExact(device, imageView, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}