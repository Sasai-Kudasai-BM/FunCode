package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtOpacityMicromap {
	
	public static final int VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000;
	public static final int VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001;
	public static final int VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002;
	public static final int VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003;
	public static final int VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006;
	public static final int VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007;
	public static final int VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009;
	public static final long VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 1073741824L;
	public static final long VK_ACCESS_2_MICROMAP_READ_BIT_EXT = 17592186044416L;
	public static final long VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = 35184372088832L;
	public static final int VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000;
	public static final int VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001;
	public static final int VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000;
	public static final int VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608;
	public static final int VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216;
	public static final int VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216;
	public static final int VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_BIT_EXT = 16;
	public static final int VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16;
	public static final int VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_BIT_EXT = 32;
	public static final int VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_BIT_EXT = 64;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_BIT_EXT = 128;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_BIT_EXT = 256;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256;
	private static final MethodHandle vkCreateMicromapEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateMicromapEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateMicromapEXT(@NativeType("VkDevice*") long device, @NativeType("VkMicromapCreateInfoEXT*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkMicromapEXT**") long pMicromap) {
		try {
			return (int) vkCreateMicromapEXT.invokeExact(device, pCreateInfo, pAllocator, pMicromap);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyMicromapEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyMicromapEXT", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyMicromapEXT(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkMicromapEXT*") long micromap, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyMicromapEXT.invokeExact(device, micromap, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBuildMicromapsEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBuildMicromapsEXT", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdBuildMicromapsEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int infoCount, @NativeType("VkMicromapBuildInfoEXT*") long pInfos) {
		try {
			vkCmdBuildMicromapsEXT.invokeExact(commandBuffer, infoCount, pInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBuildMicromapsEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBuildMicromapsEXT", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBuildMicromapsEXT(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("uint32_t") int infoCount, @NativeType("VkMicromapBuildInfoEXT*") long pInfos) {
		try {
			return (int) vkBuildMicromapsEXT.invokeExact(device, deferredOperation, infoCount, pInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyMicromapEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyMicromapEXT", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyMicromapEXT(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("VkCopyMicromapInfoEXT*") long pInfo) {
		try {
			return (int) vkCopyMicromapEXT.invokeExact(device, deferredOperation, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyMicromapToMemoryEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyMicromapToMemoryEXT", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyMicromapToMemoryEXT(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("VkCopyMicromapToMemoryInfoEXT*") long pInfo) {
		try {
			return (int) vkCopyMicromapToMemoryEXT.invokeExact(device, deferredOperation, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCopyMemoryToMicromapEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCopyMemoryToMicromapEXT", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCopyMemoryToMicromapEXT(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, @NativeType("VkCopyMemoryToMicromapInfoEXT*") long pInfo) {
		try {
			return (int) vkCopyMemoryToMicromapEXT.invokeExact(device, deferredOperation, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkWriteMicromapsPropertiesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkWriteMicromapsPropertiesEXT", INT, LONG, INT, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkWriteMicromapsPropertiesEXT(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int micromapCount, @NativeType("VkMicromapEXT**") long pMicromaps, @NativeType("VkQueryType") int queryType, @NativeType("size_t") long dataSize, @NativeType("void*") long pData, @NativeType("size_t") long stride) {
		try {
			return (int) vkWriteMicromapsPropertiesEXT.invokeExact(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyMicromapEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyMicromapEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyMicromapEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyMicromapInfoEXT*") long pInfo) {
		try {
			vkCmdCopyMicromapEXT.invokeExact(commandBuffer, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyMicromapToMemoryEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyMicromapToMemoryEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyMicromapToMemoryEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyMicromapToMemoryInfoEXT*") long pInfo) {
		try {
			vkCmdCopyMicromapToMemoryEXT.invokeExact(commandBuffer, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyMemoryToMicromapEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyMemoryToMicromapEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyMemoryToMicromapEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyMemoryToMicromapInfoEXT*") long pInfo) {
		try {
			vkCmdCopyMemoryToMicromapEXT.invokeExact(commandBuffer, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWriteMicromapsPropertiesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWriteMicromapsPropertiesEXT", VOID, LONG, INT, LONG, INT, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdWriteMicromapsPropertiesEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int micromapCount, @NativeType("VkMicromapEXT**") long pMicromaps, @NativeType("VkQueryType") int queryType, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int firstQuery) {
		try {
			vkCmdWriteMicromapsPropertiesEXT.invokeExact(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDeviceMicromapCompatibilityEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceMicromapCompatibilityEXT", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDeviceMicromapCompatibilityEXT(@NativeType("VkDevice*") long device, @NativeType("VkMicromapVersionInfoEXT*") long pVersionInfo, @NativeType("VkAccelerationStructureCompatibilityKHR*") long pCompatibility) {
		try {
			vkGetDeviceMicromapCompatibilityEXT.invokeExact(device, pVersionInfo, pCompatibility);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetMicromapBuildSizesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetMicromapBuildSizesEXT", VOID, LONG, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetMicromapBuildSizesEXT(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureBuildTypeKHR") int buildType, @NativeType("VkMicromapBuildInfoEXT*") long pBuildInfo, @NativeType("VkMicromapBuildSizesInfoEXT*") long pSizeInfo) {
		try {
			vkGetMicromapBuildSizesEXT.invokeExact(device, buildType, pBuildInfo, pSizeInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}