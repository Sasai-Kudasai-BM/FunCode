package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkKhrGetSurfaceCapabilities2 {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 0;

	public static final int VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1;

	public static final int VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 2;

	private static final MethodHandle vkGetPhysicalDeviceSurfaceCapabilities2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", INT, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceCapabilities2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceSurfaceInfo2KHR*") long pSurfaceInfo, @NativeType("VkSurfaceCapabilities2KHR*") long pSurfaceCapabilities) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceCapabilities2KHR.invokeExact(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetPhysicalDeviceSurfaceFormats2KHR = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSurfaceFormats2KHR", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfaceFormats2KHR(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceSurfaceInfo2KHR*") long pSurfaceInfo, @NativeType("uint32_t*") /*optional*/ long pSurfaceFormatCount, @NativeType("VkSurfaceFormat2KHR*") /*optional*/ long pSurfaceFormats) {
		try {
			return (int) vkGetPhysicalDeviceSurfaceFormats2KHR.invokeExact(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}