package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkAmdxShaderEnqueue {
	
	public static final int VK_SHADER_INDEX_UNUSED_AMDX = 0;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX = 1000134000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX = 1000134001;
	public static final int VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX = 1000134002;
	public static final int VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX = 1000134003;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX = 1000134004;
	public static final int VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 33554432;
	public static final int VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX = 1000134000;
	private static final MethodHandle vkCreateExecutionGraphPipelinesAMDX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateExecutionGraphPipelinesAMDX", INT, LONG, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateExecutionGraphPipelinesAMDX(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkPipelineCache*") long pipelineCache, @NativeType("uint32_t") int createInfoCount, @NativeType("VkExecutionGraphPipelineCreateInfoAMDX*") long pCreateInfos, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkPipeline**") long pPipelines) {
		try {
			return (int) vkCreateExecutionGraphPipelinesAMDX.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetExecutionGraphPipelineScratchSizeAMDX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetExecutionGraphPipelineScratchSizeAMDX", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetExecutionGraphPipelineScratchSizeAMDX(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long executionGraph, @NativeType("VkExecutionGraphPipelineScratchSizeAMDX*") long pSizeInfo) {
		try {
			return (int) vkGetExecutionGraphPipelineScratchSizeAMDX.invokeExact(device, executionGraph, pSizeInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetExecutionGraphPipelineNodeIndexAMDX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetExecutionGraphPipelineNodeIndexAMDX", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetExecutionGraphPipelineNodeIndexAMDX(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long executionGraph, @NativeType("VkPipelineShaderStageNodeCreateInfoAMDX*") long pNodeInfo, @NativeType("uint32_t*") long pNodeIndex) {
		try {
			return (int) vkGetExecutionGraphPipelineNodeIndexAMDX.invokeExact(device, executionGraph, pNodeInfo, pNodeIndex);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdInitializeGraphScratchMemoryAMDX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdInitializeGraphScratchMemoryAMDX", VOID, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdInitializeGraphScratchMemoryAMDX(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPipeline*") long executionGraph, @NativeType("VkDeviceAddress") long scratch, @NativeType("VkDeviceSize") long scratchSize) {
		try {
			vkCmdInitializeGraphScratchMemoryAMDX.invokeExact(commandBuffer, executionGraph, scratch, scratchSize);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDispatchGraphAMDX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDispatchGraphAMDX", VOID, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdDispatchGraphAMDX(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDeviceAddress") long scratch, @NativeType("VkDeviceSize") long scratchSize, @NativeType("VkDispatchGraphCountInfoAMDX*") long pCountInfo) {
		try {
			vkCmdDispatchGraphAMDX.invokeExact(commandBuffer, scratch, scratchSize, pCountInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDispatchGraphIndirectAMDX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDispatchGraphIndirectAMDX", VOID, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdDispatchGraphIndirectAMDX(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDeviceAddress") long scratch, @NativeType("VkDeviceSize") long scratchSize, @NativeType("VkDispatchGraphCountInfoAMDX*") long pCountInfo) {
		try {
			vkCmdDispatchGraphIndirectAMDX.invokeExact(commandBuffer, scratch, scratchSize, pCountInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDispatchGraphIndirectCountAMDX = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDispatchGraphIndirectCountAMDX", VOID, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdDispatchGraphIndirectCountAMDX(@NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDeviceAddress") long scratch, @NativeType("VkDeviceSize") long scratchSize, @NativeType("VkDeviceAddress") long countInfo) {
		try {
			vkCmdDispatchGraphIndirectCountAMDX.invokeExact(commandBuffer, scratch, scratchSize, countInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final long VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 33554432L;
	public static final long VK_PIPELINE_CREATE_2_EXECUTION_GRAPH_BIT_AMDX = 4294967296L;
}