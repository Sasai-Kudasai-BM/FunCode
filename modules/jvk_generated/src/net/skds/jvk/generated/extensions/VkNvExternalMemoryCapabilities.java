package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvExternalMemoryCapabilities {
	
	private static final MethodHandle vkGetPhysicalDeviceExternalImageFormatPropertiesNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", INT, LONG, INT, INT, INT, INT, INT, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceExternalImageFormatPropertiesNV(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkFormat") int format, @NativeType("VkImageType") int type, @NativeType("VkImageTiling") int tiling, @NativeType("VkImageUsageFlags") int usage, /* optional */ @NativeType("VkImageCreateFlags") int flags, /* optional */ @NativeType("VkExternalMemoryHandleTypeFlagsNV") int externalHandleType, @NativeType("VkExternalImageFormatPropertiesNV*") long pExternalImageFormatProperties) {
		try {
			return (int) vkGetPhysicalDeviceExternalImageFormatPropertiesNV.invokeExact(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}