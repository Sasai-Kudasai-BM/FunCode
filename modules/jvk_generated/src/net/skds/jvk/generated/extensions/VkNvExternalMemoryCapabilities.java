package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkNvExternalMemoryCapabilities {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	private static final MethodHandle vkGetPhysicalDeviceExternalImageFormatPropertiesNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", INT, LONG, INT, INT, INT, INT, INT, INT, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED
	*/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceExternalImageFormatPropertiesNV(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkFormat") int format, @NativeType("VkImageType") int type, @NativeType("VkImageTiling") int tiling, @NativeType("VkImageUsageFlags") int usage, @NativeType("VkImageCreateFlags") /*optional*/ int flags, @NativeType("VkExternalMemoryHandleTypeFlagsNV") /*optional*/ int externalHandleType, @NativeType("VkExternalImageFormatPropertiesNV*") long pExternalImageFormatProperties) {
		try {
			return (int) vkGetPhysicalDeviceExternalImageFormatPropertiesNV.invokeExact(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}