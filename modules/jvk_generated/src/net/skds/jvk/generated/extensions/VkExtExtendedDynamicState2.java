package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtExtendedDynamicState2 {
	
	// Not promoted to 1.3
	
	/** Not promoted to 1.3 **/
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 0;
	/** Not promoted to 1.3 **/
	public static final int VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 0;
	public static final int VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1;
	public static final int VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 2;
	/** Not promoted to 1.3 **/
	public static final int VK_DYNAMIC_STATE_LOGIC_OP_EXT = 3;
	public static final int VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 4;
	private static final MethodHandle vkCmdSetPatchControlPointsEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPatchControlPointsEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPatchControlPointsEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int patchControlPoints) {
		try {
			vkCmdSetPatchControlPointsEXT.invokeExact(commandBuffer, patchControlPoints);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetRasterizerDiscardEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRasterizerDiscardEnableEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetRasterizerDiscardEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int rasterizerDiscardEnable) {
		try {
			vkCmdSetRasterizerDiscardEnableEXT.invokeExact(commandBuffer, rasterizerDiscardEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthBiasEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthBiasEnableEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDepthBiasEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int depthBiasEnable) {
		try {
			vkCmdSetDepthBiasEnableEXT.invokeExact(commandBuffer, depthBiasEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetLogicOpEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLogicOpEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetLogicOpEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkLogicOp") int logicOp) {
		try {
			vkCmdSetLogicOpEXT.invokeExact(commandBuffer, logicOp);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPrimitiveRestartEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPrimitiveRestartEnableEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPrimitiveRestartEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int primitiveRestartEnable) {
		try {
			vkCmdSetPrimitiveRestartEnableEXT.invokeExact(commandBuffer, primitiveRestartEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}