package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkExtValidationCache {
	
	public static final int VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000;
	public static final int VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001;
	public static final int VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000;
	private static final MethodHandle vkCreateValidationCacheEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateValidationCacheEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateValidationCacheEXT(@NativeType("VkDevice*") long device, @NativeType("VkValidationCacheCreateInfoEXT*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkValidationCacheEXT**") long pValidationCache) {
		try {
			return (int) vkCreateValidationCacheEXT.invokeExact(device, pCreateInfo, pAllocator, pValidationCache);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyValidationCacheEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyValidationCacheEXT", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyValidationCacheEXT(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkValidationCacheEXT*") long validationCache, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyValidationCacheEXT.invokeExact(device, validationCache, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkMergeValidationCachesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkMergeValidationCachesEXT", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkMergeValidationCachesEXT(@NativeType("VkDevice*") long device, /* external sync */ @NativeType("VkValidationCacheEXT*") long dstCache, @NativeType("uint32_t") int srcCacheCount, @NativeType("VkValidationCacheEXT**") long pSrcCaches) {
		try {
			return (int) vkMergeValidationCachesEXT.invokeExact(device, dstCache, srcCacheCount, pSrcCaches);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetValidationCacheDataEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetValidationCacheDataEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetValidationCacheDataEXT(@NativeType("VkDevice*") long device, @NativeType("VkValidationCacheEXT*") long validationCache, /* optional */ @NativeType("size_t*") long pDataSize, /* optional */ @NativeType("void*") long pData) {
		try {
			return (int) vkGetValidationCacheDataEXT.invokeExact(device, validationCache, pDataSize, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}