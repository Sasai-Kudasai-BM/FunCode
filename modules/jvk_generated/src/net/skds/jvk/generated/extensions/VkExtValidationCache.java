package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkExtValidationCache {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1;

	public static final int VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 0;

	private static final MethodHandle vkCreateValidationCacheEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCreateValidationCacheEXT", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkCreateValidationCacheEXT(@NativeType("VkDevice*") long device, @NativeType("VkValidationCacheCreateInfoEXT*") long pCreateInfo, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator, @NativeType("VkValidationCacheEXT**") long pValidationCache) {
		try {
			return (int) vkCreateValidationCacheEXT.invokeExact(device, pCreateInfo, pAllocator, pValidationCache);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDestroyValidationCacheEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkDestroyValidationCacheEXT", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkDestroyValidationCacheEXT(@NativeType("VkDevice*") long device, @NativeType("VkValidationCacheEXT*") /*optional, external sync*/ long validationCache, @NativeType("VkAllocationCallbacks*") /*optional*/ long pAllocator) {
		try {
			vkDestroyValidationCacheEXT.invokeExact(device, validationCache, pAllocator);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkMergeValidationCachesEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkMergeValidationCachesEXT", INT, LONG, LONG, INT, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkMergeValidationCachesEXT(@NativeType("VkDevice*") long device, @NativeType("VkValidationCacheEXT*") /*external sync*/ long dstCache, @NativeType("uint32_t") int srcCacheCount, @NativeType("VkValidationCacheEXT**") long pSrcCaches) {
		try {
			return (int) vkMergeValidationCachesEXT.invokeExact(device, dstCache, srcCacheCount, pSrcCaches);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetValidationCacheDataEXT = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetValidationCacheDataEXT", INT, LONG, LONG, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkGetValidationCacheDataEXT(@NativeType("VkDevice*") long device, @NativeType("VkValidationCacheEXT*") long validationCache, @NativeType("size_t*") /*optional*/ long pDataSize, @NativeType("void*") /*optional*/ long pData) {
		try {
			return (int) vkGetValidationCacheDataEXT.invokeExact(device, validationCache, pDataSize, pData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}