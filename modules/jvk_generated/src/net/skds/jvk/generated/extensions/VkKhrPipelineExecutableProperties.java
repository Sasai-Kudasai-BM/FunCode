package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrPipelineExecutableProperties {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005;
	public static final int VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64;
	public static final int VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128;
	private static final MethodHandle vkGetPipelineExecutablePropertiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPipelineExecutablePropertiesKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPipelineExecutablePropertiesKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineInfoKHR*") long pPipelineInfo, /* optional */ @NativeType("uint32_t*") long pExecutableCount, /* optional */ @NativeType("VkPipelineExecutablePropertiesKHR*") long pProperties) {
		try {
			return (int) vkGetPipelineExecutablePropertiesKHR.invokeExact(device, pPipelineInfo, pExecutableCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPipelineExecutableStatisticsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPipelineExecutableStatisticsKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPipelineExecutableStatisticsKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineExecutableInfoKHR*") long pExecutableInfo, /* optional */ @NativeType("uint32_t*") long pStatisticCount, /* optional */ @NativeType("VkPipelineExecutableStatisticKHR*") long pStatistics) {
		try {
			return (int) vkGetPipelineExecutableStatisticsKHR.invokeExact(device, pExecutableInfo, pStatisticCount, pStatistics);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPipelineExecutableInternalRepresentationsKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPipelineExecutableInternalRepresentationsKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPipelineExecutableInternalRepresentationsKHR(@NativeType("VkDevice*") long device, @NativeType("VkPipelineExecutableInfoKHR*") long pExecutableInfo, /* optional */ @NativeType("uint32_t*") long pInternalRepresentationCount, /* optional */ @NativeType("VkPipelineExecutableInternalRepresentationKHR*") long pInternalRepresentations) {
		try {
			return (int) vkGetPipelineExecutableInternalRepresentationsKHR.invokeExact(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}