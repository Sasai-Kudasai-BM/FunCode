package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrMapMemory2 {
	
	public static final int VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1000271000;
	public static final int VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1000271001;
	private static final MethodHandle vkMapMemory2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkMapMemory2KHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkMapMemory2KHR(@NativeType("VkDevice*") long device, @NativeType("VkMemoryMapInfo*") long pMemoryMapInfo, /* optional */ @NativeType("void*") long ppData) {
		try {
			return (int) vkMapMemory2KHR.invokeExact(device, pMemoryMapInfo, ppData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkUnmapMemory2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkUnmapMemory2KHR", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_MEMORY_MAP_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkUnmapMemory2KHR(@NativeType("VkDevice*") long device, @NativeType("VkMemoryUnmapInfo*") long pMemoryUnmapInfo) {
		try {
			return (int) vkUnmapMemory2KHR.invokeExact(device, pMemoryUnmapInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}