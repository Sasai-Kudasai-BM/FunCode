package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkArmDataGraph {
	
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CREATE_INFO_ARM = 1000507000;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_CREATE_INFO_ARM = 1000507001;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_RESOURCE_INFO_ARM = 1000507002;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CONSTANT_ARM = 1000507003;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_MEMORY_REQUIREMENTS_INFO_ARM = 1000507004;
	public static final int VK_STRUCTURE_TYPE_BIND_DATA_GRAPH_PIPELINE_SESSION_MEMORY_INFO_ARM = 1000507005;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DATA_GRAPH_FEATURES_ARM = 1000507006;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SHADER_MODULE_CREATE_INFO_ARM = 1000507007;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_PROPERTY_QUERY_RESULT_ARM = 1000507008;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_INFO_ARM = 1000507009;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_COMPILER_CONTROL_CREATE_INFO_ARM = 1000507010;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENTS_INFO_ARM = 1000507011;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENT_ARM = 1000507012;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_IDENTIFIER_CREATE_INFO_ARM = 1000507013;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_DISPATCH_INFO_ARM = 1000507014;
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PROCESSING_ENGINE_CREATE_INFO_ARM = 1000507016;
	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_PROPERTIES_ARM = 1000507017;
	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_DATA_GRAPH_PROPERTIES_ARM = 1000507018;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_INFO_ARM = 1000507019;
	public static final int VK_OBJECT_TYPE_DATA_GRAPH_PIPELINE_SESSION_ARM = 1000507000;
	public static final int VK_PIPELINE_BIND_POINT_DATA_GRAPH_ARM = 1000507000;
	public static final int VK_QUEUE_DATA_GRAPH_BIT_ARM = 1024;
	public static final long VK_PIPELINE_STAGE_2_DATA_GRAPH_BIT_ARM = 4398046511104L;
	public static final long VK_ACCESS_2_DATA_GRAPH_READ_BIT_ARM = 140737488355328L;
	public static final long VK_ACCESS_2_DATA_GRAPH_WRITE_BIT_ARM = 281474976710656L;
	public static final long VK_TENSOR_USAGE_DATA_GRAPH_BIT_ARM = 32L;
	public static final long VK_FORMAT_FEATURE_2_TENSOR_DATA_GRAPH_BIT_ARM = 281474976710656L;
	public static final long VK_BUFFER_USAGE_2_DATA_GRAPH_FOREIGN_DESCRIPTOR_BIT_ARM = 536870912L;
	public static final int VK_MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM = 128;
	private static final MethodHandle vkCreateDataGraphPipelinesARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateDataGraphPipelinesARM", INT, LONG, LONG, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateDataGraphPipelinesARM(@NativeType("VkDevice*") long device, /* optional */ @NativeType("VkDeferredOperationKHR*") long deferredOperation, /* optional */ @NativeType("VkPipelineCache*") long pipelineCache, @NativeType("uint32_t") int createInfoCount, @NativeType("VkDataGraphPipelineCreateInfoARM*") long pCreateInfos, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkPipeline**") long pPipelines) {
		try {
			return (int) vkCreateDataGraphPipelinesARM.invokeExact(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateDataGraphPipelineSessionARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateDataGraphPipelineSessionARM", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateDataGraphPipelineSessionARM(@NativeType("VkDevice*") long device, @NativeType("VkDataGraphPipelineSessionCreateInfoARM*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkDataGraphPipelineSessionARM**") long pSession) {
		try {
			return (int) vkCreateDataGraphPipelineSessionARM.invokeExact(device, pCreateInfo, pAllocator, pSession);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDataGraphPipelineSessionBindPointRequirementsARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDataGraphPipelineSessionBindPointRequirementsARM", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDataGraphPipelineSessionBindPointRequirementsARM(@NativeType("VkDevice*") long device, @NativeType("VkDataGraphPipelineSessionBindPointRequirementsInfoARM*") long pInfo, /* optional */ @NativeType("uint32_t*") long pBindPointRequirementCount, /* optional */ @NativeType("VkDataGraphPipelineSessionBindPointRequirementARM*") long pBindPointRequirements) {
		try {
			return (int) vkGetDataGraphPipelineSessionBindPointRequirementsARM.invokeExact(device, pInfo, pBindPointRequirementCount, pBindPointRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDataGraphPipelineSessionMemoryRequirementsARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDataGraphPipelineSessionMemoryRequirementsARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDataGraphPipelineSessionMemoryRequirementsARM(@NativeType("VkDevice*") long device, @NativeType("VkDataGraphPipelineSessionMemoryRequirementsInfoARM*") long pInfo, @NativeType("VkMemoryRequirements2*") long pMemoryRequirements) {
		try {
			vkGetDataGraphPipelineSessionMemoryRequirementsARM.invokeExact(device, pInfo, pMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBindDataGraphPipelineSessionMemoryARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBindDataGraphPipelineSessionMemoryARM", INT, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBindDataGraphPipelineSessionMemoryARM(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int bindInfoCount, @NativeType("VkBindDataGraphPipelineSessionMemoryInfoARM*") long pBindInfos) {
		try {
			return (int) vkBindDataGraphPipelineSessionMemoryARM.invokeExact(device, bindInfoCount, pBindInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyDataGraphPipelineSessionARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyDataGraphPipelineSessionARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyDataGraphPipelineSessionARM(@NativeType("VkDevice*") long device, /* external sync */ @NativeType("VkDataGraphPipelineSessionARM*") long session, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyDataGraphPipelineSessionARM.invokeExact(device, session, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDispatchDataGraphARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDispatchDataGraphARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdDispatchDataGraphARM(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDataGraphPipelineSessionARM*") long session, /* optional */ @NativeType("VkDataGraphPipelineDispatchInfoARM*") long pInfo) {
		try {
			vkCmdDispatchDataGraphARM.invokeExact(commandBuffer, session, pInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDataGraphPipelineAvailablePropertiesARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDataGraphPipelineAvailablePropertiesARM", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDataGraphPipelineAvailablePropertiesARM(@NativeType("VkDevice*") long device, @NativeType("VkDataGraphPipelineInfoARM*") long pPipelineInfo, /* optional */ @NativeType("uint32_t*") long pPropertiesCount, /* optional */ @NativeType("VkDataGraphPipelinePropertyARM*") long pProperties) {
		try {
			return (int) vkGetDataGraphPipelineAvailablePropertiesARM.invokeExact(device, pPipelineInfo, pPropertiesCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDataGraphPipelinePropertiesARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDataGraphPipelinePropertiesARM", INT, LONG, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDataGraphPipelinePropertiesARM(@NativeType("VkDevice*") long device, @NativeType("VkDataGraphPipelineInfoARM*") long pPipelineInfo, @NativeType("uint32_t") int propertiesCount, @NativeType("VkDataGraphPipelinePropertyQueryResultARM*") long pProperties) {
		try {
			return (int) vkGetDataGraphPipelinePropertiesARM.invokeExact(device, pPipelineInfo, propertiesCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM", INT, LONG, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("uint32_t") int queueFamilyIndex, /* optional */ @NativeType("uint32_t*") long pQueueFamilyDataGraphPropertyCount, /* optional */ @NativeType("VkQueueFamilyDataGraphPropertiesARM*") long pQueueFamilyDataGraphProperties) {
		try {
			return (int) vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM.invokeExact(physicalDevice, queueFamilyIndex, pQueueFamilyDataGraphPropertyCount, pQueueFamilyDataGraphProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM*") long pQueueFamilyDataGraphProcessingEngineInfo, @NativeType("VkQueueFamilyDataGraphProcessingEnginePropertiesARM*") long pQueueFamilyDataGraphProcessingEngineProperties) {
		try {
			vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM.invokeExact(physicalDevice, pQueueFamilyDataGraphProcessingEngineInfo, pQueueFamilyDataGraphProcessingEngineProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_DATA_GRAPH_PIPELINE_CONSTANT_TENSOR_SEMI_STRUCTURED_SPARSITY_INFO_ARM = 1000507015;
}