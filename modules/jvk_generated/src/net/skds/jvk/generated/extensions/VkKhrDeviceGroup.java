package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.LinkerUtils.*;

@AutoGenerated
public final class VkKhrDeviceGroup {
	
	public static final int VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000;
	public static final int VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003;
	public static final int VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004;
	public static final int VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005;
	public static final int VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006;
	public static final int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1;
	public static final int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2;
	public static final int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4;
	public static final int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8;
	public static final int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1;
	private static final MethodHandle vkGetDeviceGroupPeerMemoryFeaturesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceGroupPeerMemoryFeaturesKHR", VOID, LONG, INT, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkGetDeviceGroupPeerMemoryFeaturesKHR(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int heapIndex, @NativeType("uint32_t") int localDeviceIndex, @NativeType("uint32_t") int remoteDeviceIndex, @NativeType("VkPeerMemoryFeatureFlags*") long pPeerMemoryFeatures) {
		try {
			vkGetDeviceGroupPeerMemoryFeaturesKHR.invokeExact(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDeviceMaskKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDeviceMaskKHR", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDeviceMaskKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int deviceMask) {
		try {
			vkCmdSetDeviceMaskKHR.invokeExact(commandBuffer, deviceMask);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDispatchBaseKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDispatchBaseKHR", VOID, LONG, INT, INT, INT, INT, INT, INT);
	
	@NativeType("void")
	public static void vkCmdDispatchBaseKHR(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int baseGroupX, @NativeType("uint32_t") int baseGroupY, @NativeType("uint32_t") int baseGroupZ, @NativeType("uint32_t") int groupCountX, @NativeType("uint32_t") int groupCountY, @NativeType("uint32_t") int groupCountZ) {
		try {
			vkCmdDispatchBaseKHR.invokeExact(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8;
	public static final int VK_PIPELINE_CREATE_DISPATCH_BASE_BIT_KHR = 16;
	public static final int VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16;
	public static final int VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4;
	public static final int VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013;
	public static final int VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014;
	public static final int VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64;
	public static final int VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007;
	private static final MethodHandle vkGetDeviceGroupPresentCapabilitiesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceGroupPresentCapabilitiesKHR", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDeviceGroupPresentCapabilitiesKHR(@NativeType("VkDevice*") long device, @NativeType("VkDeviceGroupPresentCapabilitiesKHR*") long pDeviceGroupPresentCapabilities) {
		try {
			return (int) vkGetDeviceGroupPresentCapabilitiesKHR.invokeExact(device, pDeviceGroupPresentCapabilities);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDeviceGroupSurfacePresentModesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceGroupSurfacePresentModesKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDeviceGroupSurfacePresentModesKHR(@NativeType("VkDevice*") long device, /* external sync */ @NativeType("VkSurfaceKHR*") long surface, /* optional */ @NativeType("VkDeviceGroupPresentModeFlagsKHR*") long pModes) {
		try {
			return (int) vkGetDeviceGroupSurfacePresentModesKHR.invokeExact(device, surface, pModes);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPhysicalDevicePresentRectanglesKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDevicePresentRectanglesKHR", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDevicePresentRectanglesKHR(@NativeType("VkPhysicalDevice*") long physicalDevice, /* external sync */ @NativeType("VkSurfaceKHR*") long surface, /* optional */ @NativeType("uint32_t*") long pRectCount, /* optional */ @NativeType("VkRect2D*") long pRects) {
		try {
			return (int) vkGetPhysicalDevicePresentRectanglesKHR.invokeExact(physicalDevice, surface, pRectCount, pRects);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008;
	public static final int VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009;
	public static final int VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010;
	public static final int VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011;
	public static final int VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012;
	
	// Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
	
	/** Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT **/
	public static final int VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1;
	private static final MethodHandle vkAcquireNextImage2KHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkAcquireNextImage2KHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkAcquireNextImage2KHR(@NativeType("VkDevice*") long device, @NativeType("VkAcquireNextImageInfoKHR*") long pAcquireInfo, @NativeType("uint32_t*") long pImageIndex) {
		try {
			return (int) vkAcquireNextImage2KHR.invokeExact(device, pAcquireInfo, pImageIndex);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}