package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvCooperativeMatrix {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000;
	public static final int VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002;
	public static final int VK_SCOPE_DEVICE_NV = 1;
	public static final int VK_SCOPE_WORKGROUP_NV = 2;
	public static final int VK_SCOPE_SUBGROUP_NV = 3;
	public static final int VK_SCOPE_QUEUE_FAMILY_NV = 5;
	public static final int VK_COMPONENT_TYPE_FLOAT16_NV = 0;
	public static final int VK_COMPONENT_TYPE_FLOAT32_NV = 1;
	public static final int VK_COMPONENT_TYPE_FLOAT64_NV = 2;
	public static final int VK_COMPONENT_TYPE_SINT8_NV = 3;
	public static final int VK_COMPONENT_TYPE_SINT16_NV = 4;
	public static final int VK_COMPONENT_TYPE_SINT32_NV = 5;
	public static final int VK_COMPONENT_TYPE_SINT64_NV = 6;
	public static final int VK_COMPONENT_TYPE_UINT8_NV = 7;
	public static final int VK_COMPONENT_TYPE_UINT16_NV = 8;
	public static final int VK_COMPONENT_TYPE_UINT32_NV = 9;
	public static final int VK_COMPONENT_TYPE_UINT64_NV = 10;
	private static final MethodHandle vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("uint32_t*") long pPropertyCount, /* optional */ @NativeType("VkCooperativeMatrixPropertiesNV*") long pProperties) {
		try {
			return (int) vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.invokeExact(physicalDevice, pPropertyCount, pProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}