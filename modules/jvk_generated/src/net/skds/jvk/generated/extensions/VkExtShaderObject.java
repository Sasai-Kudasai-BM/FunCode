package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtShaderObject {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001;
	public static final int VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002;
	public static final int VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001;
	public static final int VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002;
	public static final int VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001;
	public static final int VK_OBJECT_TYPE_SHADER_EXT = 1000482000;
	public static final int VK_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000;
	public static final int VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000;
	private static final MethodHandle vkCreateShadersEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateShadersEXT", INT, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPATIBLE_SHADER_BINARY_EXT
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateShadersEXT(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int createInfoCount, @NativeType("VkShaderCreateInfoEXT*") long pCreateInfos, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkShaderEXT**") long pShaders) {
		try {
			return (int) vkCreateShadersEXT.invokeExact(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyShaderEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyShaderEXT", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyShaderEXT(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkShaderEXT*") long shader, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyShaderEXT.invokeExact(device, shader, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetShaderBinaryDataEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetShaderBinaryDataEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetShaderBinaryDataEXT(@NativeType("VkDevice*") long device, @NativeType("VkShaderEXT*") long shader, /* optional */ @NativeType("size_t*") long pDataSize, /* optional */ @NativeType("void*") long pData) {
		try {
			return (int) vkGetShaderBinaryDataEXT.invokeExact(device, shader, pDataSize, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBindShadersEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBindShadersEXT", VOID, LONG, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBindShadersEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int stageCount, @NativeType("VkShaderStageFlagBits*") long pStages, /* optional */ @NativeType("VkShaderEXT**") long pShaders) {
		try {
			vkCmdBindShadersEXT.invokeExact(commandBuffer, stageCount, pStages, pShaders);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCullModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCullModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCullModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("VkCullModeFlags") int cullMode) {
		try {
			vkCmdSetCullModeEXT.invokeExact(commandBuffer, cullMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetFrontFaceEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetFrontFaceEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetFrontFaceEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkFrontFace") int frontFace) {
		try {
			vkCmdSetFrontFaceEXT.invokeExact(commandBuffer, frontFace);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPrimitiveTopologyEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPrimitiveTopologyEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPrimitiveTopologyEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPrimitiveTopology") int primitiveTopology) {
		try {
			vkCmdSetPrimitiveTopologyEXT.invokeExact(commandBuffer, primitiveTopology);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetViewportWithCountEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetViewportWithCountEXT", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetViewportWithCountEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int viewportCount, @NativeType("VkViewport*") long pViewports) {
		try {
			vkCmdSetViewportWithCountEXT.invokeExact(commandBuffer, viewportCount, pViewports);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetScissorWithCountEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetScissorWithCountEXT", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetScissorWithCountEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int scissorCount, @NativeType("VkRect2D*") long pScissors) {
		try {
			vkCmdSetScissorWithCountEXT.invokeExact(commandBuffer, scissorCount, pScissors);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBindVertexBuffers2EXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBindVertexBuffers2EXT", VOID, LONG, INT, INT, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBindVertexBuffers2EXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstBinding, @NativeType("uint32_t") int bindingCount, /* optional */ @NativeType("VkBuffer**") long pBuffers, @NativeType("VkDeviceSize*") long pOffsets, /* optional */ @NativeType("VkDeviceSize*") long pSizes, /* optional */ @NativeType("VkDeviceSize*") long pStrides) {
		try {
			vkCmdBindVertexBuffers2EXT.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthTestEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthTestEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthTestEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthTestEnable) {
		try {
			vkCmdSetDepthTestEnableEXT.invokeExact(commandBuffer, depthTestEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthWriteEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthWriteEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthWriteEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthWriteEnable) {
		try {
			vkCmdSetDepthWriteEnableEXT.invokeExact(commandBuffer, depthWriteEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthCompareOpEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthCompareOpEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDepthCompareOpEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCompareOp") int depthCompareOp) {
		try {
			vkCmdSetDepthCompareOpEXT.invokeExact(commandBuffer, depthCompareOp);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthBoundsTestEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthBoundsTestEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthBoundsTestEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthBoundsTestEnable) {
		try {
			vkCmdSetDepthBoundsTestEnableEXT.invokeExact(commandBuffer, depthBoundsTestEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetStencilTestEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetStencilTestEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetStencilTestEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean stencilTestEnable) {
		try {
			vkCmdSetStencilTestEnableEXT.invokeExact(commandBuffer, stencilTestEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetStencilOpEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetStencilOpEXT", VOID, LONG, INT, INT, INT, INT, INT);
	
	@NativeType("void")
	public static void vkCmdSetStencilOpEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkStencilFaceFlags") int faceMask, @NativeType("VkStencilOp") int failOp, @NativeType("VkStencilOp") int passOp, @NativeType("VkStencilOp") int depthFailOp, @NativeType("VkCompareOp") int compareOp) {
		try {
			vkCmdSetStencilOpEXT.invokeExact(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetVertexInputEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetVertexInputEXT", VOID, LONG, INT, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetVertexInputEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("uint32_t") int vertexBindingDescriptionCount, @NativeType("VkVertexInputBindingDescription2EXT*") long pVertexBindingDescriptions, /* optional */ @NativeType("uint32_t") int vertexAttributeDescriptionCount, @NativeType("VkVertexInputAttributeDescription2EXT*") long pVertexAttributeDescriptions) {
		try {
			vkCmdSetVertexInputEXT.invokeExact(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPatchControlPointsEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPatchControlPointsEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPatchControlPointsEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int patchControlPoints) {
		try {
			vkCmdSetPatchControlPointsEXT.invokeExact(commandBuffer, patchControlPoints);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetRasterizerDiscardEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRasterizerDiscardEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetRasterizerDiscardEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean rasterizerDiscardEnable) {
		try {
			vkCmdSetRasterizerDiscardEnableEXT.invokeExact(commandBuffer, rasterizerDiscardEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthBiasEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthBiasEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthBiasEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthBiasEnable) {
		try {
			vkCmdSetDepthBiasEnableEXT.invokeExact(commandBuffer, depthBiasEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetLogicOpEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLogicOpEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetLogicOpEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkLogicOp") int logicOp) {
		try {
			vkCmdSetLogicOpEXT.invokeExact(commandBuffer, logicOp);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPrimitiveRestartEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPrimitiveRestartEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetPrimitiveRestartEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean primitiveRestartEnable) {
		try {
			vkCmdSetPrimitiveRestartEnableEXT.invokeExact(commandBuffer, primitiveRestartEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetTessellationDomainOriginEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetTessellationDomainOriginEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetTessellationDomainOriginEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkTessellationDomainOrigin") int domainOrigin) {
		try {
			vkCmdSetTessellationDomainOriginEXT.invokeExact(commandBuffer, domainOrigin);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthClampEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthClampEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthClampEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthClampEnable) {
		try {
			vkCmdSetDepthClampEnableEXT.invokeExact(commandBuffer, depthClampEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPolygonModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPolygonModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPolygonModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPolygonMode") int polygonMode) {
		try {
			vkCmdSetPolygonModeEXT.invokeExact(commandBuffer, polygonMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetRasterizationSamplesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRasterizationSamplesEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetRasterizationSamplesEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkSampleCountFlagBits") int rasterizationSamples) {
		try {
			vkCmdSetRasterizationSamplesEXT.invokeExact(commandBuffer, rasterizationSamples);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetSampleMaskEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetSampleMaskEXT", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetSampleMaskEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkSampleCountFlagBits") int samples, @NativeType("VkSampleMask*") long pSampleMask) {
		try {
			vkCmdSetSampleMaskEXT.invokeExact(commandBuffer, samples, pSampleMask);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetAlphaToCoverageEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetAlphaToCoverageEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetAlphaToCoverageEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean alphaToCoverageEnable) {
		try {
			vkCmdSetAlphaToCoverageEnableEXT.invokeExact(commandBuffer, alphaToCoverageEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetAlphaToOneEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetAlphaToOneEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetAlphaToOneEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean alphaToOneEnable) {
		try {
			vkCmdSetAlphaToOneEnableEXT.invokeExact(commandBuffer, alphaToOneEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetLogicOpEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLogicOpEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetLogicOpEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean logicOpEnable) {
		try {
			vkCmdSetLogicOpEnableEXT.invokeExact(commandBuffer, logicOpEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetColorBlendEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorBlendEnableEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorBlendEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, @NativeType("VkBool32*") long pColorBlendEnables) {
		try {
			vkCmdSetColorBlendEnableEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetColorBlendEquationEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorBlendEquationEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorBlendEquationEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, @NativeType("VkColorBlendEquationEXT*") long pColorBlendEquations) {
		try {
			vkCmdSetColorBlendEquationEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetColorWriteMaskEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorWriteMaskEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorWriteMaskEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, /* optional */ @NativeType("VkColorComponentFlags*") long pColorWriteMasks) {
		try {
			vkCmdSetColorWriteMaskEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetRasterizationStreamEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRasterizationStreamEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetRasterizationStreamEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int rasterizationStream) {
		try {
			vkCmdSetRasterizationStreamEXT.invokeExact(commandBuffer, rasterizationStream);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetConservativeRasterizationModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetConservativeRasterizationModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetConservativeRasterizationModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkConservativeRasterizationModeEXT") int conservativeRasterizationMode) {
		try {
			vkCmdSetConservativeRasterizationModeEXT.invokeExact(commandBuffer, conservativeRasterizationMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetExtraPrimitiveOverestimationSizeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetExtraPrimitiveOverestimationSizeEXT", VOID, LONG, FLOAT);
	
	@NativeType("void")
	public static void vkCmdSetExtraPrimitiveOverestimationSizeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("float") float extraPrimitiveOverestimationSize) {
		try {
			vkCmdSetExtraPrimitiveOverestimationSizeEXT.invokeExact(commandBuffer, extraPrimitiveOverestimationSize);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthClipEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthClipEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthClipEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthClipEnable) {
		try {
			vkCmdSetDepthClipEnableEXT.invokeExact(commandBuffer, depthClipEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetSampleLocationsEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetSampleLocationsEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetSampleLocationsEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean sampleLocationsEnable) {
		try {
			vkCmdSetSampleLocationsEnableEXT.invokeExact(commandBuffer, sampleLocationsEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetColorBlendAdvancedEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorBlendAdvancedEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorBlendAdvancedEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, @NativeType("VkColorBlendAdvancedEXT*") long pColorBlendAdvanced) {
		try {
			vkCmdSetColorBlendAdvancedEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetProvokingVertexModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetProvokingVertexModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetProvokingVertexModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkProvokingVertexModeEXT") int provokingVertexMode) {
		try {
			vkCmdSetProvokingVertexModeEXT.invokeExact(commandBuffer, provokingVertexMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetLineRasterizationModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLineRasterizationModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetLineRasterizationModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkLineRasterizationModeEXT") int lineRasterizationMode) {
		try {
			vkCmdSetLineRasterizationModeEXT.invokeExact(commandBuffer, lineRasterizationMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetLineStippleEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLineStippleEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetLineStippleEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean stippledLineEnable) {
		try {
			vkCmdSetLineStippleEnableEXT.invokeExact(commandBuffer, stippledLineEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthClipNegativeOneToOneEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthClipNegativeOneToOneEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthClipNegativeOneToOneEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean negativeOneToOne) {
		try {
			vkCmdSetDepthClipNegativeOneToOneEXT.invokeExact(commandBuffer, negativeOneToOne ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2;
	public static final int VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4;
	public static final int VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8;
	public static final int VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16;
	public static final int VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32;
	public static final int VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64;
	private static final MethodHandle vkCmdSetViewportWScalingEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetViewportWScalingEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetViewportWScalingEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean viewportWScalingEnable) {
		try {
			vkCmdSetViewportWScalingEnableNV.invokeExact(commandBuffer, viewportWScalingEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetViewportSwizzleNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetViewportSwizzleNV", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetViewportSwizzleNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstViewport, @NativeType("uint32_t") int viewportCount, @NativeType("VkViewportSwizzleNV*") long pViewportSwizzles) {
		try {
			vkCmdSetViewportSwizzleNV.invokeExact(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageToColorEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageToColorEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetCoverageToColorEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean coverageToColorEnable) {
		try {
			vkCmdSetCoverageToColorEnableNV.invokeExact(commandBuffer, coverageToColorEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageToColorLocationNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageToColorLocationNV", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCoverageToColorLocationNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int coverageToColorLocation) {
		try {
			vkCmdSetCoverageToColorLocationNV.invokeExact(commandBuffer, coverageToColorLocation);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageModulationModeNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageModulationModeNV", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCoverageModulationModeNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCoverageModulationModeNV") int coverageModulationMode) {
		try {
			vkCmdSetCoverageModulationModeNV.invokeExact(commandBuffer, coverageModulationMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageModulationTableEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageModulationTableEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetCoverageModulationTableEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean coverageModulationTableEnable) {
		try {
			vkCmdSetCoverageModulationTableEnableNV.invokeExact(commandBuffer, coverageModulationTableEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageModulationTableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageModulationTableNV", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetCoverageModulationTableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int coverageModulationTableCount, @NativeType("float*") long pCoverageModulationTable) {
		try {
			vkCmdSetCoverageModulationTableNV.invokeExact(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetShadingRateImageEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetShadingRateImageEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetShadingRateImageEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean shadingRateImageEnable) {
		try {
			vkCmdSetShadingRateImageEnableNV.invokeExact(commandBuffer, shadingRateImageEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetRepresentativeFragmentTestEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRepresentativeFragmentTestEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetRepresentativeFragmentTestEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean representativeFragmentTestEnable) {
		try {
			vkCmdSetRepresentativeFragmentTestEnableNV.invokeExact(commandBuffer, representativeFragmentTestEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageReductionModeNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageReductionModeNV", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCoverageReductionModeNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCoverageReductionModeNV") int coverageReductionMode) {
		try {
			vkCmdSetCoverageReductionModeNV.invokeExact(commandBuffer, coverageReductionMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthClampRangeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthClampRangeEXT", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetDepthClampRangeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDepthClampModeEXT") int depthClampMode, /* optional */ @NativeType("VkDepthClampRangeEXT*") long pDepthClampRange) {
		try {
			vkCmdSetDepthClampRangeEXT.invokeExact(commandBuffer, depthClampMode, pDepthClampRange);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}