package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkKhrTimelineSemaphore {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001;
	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002;
	public static final int VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003;
	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004;
	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005;
	public static final int VK_SEMAPHORE_TYPE_BINARY_KHR = 0;
	public static final int VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1;
	public static final int VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1;
	private static final MethodHandle vkGetSemaphoreCounterValueKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetSemaphoreCounterValueKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetSemaphoreCounterValueKHR(@NativeType("VkDevice*") long device, @NativeType("VkSemaphore*") long semaphore, @NativeType("uint64_t*") long pValue) {
		try {
			return (int) vkGetSemaphoreCounterValueKHR.invokeExact(device, semaphore, pValue);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkWaitSemaphoresKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkWaitSemaphoresKHR", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_TIMEOUT
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkWaitSemaphoresKHR(@NativeType("VkDevice*") long device, @NativeType("VkSemaphoreWaitInfo*") long pWaitInfo, @NativeType("uint64_t") long timeout) {
		try {
			return (int) vkWaitSemaphoresKHR.invokeExact(device, pWaitInfo, timeout);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSignalSemaphoreKHR = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSignalSemaphoreKHR", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSignalSemaphoreKHR(@NativeType("VkDevice*") long device, @NativeType("VkSemaphoreSignalInfo*") long pSignalInfo) {
		try {
			return (int) vkSignalSemaphoreKHR.invokeExact(device, pSignalInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}