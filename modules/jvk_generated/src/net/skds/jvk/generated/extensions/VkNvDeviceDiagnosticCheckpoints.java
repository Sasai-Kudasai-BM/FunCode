package net.skds.jvk.generated.extensions;
import net.skds.lib2.annotations.AutoGenerated;
import static net.skds.lib2.natives.SafeLinker.*;
import net.skds.jvk.VKDefinitions;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
public final class VkNvDeviceDiagnosticCheckpoints {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 0;

	public static final int VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1;

	private static final MethodHandle vkCmdSetCheckpointNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkCmdSetCheckpointNV", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdSetCheckpointNV(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("void*") long pCheckpointMarker) {
		try {
			vkCmdSetCheckpointNV.invokeExact(commandBuffer, pCheckpointMarker);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkGetQueueCheckpointDataNV = createHandle(VKDefinitions.LIBRARY_LOOKUP, "vkGetQueueCheckpointDataNV", VOID, LONG, LONG, LONG);

	@NativeType("void")
	public static void vkGetQueueCheckpointDataNV(@NativeType("VkQueue*") long queue, @NativeType("uint32_t*") /*optional*/ long pCheckpointDataCount, @NativeType("VkCheckpointDataNV*") /*optional*/ long pCheckpointData) {
		try {
			vkGetQueueCheckpointDataNV.invokeExact(queue, pCheckpointDataCount, pCheckpointData);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}