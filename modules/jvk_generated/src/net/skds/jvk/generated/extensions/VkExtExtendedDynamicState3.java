package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtExtendedDynamicState3 {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001;
	public static final int VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003;
	public static final int VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004;
	public static final int VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005;
	public static final int VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006;
	public static final int VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007;
	public static final int VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008;
	public static final int VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009;
	public static final int VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010;
	public static final int VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011;
	public static final int VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012;
	private static final MethodHandle vkCmdSetDepthClampEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthClampEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthClampEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthClampEnable) {
		try {
			vkCmdSetDepthClampEnableEXT.invokeExact(commandBuffer, depthClampEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPolygonModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPolygonModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPolygonModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPolygonMode") int polygonMode) {
		try {
			vkCmdSetPolygonModeEXT.invokeExact(commandBuffer, polygonMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetRasterizationSamplesEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRasterizationSamplesEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetRasterizationSamplesEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkSampleCountFlagBits") int rasterizationSamples) {
		try {
			vkCmdSetRasterizationSamplesEXT.invokeExact(commandBuffer, rasterizationSamples);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetSampleMaskEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetSampleMaskEXT", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetSampleMaskEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkSampleCountFlagBits") int samples, @NativeType("VkSampleMask*") long pSampleMask) {
		try {
			vkCmdSetSampleMaskEXT.invokeExact(commandBuffer, samples, pSampleMask);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetAlphaToCoverageEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetAlphaToCoverageEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetAlphaToCoverageEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean alphaToCoverageEnable) {
		try {
			vkCmdSetAlphaToCoverageEnableEXT.invokeExact(commandBuffer, alphaToCoverageEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetAlphaToOneEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetAlphaToOneEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetAlphaToOneEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean alphaToOneEnable) {
		try {
			vkCmdSetAlphaToOneEnableEXT.invokeExact(commandBuffer, alphaToOneEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetLogicOpEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLogicOpEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetLogicOpEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean logicOpEnable) {
		try {
			vkCmdSetLogicOpEnableEXT.invokeExact(commandBuffer, logicOpEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetColorBlendEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorBlendEnableEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorBlendEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, @NativeType("VkBool32*") long pColorBlendEnables) {
		try {
			vkCmdSetColorBlendEnableEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetColorBlendEquationEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorBlendEquationEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorBlendEquationEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, @NativeType("VkColorBlendEquationEXT*") long pColorBlendEquations) {
		try {
			vkCmdSetColorBlendEquationEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetColorWriteMaskEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorWriteMaskEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorWriteMaskEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, /* optional */ @NativeType("VkColorComponentFlags*") long pColorWriteMasks) {
		try {
			vkCmdSetColorWriteMaskEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002;
	private static final MethodHandle vkCmdSetTessellationDomainOriginEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetTessellationDomainOriginEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetTessellationDomainOriginEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkTessellationDomainOrigin") int domainOrigin) {
		try {
			vkCmdSetTessellationDomainOriginEXT.invokeExact(commandBuffer, domainOrigin);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013;
	private static final MethodHandle vkCmdSetRasterizationStreamEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRasterizationStreamEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetRasterizationStreamEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int rasterizationStream) {
		try {
			vkCmdSetRasterizationStreamEXT.invokeExact(commandBuffer, rasterizationStream);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014;
	public static final int VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015;
	private static final MethodHandle vkCmdSetConservativeRasterizationModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetConservativeRasterizationModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetConservativeRasterizationModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkConservativeRasterizationModeEXT") int conservativeRasterizationMode) {
		try {
			vkCmdSetConservativeRasterizationModeEXT.invokeExact(commandBuffer, conservativeRasterizationMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetExtraPrimitiveOverestimationSizeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetExtraPrimitiveOverestimationSizeEXT", VOID, LONG, FLOAT);
	
	@NativeType("void")
	public static void vkCmdSetExtraPrimitiveOverestimationSizeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("float") float extraPrimitiveOverestimationSize) {
		try {
			vkCmdSetExtraPrimitiveOverestimationSizeEXT.invokeExact(commandBuffer, extraPrimitiveOverestimationSize);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016;
	private static final MethodHandle vkCmdSetDepthClipEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthClipEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthClipEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean depthClipEnable) {
		try {
			vkCmdSetDepthClipEnableEXT.invokeExact(commandBuffer, depthClipEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017;
	private static final MethodHandle vkCmdSetSampleLocationsEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetSampleLocationsEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetSampleLocationsEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean sampleLocationsEnable) {
		try {
			vkCmdSetSampleLocationsEnableEXT.invokeExact(commandBuffer, sampleLocationsEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018;
	private static final MethodHandle vkCmdSetColorBlendAdvancedEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetColorBlendAdvancedEXT", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetColorBlendAdvancedEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstAttachment, @NativeType("uint32_t") int attachmentCount, @NativeType("VkColorBlendAdvancedEXT*") long pColorBlendAdvanced) {
		try {
			vkCmdSetColorBlendAdvancedEXT.invokeExact(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019;
	private static final MethodHandle vkCmdSetProvokingVertexModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetProvokingVertexModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetProvokingVertexModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkProvokingVertexModeEXT") int provokingVertexMode) {
		try {
			vkCmdSetProvokingVertexModeEXT.invokeExact(commandBuffer, provokingVertexMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020;
	public static final int VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021;
	private static final MethodHandle vkCmdSetLineRasterizationModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLineRasterizationModeEXT", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetLineRasterizationModeEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkLineRasterizationModeEXT") int lineRasterizationMode) {
		try {
			vkCmdSetLineRasterizationModeEXT.invokeExact(commandBuffer, lineRasterizationMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetLineStippleEnableEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetLineStippleEnableEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetLineStippleEnableEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean stippledLineEnable) {
		try {
			vkCmdSetLineStippleEnableEXT.invokeExact(commandBuffer, stippledLineEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022;
	private static final MethodHandle vkCmdSetDepthClipNegativeOneToOneEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthClipNegativeOneToOneEXT", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetDepthClipNegativeOneToOneEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean negativeOneToOne) {
		try {
			vkCmdSetDepthClipNegativeOneToOneEXT.invokeExact(commandBuffer, negativeOneToOne ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023;
	private static final MethodHandle vkCmdSetViewportWScalingEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetViewportWScalingEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetViewportWScalingEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean viewportWScalingEnable) {
		try {
			vkCmdSetViewportWScalingEnableNV.invokeExact(commandBuffer, viewportWScalingEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024;
	private static final MethodHandle vkCmdSetViewportSwizzleNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetViewportSwizzleNV", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetViewportSwizzleNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstViewport, @NativeType("uint32_t") int viewportCount, @NativeType("VkViewportSwizzleNV*") long pViewportSwizzles) {
		try {
			vkCmdSetViewportSwizzleNV.invokeExact(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025;
	public static final int VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026;
	private static final MethodHandle vkCmdSetCoverageToColorEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageToColorEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetCoverageToColorEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean coverageToColorEnable) {
		try {
			vkCmdSetCoverageToColorEnableNV.invokeExact(commandBuffer, coverageToColorEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageToColorLocationNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageToColorLocationNV", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCoverageToColorLocationNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int coverageToColorLocation) {
		try {
			vkCmdSetCoverageToColorLocationNV.invokeExact(commandBuffer, coverageToColorLocation);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027;
	public static final int VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028;
	public static final int VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029;
	private static final MethodHandle vkCmdSetCoverageModulationModeNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageModulationModeNV", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCoverageModulationModeNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCoverageModulationModeNV") int coverageModulationMode) {
		try {
			vkCmdSetCoverageModulationModeNV.invokeExact(commandBuffer, coverageModulationMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageModulationTableEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageModulationTableEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetCoverageModulationTableEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean coverageModulationTableEnable) {
		try {
			vkCmdSetCoverageModulationTableEnableNV.invokeExact(commandBuffer, coverageModulationTableEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoverageModulationTableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageModulationTableNV", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetCoverageModulationTableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int coverageModulationTableCount, @NativeType("float*") long pCoverageModulationTable) {
		try {
			vkCmdSetCoverageModulationTableNV.invokeExact(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030;
	private static final MethodHandle vkCmdSetShadingRateImageEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetShadingRateImageEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetShadingRateImageEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean shadingRateImageEnable) {
		try {
			vkCmdSetShadingRateImageEnableNV.invokeExact(commandBuffer, shadingRateImageEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031;
	private static final MethodHandle vkCmdSetRepresentativeFragmentTestEnableNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRepresentativeFragmentTestEnableNV", VOID, LONG, BOOLEAN);
	
	@NativeType("void")
	public static void vkCmdSetRepresentativeFragmentTestEnableNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") boolean representativeFragmentTestEnable) {
		try {
			vkCmdSetRepresentativeFragmentTestEnableNV.invokeExact(commandBuffer, representativeFragmentTestEnable ? (int) 1 : (int) 0);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032;
	private static final MethodHandle vkCmdSetCoverageReductionModeNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoverageReductionModeNV", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCoverageReductionModeNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCoverageReductionModeNV") int coverageReductionMode) {
		try {
			vkCmdSetCoverageReductionModeNV.invokeExact(commandBuffer, coverageReductionMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}