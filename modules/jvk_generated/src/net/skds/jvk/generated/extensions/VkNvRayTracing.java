package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvRayTracing {
	
	public static final int VK_SHADER_UNUSED_NV = 0;
	public static final int VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001;
	public static final int VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003;
	public static final int VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004;
	public static final int VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005;
	public static final int VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006;
	public static final int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009;
	public static final int VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011;
	public static final int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012;
	public static final int VK_SHADER_STAGE_RAYGEN_BIT_NV = 256;
	public static final int VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512;
	public static final int VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024;
	public static final int VK_SHADER_STAGE_MISS_BIT_NV = 2048;
	public static final int VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096;
	public static final int VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192;
	public static final int VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152;
	public static final int VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432;
	public static final int VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024;
	public static final int VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000;
	public static final int VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000;
	public static final int VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152;
	public static final int VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304;
	public static final int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000;
	public static final int VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32;
	public static final int VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000;
	public static final int VK_INDEX_TYPE_NONE_NV = 1000165000;
	public static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0;
	public static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1;
	public static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2;
	public static final int VK_GEOMETRY_TYPE_TRIANGLES_NV = 0;
	public static final int VK_GEOMETRY_TYPE_AABBS_NV = 1;
	public static final int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0;
	public static final int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1;
	public static final int VK_GEOMETRY_OPAQUE_BIT_NV = 1;
	public static final int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2;
	public static final int VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1;
	public static final int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2;
	public static final int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4;
	public static final int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8;
	public static final int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16;
	public static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0;
	public static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1;
	private static final MethodHandle vkCreateAccelerationStructureNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateAccelerationStructureNV", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateAccelerationStructureNV(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureCreateInfoNV*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkAccelerationStructureNV**") long pAccelerationStructure) {
		try {
			return (int) vkCreateAccelerationStructureNV.invokeExact(device, pCreateInfo, pAllocator, pAccelerationStructure);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyAccelerationStructureNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyAccelerationStructureNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyAccelerationStructureNV(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkAccelerationStructureNV*") long accelerationStructure, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyAccelerationStructureNV.invokeExact(device, accelerationStructure, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetAccelerationStructureMemoryRequirementsNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetAccelerationStructureMemoryRequirementsNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetAccelerationStructureMemoryRequirementsNV(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureMemoryRequirementsInfoNV*") long pInfo, @NativeType("VkMemoryRequirements2KHR*") long pMemoryRequirements) {
		try {
			vkGetAccelerationStructureMemoryRequirementsNV.invokeExact(device, pInfo, pMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkBindAccelerationStructureMemoryNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkBindAccelerationStructureMemoryNV", INT, LONG, INT, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkBindAccelerationStructureMemoryNV(@NativeType("VkDevice*") long device, @NativeType("uint32_t") int bindInfoCount, @NativeType("VkBindAccelerationStructureMemoryInfoNV*") long pBindInfos) {
		try {
			return (int) vkBindAccelerationStructureMemoryNV.invokeExact(device, bindInfoCount, pBindInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBuildAccelerationStructureNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBuildAccelerationStructureNV", VOID, LONG, LONG, LONG, LONG, BOOLEAN, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBuildAccelerationStructureNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkAccelerationStructureInfoNV*") long pInfo, /* optional */ @NativeType("VkBuffer*") long instanceData, @NativeType("VkDeviceSize") long instanceOffset, @NativeType("VkBool32") boolean update, @NativeType("VkAccelerationStructureNV*") long dst, /* optional */ @NativeType("VkAccelerationStructureNV*") long src, @NativeType("VkBuffer*") long scratch, @NativeType("VkDeviceSize") long scratchOffset) {
		try {
			vkCmdBuildAccelerationStructureNV.invokeExact(commandBuffer, pInfo, instanceData, instanceOffset, update ? (int) 1 : (int) 0, dst, src, scratch, scratchOffset);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyAccelerationStructureNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyAccelerationStructureNV", VOID, LONG, LONG, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdCopyAccelerationStructureNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkAccelerationStructureNV*") long dst, @NativeType("VkAccelerationStructureNV*") long src, @NativeType("VkCopyAccelerationStructureModeKHR") int mode) {
		try {
			vkCmdCopyAccelerationStructureNV.invokeExact(commandBuffer, dst, src, mode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdTraceRaysNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdTraceRaysNV", VOID, LONG, LONG, LONG, LONG, LONG, LONG, LONG, LONG, LONG, LONG, LONG, LONG, INT, INT, INT);
	
	@NativeType("void")
	public static void vkCmdTraceRaysNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBuffer*") long raygenShaderBindingTableBuffer, @NativeType("VkDeviceSize") long raygenShaderBindingOffset, /* optional */ @NativeType("VkBuffer*") long missShaderBindingTableBuffer, @NativeType("VkDeviceSize") long missShaderBindingOffset, @NativeType("VkDeviceSize") long missShaderBindingStride, /* optional */ @NativeType("VkBuffer*") long hitShaderBindingTableBuffer, @NativeType("VkDeviceSize") long hitShaderBindingOffset, @NativeType("VkDeviceSize") long hitShaderBindingStride, /* optional */ @NativeType("VkBuffer*") long callableShaderBindingTableBuffer, @NativeType("VkDeviceSize") long callableShaderBindingOffset, @NativeType("VkDeviceSize") long callableShaderBindingStride, @NativeType("uint32_t") int width, @NativeType("uint32_t") int height, @NativeType("uint32_t") int depth) {
		try {
			vkCmdTraceRaysNV.invokeExact(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCreateRayTracingPipelinesNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreateRayTracingPipelinesNV", INT, LONG, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreateRayTracingPipelinesNV(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkPipelineCache*") long pipelineCache, @NativeType("uint32_t") int createInfoCount, @NativeType("VkRayTracingPipelineCreateInfoNV*") long pCreateInfos, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkPipeline**") long pPipelines) {
		try {
			return (int) vkCreateRayTracingPipelinesNV.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetRayTracingShaderGroupHandlesNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetRayTracingShaderGroupHandlesNV", INT, LONG, LONG, INT, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetRayTracingShaderGroupHandlesNV(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long pipeline, @NativeType("uint32_t") int firstGroup, @NativeType("uint32_t") int groupCount, @NativeType("size_t") long dataSize, @NativeType("void*") long pData) {
		try {
			return (int) vkGetRayTracingShaderGroupHandlesNV.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetAccelerationStructureHandleNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetAccelerationStructureHandleNV", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetAccelerationStructureHandleNV(@NativeType("VkDevice*") long device, @NativeType("VkAccelerationStructureNV*") long accelerationStructure, @NativeType("size_t") long dataSize, @NativeType("void*") long pData) {
		try {
			return (int) vkGetAccelerationStructureHandleNV.invokeExact(device, accelerationStructure, dataSize, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWriteAccelerationStructuresPropertiesNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWriteAccelerationStructuresPropertiesNV", VOID, LONG, INT, LONG, INT, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdWriteAccelerationStructuresPropertiesNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int accelerationStructureCount, @NativeType("VkAccelerationStructureNV**") long pAccelerationStructures, @NativeType("VkQueryType") int queryType, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int firstQuery) {
		try {
			vkCmdWriteAccelerationStructuresPropertiesNV.invokeExact(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCompileDeferredNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCompileDeferredNV", INT, LONG, LONG, INT);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCompileDeferredNV(@NativeType("VkDevice*") long device, @NativeType("VkPipeline*") long pipeline, @NativeType("uint32_t") int shader) {
		try {
			return (int) vkCompileDeferredNV.invokeExact(device, pipeline, shader);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000;
}