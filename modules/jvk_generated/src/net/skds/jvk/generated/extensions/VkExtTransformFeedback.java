package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtTransformFeedback {
	
	private static final MethodHandle vkCmdBindTransformFeedbackBuffersEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBindTransformFeedbackBuffersEXT", VOID, LONG, INT, INT, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBindTransformFeedbackBuffersEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstBinding, @NativeType("uint32_t") int bindingCount, @NativeType("VkBuffer**") long pBuffers, @NativeType("VkDeviceSize*") long pOffsets, /* optional */ @NativeType("VkDeviceSize*") long pSizes) {
		try {
			vkCmdBindTransformFeedbackBuffersEXT.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBeginTransformFeedbackEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBeginTransformFeedbackEXT", VOID, LONG, INT, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBeginTransformFeedbackEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstCounterBuffer, /* optional */ @NativeType("uint32_t") int counterBufferCount, @NativeType("VkBuffer**") long pCounterBuffers, /* optional */ @NativeType("VkDeviceSize*") long pCounterBufferOffsets) {
		try {
			vkCmdBeginTransformFeedbackEXT.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdEndTransformFeedbackEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdEndTransformFeedbackEXT", VOID, LONG, INT, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdEndTransformFeedbackEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstCounterBuffer, /* optional */ @NativeType("uint32_t") int counterBufferCount, @NativeType("VkBuffer**") long pCounterBuffers, /* optional */ @NativeType("VkDeviceSize*") long pCounterBufferOffsets) {
		try {
			vkCmdEndTransformFeedbackEXT.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBeginQueryIndexedEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBeginQueryIndexedEXT", VOID, LONG, LONG, INT, INT, INT);
	
	@NativeType("void")
	public static void vkCmdBeginQueryIndexedEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int query, /* optional */ @NativeType("VkQueryControlFlags") int flags, @NativeType("uint32_t") int index) {
		try {
			vkCmdBeginQueryIndexedEXT.invokeExact(commandBuffer, queryPool, query, flags, index);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdEndQueryIndexedEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdEndQueryIndexedEXT", VOID, LONG, LONG, INT, INT);
	
	@NativeType("void")
	public static void vkCmdEndQueryIndexedEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int query, @NativeType("uint32_t") int index) {
		try {
			vkCmdEndQueryIndexedEXT.invokeExact(commandBuffer, queryPool, query, index);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDrawIndirectByteCountEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDrawIndirectByteCountEXT", VOID, LONG, INT, INT, LONG, LONG, INT, INT);
	
	@NativeType("void")
	public static void vkCmdDrawIndirectByteCountEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int instanceCount, @NativeType("uint32_t") int firstInstance, @NativeType("VkBuffer*") long counterBuffer, @NativeType("VkDeviceSize") long counterBufferOffset, @NativeType("uint32_t") int counterOffset, @NativeType("uint32_t") int vertexStride) {
		try {
			vkCmdDrawIndirectByteCountEXT.invokeExact(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 0;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 2;
	public static final int VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 4;
	public static final int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048;
	public static final int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096;
	public static final int VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432;
	public static final int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864;
	public static final int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728;
	public static final int VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216;
}