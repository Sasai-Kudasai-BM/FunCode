package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvLowLatency2 {
	
	public static final int VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000;
	public static final int VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001;
	public static final int VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002;
	public static final int VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003;
	public static final int VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004;
	public static final int VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005;
	public static final int VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006;
	public static final int VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007;
	public static final int VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008;
	private static final MethodHandle vkSetLatencySleepModeNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetLatencySleepModeNV", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_INITIALIZATION_FAILED
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSetLatencySleepModeNV(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain, @NativeType("VkLatencySleepModeInfoNV*") long pSleepModeInfo) {
		try {
			return (int) vkSetLatencySleepModeNV.invokeExact(device, swapchain, pSleepModeInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkLatencySleepNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkLatencySleepNV", INT, LONG, LONG, LONG);
	
	/** successcodes = VK_SUCCESS **/
	@NativeType("VkResult")
	public static int vkLatencySleepNV(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain, @NativeType("VkLatencySleepInfoNV*") long pSleepInfo) {
		try {
			return (int) vkLatencySleepNV.invokeExact(device, swapchain, pSleepInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSetLatencyMarkerNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetLatencyMarkerNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkSetLatencyMarkerNV(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain, @NativeType("VkSetLatencyMarkerInfoNV*") long pLatencyMarkerInfo) {
		try {
			vkSetLatencyMarkerNV.invokeExact(device, swapchain, pLatencyMarkerInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetLatencyTimingsNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetLatencyTimingsNV", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetLatencyTimingsNV(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain, @NativeType("VkGetLatencyMarkerInfoNV*") long pLatencyMarkerInfo) {
		try {
			vkGetLatencyTimingsNV.invokeExact(device, swapchain, pLatencyMarkerInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkQueueNotifyOutOfBandNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkQueueNotifyOutOfBandNV", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkQueueNotifyOutOfBandNV(@NativeType("VkQueue*") long queue, @NativeType("VkOutOfBandQueueTypeInfoNV*") long pQueueTypeInfo) {
		try {
			vkQueueNotifyOutOfBandNV.invokeExact(queue, pQueueTypeInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}