package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkNvShadingRateImage {
	
	public static final int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 0;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 2;
	public static final int VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 3;
	public static final int VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 4;
	public static final int VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608;
	public static final int VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256;
	public static final int VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 5;
	public static final int VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 6;
	private static final MethodHandle vkCmdBindShadingRateImageNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBindShadingRateImageNV", VOID, LONG, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdBindShadingRateImageNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("VkImageView*") long imageView, @NativeType("VkImageLayout") int imageLayout) {
		try {
			vkCmdBindShadingRateImageNV.invokeExact(commandBuffer, imageView, imageLayout);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetViewportShadingRatePaletteNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetViewportShadingRatePaletteNV", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetViewportShadingRatePaletteNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstViewport, @NativeType("uint32_t") int viewportCount, @NativeType("VkShadingRatePaletteNV*") long pShadingRatePalettes) {
		try {
			vkCmdSetViewportShadingRatePaletteNV.invokeExact(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetCoarseSampleOrderNV = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCoarseSampleOrderNV", VOID, LONG, INT, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetCoarseSampleOrderNV(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCoarseSampleOrderTypeNV") int sampleOrderType, /* optional */ @NativeType("uint32_t") int customSampleOrderCount, @NativeType("VkCoarseSampleOrderCustomNV*") long pCustomSampleOrders) {
		try {
			vkCmdSetCoarseSampleOrderNV.invokeExact(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}