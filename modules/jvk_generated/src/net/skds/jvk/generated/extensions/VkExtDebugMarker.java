package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtDebugMarker {
	
	public static final int VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000;
	public static final int VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001;
	public static final int VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002;
	private static final MethodHandle vkDebugMarkerSetObjectTagEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDebugMarkerSetObjectTagEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkDebugMarkerSetObjectTagEXT(@NativeType("VkDevice*") long device, @NativeType("VkDebugMarkerObjectTagInfoEXT*") long pTagInfo) {
		try {
			return (int) vkDebugMarkerSetObjectTagEXT.invokeExact(device, pTagInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDebugMarkerSetObjectNameEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDebugMarkerSetObjectNameEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkDebugMarkerSetObjectNameEXT(@NativeType("VkDevice*") long device, @NativeType("VkDebugMarkerObjectNameInfoEXT*") long pNameInfo) {
		try {
			return (int) vkDebugMarkerSetObjectNameEXT.invokeExact(device, pNameInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDebugMarkerBeginEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDebugMarkerBeginEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdDebugMarkerBeginEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDebugMarkerMarkerInfoEXT*") long pMarkerInfo) {
		try {
			vkCmdDebugMarkerBeginEXT.invokeExact(commandBuffer, pMarkerInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDebugMarkerEndEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDebugMarkerEndEXT", VOID, LONG);
	
	@NativeType("void")
	public static void vkCmdDebugMarkerEndEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer) {
		try {
			vkCmdDebugMarkerEndEXT.invokeExact(commandBuffer);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdDebugMarkerInsertEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdDebugMarkerInsertEXT", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdDebugMarkerInsertEXT(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDebugMarkerMarkerInfoEXT*") long pMarkerInfo) {
		try {
			vkCmdDebugMarkerInsertEXT.invokeExact(commandBuffer, pMarkerInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}