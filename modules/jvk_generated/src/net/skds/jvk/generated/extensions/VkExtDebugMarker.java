package net.skds.jvk.generated.extensions;
import net.skds.jvk.VKDefinitions;
import static net.skds.ninvoker.NInvoker.*;
import net.skds.lib2.utils.annotations.AutoGenerated;
import net.skds.jvk.annotation.NativeType;
import java.lang.invoke.MethodHandle;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkExtDebugMarker {


	public static final boolean INITIALIZED = VKDefinitions.INITIALIZED;

	public static final int VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 0;

	public static final int VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1;

	public static final int VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 2;

	private static final MethodHandle vkDebugMarkerSetObjectTagEXT = createHandle("vkDebugMarkerSetObjectTagEXT", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkDebugMarkerSetObjectTagEXT(@NativeType("VkDevice*") long device, @NativeType("VkDebugMarkerObjectTagInfoEXT*") /*external sync*/ long pTagInfo) {
		try {
			return (int) vkDebugMarkerSetObjectTagEXT.invokeExact(device, pTagInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkDebugMarkerSetObjectNameEXT = createHandle("vkDebugMarkerSetObjectNameEXT", INT, LONG, LONG);

	/**
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY
	*/
	@NativeType("VkResult")
	public static int vkDebugMarkerSetObjectNameEXT(@NativeType("VkDevice*") long device, @NativeType("VkDebugMarkerObjectNameInfoEXT*") /*external sync*/ long pNameInfo) {
		try {
			return (int) vkDebugMarkerSetObjectNameEXT.invokeExact(device, pNameInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdDebugMarkerBeginEXT = createHandle("vkCmdDebugMarkerBeginEXT", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdDebugMarkerBeginEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkDebugMarkerMarkerInfoEXT*") long pMarkerInfo) {
		try {
			vkCmdDebugMarkerBeginEXT.invokeExact(commandBuffer, pMarkerInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdDebugMarkerEndEXT = createHandle("vkCmdDebugMarkerEndEXT", VOID, LONG);

	@NativeType("void")
	public static void vkCmdDebugMarkerEndEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer) {
		try {
			vkCmdDebugMarkerEndEXT.invokeExact(commandBuffer);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}

	private static final MethodHandle vkCmdDebugMarkerInsertEXT = createHandle("vkCmdDebugMarkerInsertEXT", VOID, LONG, LONG);

	@NativeType("void")
	public static void vkCmdDebugMarkerInsertEXT(@NativeType("VkCommandBuffer*") /*external sync*/ long commandBuffer, @NativeType("VkDebugMarkerMarkerInfoEXT*") long pMarkerInfo) {
		try {
			vkCmdDebugMarkerInsertEXT.invokeExact(commandBuffer, pMarkerInfo);
		} catch (Throwable e) { throw new RuntimeException(e); }
	}
}