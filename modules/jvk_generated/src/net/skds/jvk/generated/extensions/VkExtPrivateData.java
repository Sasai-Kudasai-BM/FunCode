package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtPrivateData {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000;
	public static final int VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001;
	public static final int VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002;
	public static final int VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000;
	
	// Will add VkPrivateDataSlotCreateFlagBits when bits are defined in the future
	
	private static final MethodHandle vkCreatePrivateDataSlotEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreatePrivateDataSlotEXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreatePrivateDataSlotEXT(@NativeType("VkDevice*") long device, @NativeType("VkPrivateDataSlotCreateInfo*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkPrivateDataSlot**") long pPrivateDataSlot) {
		try {
			return (int) vkCreatePrivateDataSlotEXT.invokeExact(device, pCreateInfo, pAllocator, pPrivateDataSlot);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyPrivateDataSlotEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyPrivateDataSlotEXT", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyPrivateDataSlotEXT(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkPrivateDataSlot*") long privateDataSlot, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyPrivateDataSlotEXT.invokeExact(device, privateDataSlot, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSetPrivateDataEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetPrivateDataEXT", INT, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSetPrivateDataEXT(@NativeType("VkDevice*") long device, @NativeType("VkObjectType") int objectType, @NativeType("uint64_t") long objectHandle, @NativeType("VkPrivateDataSlot*") long privateDataSlot, @NativeType("uint64_t") long data) {
		try {
			return (int) vkSetPrivateDataEXT.invokeExact(device, objectType, objectHandle, privateDataSlot, data);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPrivateDataEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPrivateDataEXT", VOID, LONG, INT, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetPrivateDataEXT(@NativeType("VkDevice*") long device, @NativeType("VkObjectType") int objectType, @NativeType("uint64_t") long objectHandle, @NativeType("VkPrivateDataSlot*") long privateDataSlot, @NativeType("uint64_t*") long pData) {
		try {
			vkGetPrivateDataEXT.invokeExact(device, objectType, objectHandle, privateDataSlot, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}