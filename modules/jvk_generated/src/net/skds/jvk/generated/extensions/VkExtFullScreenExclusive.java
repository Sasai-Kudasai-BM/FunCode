package net.skds.jvk.generated.extensions;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VkExtFullScreenExclusive {
	
	public static final int VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 0;
	public static final int VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 2;
	public static final int VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = 0;
	private static final MethodHandle vkGetPhysicalDeviceSurfacePresentModes2EXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceSurfacePresentModes2EXT", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceSurfacePresentModes2EXT(@NativeType("VkPhysicalDevice*") long physicalDevice, @NativeType("VkPhysicalDeviceSurfaceInfo2KHR*") long pSurfaceInfo, /* optional */ @NativeType("uint32_t*") long pPresentModeCount, /* optional */ @NativeType("VkPresentModeKHR*") long pPresentModes) {
		try {
			return (int) vkGetPhysicalDeviceSurfacePresentModes2EXT.invokeExact(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkAcquireFullScreenExclusiveModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkAcquireFullScreenExclusiveModeEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkAcquireFullScreenExclusiveModeEXT(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain) {
		try {
			return (int) vkAcquireFullScreenExclusiveModeEXT.invokeExact(device, swapchain);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkReleaseFullScreenExclusiveModeEXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkReleaseFullScreenExclusiveModeEXT", INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkReleaseFullScreenExclusiveModeEXT(@NativeType("VkDevice*") long device, @NativeType("VkSwapchainKHR*") long swapchain) {
		try {
			return (int) vkReleaseFullScreenExclusiveModeEXT.invokeExact(device, swapchain);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1;
	private static final MethodHandle vkGetDeviceGroupSurfacePresentModes2EXT = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceGroupSurfacePresentModes2EXT", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetDeviceGroupSurfacePresentModes2EXT(@NativeType("VkDevice*") long device, @NativeType("VkPhysicalDeviceSurfaceInfo2KHR*") long pSurfaceInfo, /* optional */ @NativeType("VkDeviceGroupPresentModeFlagsKHR*") long pModes) {
		try {
			return (int) vkGetDeviceGroupSurfacePresentModes2EXT.invokeExact(device, pSurfaceInfo, pModes);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}