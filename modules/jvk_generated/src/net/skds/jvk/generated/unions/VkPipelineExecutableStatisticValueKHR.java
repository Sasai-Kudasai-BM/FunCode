package net.skds.jvk.generated.unions;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* union VkPipelineExecutableStatisticValueKHR {
* 	VkBool32;
* 	int64_t;
* 	uint64_t;
* 	double;
* };
*</pre>
**/
@AutoGenerated
public final class VkPipelineExecutableStatisticValueKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = unionLayout(
			JAVA_INT,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_DOUBLE
	);
	
	public VkPipelineExecutableStatisticValueKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineExecutableStatisticValueKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineExecutableStatisticValueKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkBool32")
	public int asInt() {
		return (int) INT_HANDLE.get(this.segment, this.offset);
	}
	
	@NativeType("VkBool32")
	public VkPipelineExecutableStatisticValueKHR asInt(int value) {
		INT_HANDLE.set(this.segment, this.offset, value);
		return this;
	}
	
	@NativeType("int64_t")
	public long asLong() {
		return (long) LONG_HANDLE.get(this.segment, this.offset);
	}
	
	@NativeType("int64_t")
	public VkPipelineExecutableStatisticValueKHR asLong(long value) {
		LONG_HANDLE.set(this.segment, this.offset, value);
		return this;
	}
	
	@NativeType("double")
	public double asDouble() {
		return (double) DOUBLE_HANDLE.get(this.segment, this.offset);
	}
	
	@NativeType("double")
	public VkPipelineExecutableStatisticValueKHR asDouble(double value) {
		DOUBLE_HANDLE.set(this.segment, this.offset, value);
		return this;
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}