package net.skds.jvk.generated.unions;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* union VkClearColorValue {
* 	float[4];
* 	int32_t[4];
* 	uint32_t[4];
* };
*</pre>
**/
@AutoGenerated
public final class VkClearColorValue extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = unionLayout(
			sequenceLayout(4, JAVA_FLOAT),
			sequenceLayout(4, JAVA_INT),
			sequenceLayout(4, JAVA_INT)
	);
	
	public VkClearColorValue() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClearColorValue(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClearColorValue(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("float[4]")
	public float asFloat(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + ValueLayout.JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[4]")
	public VkClearColorValue asFloat(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + ValueLayout.JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("int32_t[4]")
	public int asInt(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + ValueLayout.JAVA_INT.byteSize() * i);
	}
	
	@NativeType("int32_t[4]")
	public VkClearColorValue asInt(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + ValueLayout.JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}