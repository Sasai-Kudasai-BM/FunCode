package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkIndirectCommandsLayoutCreateInfoNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkIndirectCommandsLayoutUsageFlagsNV flags;
* 	VkPipelineBindPoint pipelineBindPoint;
* 	uint32_t tokenCount;
* 	// pad (4)
* 	VkIndirectCommandsLayoutTokenNV* pTokens;
* 	uint32_t streamCount;
* 	// pad (4)
* 	uint32_t* pStreamStrides;
* };
*</pre>
**/
@AutoGenerated
public final class VkIndirectCommandsLayoutCreateInfoNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int PIPELINE_BIND_POINT_OFFSET = 20;
	private static final int TOKEN_COUNT_OFFSET = 24;
	private static final int P_TOKENS_OFFSET = 32;
	private static final int STREAM_COUNT_OFFSET = 40;
	private static final int P_STREAM_STRIDES_OFFSET = 48;
	
	public VkIndirectCommandsLayoutCreateInfoNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsLayoutCreateInfoNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsLayoutCreateInfoNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV **/
	@NativeType("VkStructureType")
	public VkIndirectCommandsLayoutCreateInfoNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV **/
	@NativeType("VkStructureType")
	public VkIndirectCommandsLayoutCreateInfoNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000277004);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkIndirectCommandsLayoutCreateInfoNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkIndirectCommandsLayoutUsageFlagsNV")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkIndirectCommandsLayoutUsageFlagsNV")
	public VkIndirectCommandsLayoutCreateInfoNV flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelineBindPoint")
	public int pipelineBindPoint() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_BIND_POINT_OFFSET);
	}
	
	@NativeType("VkPipelineBindPoint")
	public VkIndirectCommandsLayoutCreateInfoNV pipelineBindPoint(int value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_BIND_POINT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int tokenCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TOKEN_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutCreateInfoNV tokenCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + TOKEN_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndirectCommandsLayoutTokenNV*")
	public long pTokens() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_TOKENS_OFFSET);
	}
	
	@NativeType("VkIndirectCommandsLayoutTokenNV*")
	public VkIndirectCommandsLayoutCreateInfoNV pTokens(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_TOKENS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int streamCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STREAM_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutCreateInfoNV streamCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + STREAM_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t*")
	public long pStreamStrides() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_STREAM_STRIDES_OFFSET);
	}
	
	@NativeType("uint32_t*")
	public VkIndirectCommandsLayoutCreateInfoNV pStreamStrides(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_STREAM_STRIDES_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkIndirectCommandsLayoutCreateInfoNV> {
		
		private static final StructConstructor<VkIndirectCommandsLayoutCreateInfoNV> CONSTRUCTOR = VkIndirectCommandsLayoutCreateInfoNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkIndirectCommandsLayoutCreateInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkIndirectCommandsLayoutCreateInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkIndirectCommandsLayoutCreateInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}