package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t maxIndirectPipelineCount;
* 	uint32_t maxIndirectShaderObjectCount;
* 	uint32_t maxIndirectSequenceCount;
* 	uint32_t maxIndirectCommandsTokenCount;
* 	uint32_t maxIndirectCommandsTokenOffset;
* 	uint32_t maxIndirectCommandsIndirectStride;
* 	VkIndirectCommandsInputModeFlagsEXT supportedIndirectCommandsInputModes;
* 	VkShaderStageFlags supportedIndirectCommandsShaderStages;
* 	VkShaderStageFlags supportedIndirectCommandsShaderStagesPipelineBinding;
* 	VkShaderStageFlags supportedIndirectCommandsShaderStagesShaderBinding;
* 	VkBool32 deviceGeneratedCommandsTransformFeedback;
* 	VkBool32 deviceGeneratedCommandsMultiDrawIndirectCount;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MAX_INDIRECT_PIPELINE_COUNT_OFFSET = 16;
	private static final int MAX_INDIRECT_SHADER_OBJECT_COUNT_OFFSET = 20;
	private static final int MAX_INDIRECT_SEQUENCE_COUNT_OFFSET = 24;
	private static final int MAX_INDIRECT_COMMANDS_TOKEN_COUNT_OFFSET = 28;
	private static final int MAX_INDIRECT_COMMANDS_TOKEN_OFFSET_OFFSET = 32;
	private static final int MAX_INDIRECT_COMMANDS_INDIRECT_STRIDE_OFFSET = 36;
	private static final int SUPPORTED_INDIRECT_COMMANDS_INPUT_MODES_OFFSET = 40;
	private static final int SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_OFFSET = 44;
	private static final int SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_PIPELINE_BINDING_OFFSET = 48;
	private static final int SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_SHADER_BINDING_OFFSET = 52;
	private static final int DEVICE_GENERATED_COMMANDS_TRANSFORM_FEEDBACK_OFFSET = 56;
	private static final int DEVICE_GENERATED_COMMANDS_MULTI_DRAW_INDIRECT_COUNT_OFFSET = 60;
	
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000572001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIndirectPipelineCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INDIRECT_PIPELINE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT maxIndirectPipelineCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INDIRECT_PIPELINE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIndirectShaderObjectCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INDIRECT_SHADER_OBJECT_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT maxIndirectShaderObjectCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INDIRECT_SHADER_OBJECT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIndirectSequenceCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INDIRECT_SEQUENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT maxIndirectSequenceCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INDIRECT_SEQUENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIndirectCommandsTokenCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INDIRECT_COMMANDS_TOKEN_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT maxIndirectCommandsTokenCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INDIRECT_COMMANDS_TOKEN_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIndirectCommandsTokenOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INDIRECT_COMMANDS_TOKEN_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT maxIndirectCommandsTokenOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INDIRECT_COMMANDS_TOKEN_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIndirectCommandsIndirectStride() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INDIRECT_COMMANDS_INDIRECT_STRIDE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT maxIndirectCommandsIndirectStride(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INDIRECT_COMMANDS_INDIRECT_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndirectCommandsInputModeFlagsEXT")
	public int supportedIndirectCommandsInputModes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_INPUT_MODES_OFFSET);
	}
	
	@NativeType("VkIndirectCommandsInputModeFlagsEXT")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT supportedIndirectCommandsInputModes(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_INPUT_MODES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderStageFlags")
	public int supportedIndirectCommandsShaderStages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_OFFSET);
	}
	
	@NativeType("VkShaderStageFlags")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT supportedIndirectCommandsShaderStages(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderStageFlags")
	public int supportedIndirectCommandsShaderStagesPipelineBinding() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_PIPELINE_BINDING_OFFSET);
	}
	
	@NativeType("VkShaderStageFlags")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT supportedIndirectCommandsShaderStagesPipelineBinding(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_PIPELINE_BINDING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderStageFlags")
	public int supportedIndirectCommandsShaderStagesShaderBinding() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_SHADER_BINDING_OFFSET);
	}
	
	@NativeType("VkShaderStageFlags")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT supportedIndirectCommandsShaderStagesShaderBinding(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_INDIRECT_COMMANDS_SHADER_STAGES_SHADER_BINDING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean deviceGeneratedCommandsTransformFeedback() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_GENERATED_COMMANDS_TRANSFORM_FEEDBACK_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT deviceGeneratedCommandsTransformFeedback(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_GENERATED_COMMANDS_TRANSFORM_FEEDBACK_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean deviceGeneratedCommandsMultiDrawIndirectCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_GENERATED_COMMANDS_MULTI_DRAW_INDIRECT_COUNT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT deviceGeneratedCommandsMultiDrawIndirectCount(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_GENERATED_COMMANDS_MULTI_DRAW_INDIRECT_COUNT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT> {
		
		private static final StructConstructor<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT> CONSTRUCTOR = VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}