package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceVulkan14Features {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBool32 globalPriorityQuery;
* 	VkBool32 shaderSubgroupRotate;
* 	VkBool32 shaderSubgroupRotateClustered;
* 	VkBool32 shaderFloatControls2;
* 	VkBool32 shaderExpectAssume;
* 	VkBool32 rectangularLines;
* 	VkBool32 bresenhamLines;
* 	VkBool32 smoothLines;
* 	VkBool32 stippledRectangularLines;
* 	VkBool32 stippledBresenhamLines;
* 	VkBool32 stippledSmoothLines;
* 	VkBool32 vertexAttributeInstanceRateDivisor;
* 	VkBool32 vertexAttributeInstanceRateZeroDivisor;
* 	VkBool32 indexTypeUint8;
* 	VkBool32 dynamicRenderingLocalRead;
* 	VkBool32 maintenance5;
* 	VkBool32 maintenance6;
* 	VkBool32 pipelineProtectedAccess;
* 	VkBool32 pipelineRobustness;
* 	VkBool32 hostImageCopy;
* 	VkBool32 pushDescriptor;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceVulkan14Features extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int GLOBAL_PRIORITY_QUERY_OFFSET = 16;
	private static final int SHADER_SUBGROUP_ROTATE_OFFSET = 20;
	private static final int SHADER_SUBGROUP_ROTATE_CLUSTERED_OFFSET = 24;
	private static final int SHADER_FLOAT_CONTROLS2_OFFSET = 28;
	private static final int SHADER_EXPECT_ASSUME_OFFSET = 32;
	private static final int RECTANGULAR_LINES_OFFSET = 36;
	private static final int BRESENHAM_LINES_OFFSET = 40;
	private static final int SMOOTH_LINES_OFFSET = 44;
	private static final int STIPPLED_RECTANGULAR_LINES_OFFSET = 48;
	private static final int STIPPLED_BRESENHAM_LINES_OFFSET = 52;
	private static final int STIPPLED_SMOOTH_LINES_OFFSET = 56;
	private static final int VERTEX_ATTRIBUTE_INSTANCE_RATE_DIVISOR_OFFSET = 60;
	private static final int VERTEX_ATTRIBUTE_INSTANCE_RATE_ZERO_DIVISOR_OFFSET = 64;
	private static final int INDEX_TYPE_UINT8_OFFSET = 68;
	private static final int DYNAMIC_RENDERING_LOCAL_READ_OFFSET = 72;
	private static final int MAINTENANCE5_OFFSET = 76;
	private static final int MAINTENANCE6_OFFSET = 80;
	private static final int PIPELINE_PROTECTED_ACCESS_OFFSET = 84;
	private static final int PIPELINE_ROBUSTNESS_OFFSET = 88;
	private static final int HOST_IMAGE_COPY_OFFSET = 92;
	private static final int PUSH_DESCRIPTOR_OFFSET = 96;
	
	public VkPhysicalDeviceVulkan14Features() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan14Features(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan14Features(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan14Features sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan14Features sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 55);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceVulkan14Features pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean globalPriorityQuery() {
		return (int) INT_HANDLE.get(this.segment, this.offset + GLOBAL_PRIORITY_QUERY_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features globalPriorityQuery(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + GLOBAL_PRIORITY_QUERY_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean shaderSubgroupRotate() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SUBGROUP_ROTATE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features shaderSubgroupRotate(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SUBGROUP_ROTATE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean shaderSubgroupRotateClustered() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SUBGROUP_ROTATE_CLUSTERED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features shaderSubgroupRotateClustered(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SUBGROUP_ROTATE_CLUSTERED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean shaderFloatControls2() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_FLOAT_CONTROLS2_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features shaderFloatControls2(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_FLOAT_CONTROLS2_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean shaderExpectAssume() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_EXPECT_ASSUME_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features shaderExpectAssume(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_EXPECT_ASSUME_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean rectangularLines() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RECTANGULAR_LINES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features rectangularLines(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RECTANGULAR_LINES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean bresenhamLines() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BRESENHAM_LINES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features bresenhamLines(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + BRESENHAM_LINES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean smoothLines() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SMOOTH_LINES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features smoothLines(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SMOOTH_LINES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean stippledRectangularLines() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STIPPLED_RECTANGULAR_LINES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features stippledRectangularLines(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + STIPPLED_RECTANGULAR_LINES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean stippledBresenhamLines() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STIPPLED_BRESENHAM_LINES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features stippledBresenhamLines(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + STIPPLED_BRESENHAM_LINES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean stippledSmoothLines() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STIPPLED_SMOOTH_LINES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features stippledSmoothLines(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + STIPPLED_SMOOTH_LINES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean vertexAttributeInstanceRateDivisor() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERTEX_ATTRIBUTE_INSTANCE_RATE_DIVISOR_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features vertexAttributeInstanceRateDivisor(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + VERTEX_ATTRIBUTE_INSTANCE_RATE_DIVISOR_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean vertexAttributeInstanceRateZeroDivisor() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERTEX_ATTRIBUTE_INSTANCE_RATE_ZERO_DIVISOR_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features vertexAttributeInstanceRateZeroDivisor(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + VERTEX_ATTRIBUTE_INSTANCE_RATE_ZERO_DIVISOR_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean indexTypeUint8() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDEX_TYPE_UINT8_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features indexTypeUint8(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + INDEX_TYPE_UINT8_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean dynamicRenderingLocalRead() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DYNAMIC_RENDERING_LOCAL_READ_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features dynamicRenderingLocalRead(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DYNAMIC_RENDERING_LOCAL_READ_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean maintenance5() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAINTENANCE5_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features maintenance5(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + MAINTENANCE5_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean maintenance6() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAINTENANCE6_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features maintenance6(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + MAINTENANCE6_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean pipelineProtectedAccess() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_PROTECTED_ACCESS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features pipelineProtectedAccess(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_PROTECTED_ACCESS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean pipelineRobustness() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_ROBUSTNESS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features pipelineRobustness(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_ROBUSTNESS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean hostImageCopy() {
		return (int) INT_HANDLE.get(this.segment, this.offset + HOST_IMAGE_COPY_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features hostImageCopy(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + HOST_IMAGE_COPY_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean pushDescriptor() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PUSH_DESCRIPTOR_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Features pushDescriptor(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PUSH_DESCRIPTOR_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceVulkan14Features> {
		
		private static final StructConstructor<VkPhysicalDeviceVulkan14Features> CONSTRUCTOR = VkPhysicalDeviceVulkan14Features::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceVulkan14Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceVulkan14Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceVulkan14Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}