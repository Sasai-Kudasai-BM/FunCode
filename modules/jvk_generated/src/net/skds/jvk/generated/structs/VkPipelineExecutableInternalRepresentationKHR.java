package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPipelineExecutableInternalRepresentationKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	char[256] name;
* 	char[256] description;
* 	VkBool32 isText;
* 	// pad (4)
* 	size_t dataSize;
* 	void* pData;
* };
*</pre>
**/
@AutoGenerated
public final class VkPipelineExecutableInternalRepresentationKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			sequenceLayout(256, JAVA_BYTE),
			sequenceLayout(256, JAVA_BYTE),
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int NAME_OFFSET = 16;
	private static final int DESCRIPTION_OFFSET = 272;
	private static final int IS_TEXT_OFFSET = 528;
	private static final int DATA_SIZE_OFFSET = 536;
	private static final int P_DATA_OFFSET = 544;
	
	public VkPipelineExecutableInternalRepresentationKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineExecutableInternalRepresentationKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineExecutableInternalRepresentationKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR **/
	@NativeType("VkStructureType")
	public VkPipelineExecutableInternalRepresentationKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR **/
	@NativeType("VkStructureType")
	public VkPipelineExecutableInternalRepresentationKHR sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 5);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPipelineExecutableInternalRepresentationKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("char[256]")
	public byte name(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + NAME_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[256]")
	public VkPipelineExecutableInternalRepresentationKHR name(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + NAME_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("char[256]")
	public byte description(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DESCRIPTION_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[256]")
	public VkPipelineExecutableInternalRepresentationKHR description(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DESCRIPTION_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int isText() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IS_TEXT_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPipelineExecutableInternalRepresentationKHR isText(int value) {
		INT_HANDLE.set(this.segment, this.offset + IS_TEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long dataSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DATA_SIZE_OFFSET);
	}
	
	@NativeType("size_t")
	public VkPipelineExecutableInternalRepresentationKHR dataSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DATA_SIZE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_DATA_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPipelineExecutableInternalRepresentationKHR pData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_DATA_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPipelineExecutableInternalRepresentationKHR> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPipelineExecutableInternalRepresentationKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPipelineExecutableInternalRepresentationKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPipelineExecutableInternalRepresentationKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}