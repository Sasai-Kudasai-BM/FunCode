package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVideoEncodeAV1QualityLevelPropertiesKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkVideoEncodeAV1RateControlFlagsKHR preferredRateControlFlags;
* 	uint32_t preferredGopFrameCount;
* 	uint32_t preferredKeyFramePeriod;
* 	uint32_t preferredConsecutiveBipredictiveFrameCount;
* 	uint32_t preferredTemporalLayerCount;
* 	VkVideoEncodeAV1QIndexKHR preferredConstantQIndex;
* 	uint32_t preferredMaxSingleReferenceCount;
* 	uint32_t preferredSingleReferenceNameMask;
* 	uint32_t preferredMaxUnidirectionalCompoundReferenceCount;
* 	uint32_t preferredMaxUnidirectionalCompoundGroup1ReferenceCount;
* 	uint32_t preferredUnidirectionalCompoundReferenceNameMask;
* 	uint32_t preferredMaxBidirectionalCompoundReferenceCount;
* 	uint32_t preferredMaxBidirectionalCompoundGroup1ReferenceCount;
* 	uint32_t preferredMaxBidirectionalCompoundGroup2ReferenceCount;
* 	uint32_t preferredBidirectionalCompoundReferenceNameMask;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkVideoEncodeAV1QualityLevelPropertiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkVideoEncodeAV1QIndexKHR.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int PREFERRED_RATE_CONTROL_FLAGS_OFFSET = 16;
	private static final int PREFERRED_GOP_FRAME_COUNT_OFFSET = 20;
	private static final int PREFERRED_KEY_FRAME_PERIOD_OFFSET = 24;
	private static final int PREFERRED_CONSECUTIVE_BIPREDICTIVE_FRAME_COUNT_OFFSET = 28;
	private static final int PREFERRED_TEMPORAL_LAYER_COUNT_OFFSET = 32;
	private static final int PREFERRED_CONSTANT_QINDEX_OFFSET = 36;
	private static final int PREFERRED_MAX_SINGLE_REFERENCE_COUNT_OFFSET = 48;
	private static final int PREFERRED_SINGLE_REFERENCE_NAME_MASK_OFFSET = 52;
	private static final int PREFERRED_MAX_UNIDIRECTIONAL_COMPOUND_REFERENCE_COUNT_OFFSET = 56;
	private static final int PREFERRED_MAX_UNIDIRECTIONAL_COMPOUND_GROUP1_REFERENCE_COUNT_OFFSET = 60;
	private static final int PREFERRED_UNIDIRECTIONAL_COMPOUND_REFERENCE_NAME_MASK_OFFSET = 64;
	private static final int PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_REFERENCE_COUNT_OFFSET = 68;
	private static final int PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_GROUP1_REFERENCE_COUNT_OFFSET = 72;
	private static final int PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_GROUP2_REFERENCE_COUNT_OFFSET = 76;
	private static final int PREFERRED_BIDIRECTIONAL_COMPOUND_REFERENCE_NAME_MASK_OFFSET = 80;
	
	public VkVideoEncodeAV1QualityLevelPropertiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeAV1QualityLevelPropertiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeAV1QualityLevelPropertiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR **/
	@NativeType("VkStructureType")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR **/
	@NativeType("VkStructureType")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000513008);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeAV1RateControlFlagsKHR")
	public int preferredRateControlFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_RATE_CONTROL_FLAGS_OFFSET);
	}
	
	@NativeType("VkVideoEncodeAV1RateControlFlagsKHR")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredRateControlFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_RATE_CONTROL_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredGopFrameCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_GOP_FRAME_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredGopFrameCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_GOP_FRAME_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredKeyFramePeriod() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_KEY_FRAME_PERIOD_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredKeyFramePeriod(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_KEY_FRAME_PERIOD_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredConsecutiveBipredictiveFrameCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_CONSECUTIVE_BIPREDICTIVE_FRAME_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredConsecutiveBipredictiveFrameCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_CONSECUTIVE_BIPREDICTIVE_FRAME_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredTemporalLayerCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_TEMPORAL_LAYER_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredTemporalLayerCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_TEMPORAL_LAYER_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeAV1QIndexKHR")
	public VkVideoEncodeAV1QIndexKHR preferredConstantQIndex() {
		return new VkVideoEncodeAV1QIndexKHR(this.segment, this.offset + PREFERRED_CONSTANT_QINDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int preferredMaxSingleReferenceCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_MAX_SINGLE_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredMaxSingleReferenceCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_MAX_SINGLE_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredSingleReferenceNameMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_SINGLE_REFERENCE_NAME_MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredSingleReferenceNameMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_SINGLE_REFERENCE_NAME_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredMaxUnidirectionalCompoundReferenceCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_MAX_UNIDIRECTIONAL_COMPOUND_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredMaxUnidirectionalCompoundReferenceCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_MAX_UNIDIRECTIONAL_COMPOUND_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredMaxUnidirectionalCompoundGroup1ReferenceCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_MAX_UNIDIRECTIONAL_COMPOUND_GROUP1_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredMaxUnidirectionalCompoundGroup1ReferenceCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_MAX_UNIDIRECTIONAL_COMPOUND_GROUP1_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredUnidirectionalCompoundReferenceNameMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_UNIDIRECTIONAL_COMPOUND_REFERENCE_NAME_MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredUnidirectionalCompoundReferenceNameMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_UNIDIRECTIONAL_COMPOUND_REFERENCE_NAME_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredMaxBidirectionalCompoundReferenceCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredMaxBidirectionalCompoundReferenceCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredMaxBidirectionalCompoundGroup1ReferenceCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_GROUP1_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredMaxBidirectionalCompoundGroup1ReferenceCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_GROUP1_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredMaxBidirectionalCompoundGroup2ReferenceCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_GROUP2_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredMaxBidirectionalCompoundGroup2ReferenceCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_MAX_BIDIRECTIONAL_COMPOUND_GROUP2_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int preferredBidirectionalCompoundReferenceNameMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERRED_BIDIRECTIONAL_COMPOUND_REFERENCE_NAME_MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1QualityLevelPropertiesKHR preferredBidirectionalCompoundReferenceNameMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERRED_BIDIRECTIONAL_COMPOUND_REFERENCE_NAME_MASK_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVideoEncodeAV1QualityLevelPropertiesKHR> {
		
		private static final StructConstructor<VkVideoEncodeAV1QualityLevelPropertiesKHR> CONSTRUCTOR = VkVideoEncodeAV1QualityLevelPropertiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVideoEncodeAV1QualityLevelPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVideoEncodeAV1QualityLevelPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVideoEncodeAV1QualityLevelPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}