package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkNativeBufferANDROID {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	void* handle;
* 	int stride;
* 	int format;
* 	int usage;
* 	// pad (2)
* 	VkNativeBufferUsage2ANDROID usage2;
* };
*</pre>
**/
@AutoGenerated
public final class VkNativeBufferANDROID extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_SHORT,
			JAVA_SHORT,
			JAVA_SHORT,
			paddingLayout(2),
			VkNativeBufferUsage2ANDROID.MEMORY_LAYOUT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int HANDLE_OFFSET = 16;
	private static final int STRIDE_OFFSET = 24;
	private static final int FORMAT_OFFSET = 26;
	private static final int USAGE_OFFSET = 28;
	
	public VkNativeBufferANDROID() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkNativeBufferANDROID(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkNativeBufferANDROID(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID **/
	@NativeType("VkStructureType")
	public VkNativeBufferANDROID sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID **/
	@NativeType("VkStructureType")
	public VkNativeBufferANDROID sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 0);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkNativeBufferANDROID pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("void*")
	public long handle() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + HANDLE_OFFSET);
	}
	
	@NativeType("void*")
	public VkNativeBufferANDROID handle(long value) {
		LONG_HANDLE.set(this.segment, this.offset + HANDLE_OFFSET, value);
		return this;
	}
	
	@NativeType("int")
	public short stride() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + STRIDE_OFFSET);
	}
	
	@NativeType("int")
	public VkNativeBufferANDROID stride(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("int")
	public short format() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + FORMAT_OFFSET);
	}
	
	@NativeType("int")
	public VkNativeBufferANDROID format(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + FORMAT_OFFSET, value);
		return this;
	}
	
	@NativeType("int")
	public short usage() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + USAGE_OFFSET);
	}
	
	@NativeType("int")
	public VkNativeBufferANDROID usage(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + USAGE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkNativeBufferUsage2ANDROID")
	public VkNativeBufferUsage2ANDROID usage2() {
		return new VkNativeBufferUsage2ANDROID(this.segment, this.offset + USAGE2_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkNativeBufferANDROID> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkNativeBufferANDROID[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkNativeBufferANDROID[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkNativeBufferANDROID[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}