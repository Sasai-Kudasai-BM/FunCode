package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkDescriptorUpdateTemplateEntry {
* 	uint32_t dstBinding;
* 	uint32_t dstArrayElement;
* 	uint32_t descriptorCount;
* 	VkDescriptorType descriptorType;
* 	size_t offset;
* 	size_t stride;
* };
*</pre>
**/
@AutoGenerated
public final class VkDescriptorUpdateTemplateEntry extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int DST_BINDING_OFFSET = 0;
	private static final int DST_ARRAY_ELEMENT_OFFSET = 4;
	private static final int DESCRIPTOR_COUNT_OFFSET = 8;
	private static final int DESCRIPTOR_TYPE_OFFSET = 12;
	private static final int OFFSET_OFFSET = 16;
	private static final int STRIDE_OFFSET = 24;
	
	public VkDescriptorUpdateTemplateEntry() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDescriptorUpdateTemplateEntry(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDescriptorUpdateTemplateEntry(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int dstBinding() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_BINDING_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDescriptorUpdateTemplateEntry dstBinding(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_BINDING_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int dstArrayElement() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_ARRAY_ELEMENT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDescriptorUpdateTemplateEntry dstArrayElement(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_ARRAY_ELEMENT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int descriptorCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDescriptorUpdateTemplateEntry descriptorCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDescriptorType")
	public int descriptorType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_TYPE_OFFSET);
	}
	
	@NativeType("VkDescriptorType")
	public VkDescriptorUpdateTemplateEntry descriptorType(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long offset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OFFSET_OFFSET);
	}
	
	@NativeType("size_t")
	public VkDescriptorUpdateTemplateEntry offset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long stride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + STRIDE_OFFSET);
	}
	
	@NativeType("size_t")
	public VkDescriptorUpdateTemplateEntry stride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + STRIDE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkDescriptorUpdateTemplateEntry> {
		
		private static final StructConstructor<VkDescriptorUpdateTemplateEntry> CONSTRUCTOR = VkDescriptorUpdateTemplateEntry::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkDescriptorUpdateTemplateEntry[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkDescriptorUpdateTemplateEntry[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkDescriptorUpdateTemplateEntry[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}