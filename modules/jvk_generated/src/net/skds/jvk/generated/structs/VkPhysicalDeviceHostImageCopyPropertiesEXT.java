package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceHostImageCopyProperties {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t copySrcLayoutCount;
* 	// pad (4)
* 	VkImageLayout* pCopySrcLayouts;
* 	uint32_t copyDstLayoutCount;
* 	// pad (4)
* 	VkImageLayout* pCopyDstLayouts;
* 	uint8_t[16] optimalTilingLayoutUUID;
* 	VkBool32 identicalMemoryTypeRequirements;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceHostImageCopyPropertiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			sequenceLayout(16, JAVA_BYTE),
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int COPY_SRC_LAYOUT_COUNT_OFFSET = 16;
	private static final int P_COPY_SRC_LAYOUTS_OFFSET = 24;
	private static final int COPY_DST_LAYOUT_COUNT_OFFSET = 32;
	private static final int P_COPY_DST_LAYOUTS_OFFSET = 40;
	private static final int OPTIMAL_TILING_LAYOUT_UUID_OFFSET = 48;
	private static final int IDENTICAL_MEMORY_TYPE_REQUIREMENTS_OFFSET = 64;
	
	public VkPhysicalDeviceHostImageCopyPropertiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceHostImageCopyPropertiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceHostImageCopyPropertiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000270001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int copySrcLayoutCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COPY_SRC_LAYOUT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT copySrcLayoutCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COPY_SRC_LAYOUT_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public long pCopySrcLayouts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_COPY_SRC_LAYOUTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT pCopySrcLayouts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_COPY_SRC_LAYOUTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int copyDstLayoutCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COPY_DST_LAYOUT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT copyDstLayoutCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COPY_DST_LAYOUT_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public long pCopyDstLayouts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_COPY_DST_LAYOUTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT pCopyDstLayouts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_COPY_DST_LAYOUTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public byte optimalTilingLayoutUUID(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public byte[] optimalTilingLayoutUUIDArray() {
		var array = new byte[16];
		MemorySegment.copy(this.segment, BYTE, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET, array, 0, array.length);
		return array;
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT optimalTilingLayoutUUID(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT optimalTilingLayoutUUID(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET, value.length);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean identicalMemoryTypeRequirements() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IDENTICAL_MEMORY_TYPE_REQUIREMENTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceHostImageCopyPropertiesEXT identicalMemoryTypeRequirements(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + IDENTICAL_MEMORY_TYPE_REQUIREMENTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceHostImageCopyPropertiesEXT> {
		
		private static final StructConstructor<VkPhysicalDeviceHostImageCopyPropertiesEXT> CONSTRUCTOR = VkPhysicalDeviceHostImageCopyPropertiesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceHostImageCopyPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceHostImageCopyPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceHostImageCopyPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}