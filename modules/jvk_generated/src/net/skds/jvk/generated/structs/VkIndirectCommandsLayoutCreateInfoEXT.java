package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkIndirectCommandsLayoutCreateInfoEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkIndirectCommandsLayoutUsageFlagsEXT flags;
* 	VkShaderStageFlags shaderStages;
* 	uint32_t indirectStride;
* 	// pad (4)
* 	VkPipelineLayout* pipelineLayout;
* 	uint32_t tokenCount;
* 	// pad (4)
* 	VkIndirectCommandsLayoutTokenEXT* pTokens;
* };
*</pre>
**/
@AutoGenerated
public final class VkIndirectCommandsLayoutCreateInfoEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int SHADER_STAGES_OFFSET = 20;
	private static final int INDIRECT_STRIDE_OFFSET = 24;
	private static final int PIPELINE_LAYOUT_OFFSET = 32;
	private static final int TOKEN_COUNT_OFFSET = 40;
	private static final int P_TOKENS_OFFSET = 48;
	
	public VkIndirectCommandsLayoutCreateInfoEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsLayoutCreateInfoEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsLayoutCreateInfoEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT **/
	@NativeType("VkStructureType")
	public VkIndirectCommandsLayoutCreateInfoEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT **/
	@NativeType("VkStructureType")
	public VkIndirectCommandsLayoutCreateInfoEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000572006);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkIndirectCommandsLayoutCreateInfoEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkIndirectCommandsLayoutUsageFlagsEXT")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkIndirectCommandsLayoutUsageFlagsEXT")
	public VkIndirectCommandsLayoutCreateInfoEXT flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderStageFlags")
	public int shaderStages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_STAGES_OFFSET);
	}
	
	@NativeType("VkShaderStageFlags")
	public VkIndirectCommandsLayoutCreateInfoEXT shaderStages(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_STAGES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int indirectStride() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDIRECT_STRIDE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutCreateInfoEXT indirectStride(int value) {
		INT_HANDLE.set(this.segment, this.offset + INDIRECT_STRIDE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineLayout*")
	public long pipelineLayout() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PIPELINE_LAYOUT_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineLayout*")
	public VkIndirectCommandsLayoutCreateInfoEXT pipelineLayout(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PIPELINE_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int tokenCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TOKEN_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutCreateInfoEXT tokenCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + TOKEN_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndirectCommandsLayoutTokenEXT*")
	public long pTokens() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_TOKENS_OFFSET);
	}
	
	@NativeType("VkIndirectCommandsLayoutTokenEXT*")
	public VkIndirectCommandsLayoutCreateInfoEXT pTokens(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_TOKENS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkIndirectCommandsLayoutCreateInfoEXT> {
		
		private static final StructConstructor<VkIndirectCommandsLayoutCreateInfoEXT> CONSTRUCTOR = VkIndirectCommandsLayoutCreateInfoEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkIndirectCommandsLayoutCreateInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkIndirectCommandsLayoutCreateInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkIndirectCommandsLayoutCreateInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}