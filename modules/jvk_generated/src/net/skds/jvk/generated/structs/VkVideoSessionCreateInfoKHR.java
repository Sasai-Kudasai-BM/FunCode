package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVideoSessionCreateInfoKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t queueFamilyIndex;
* 	VkVideoSessionCreateFlagsKHR flags;
* 	VkVideoProfileInfoKHR* pVideoProfile;
* 	VkFormat pictureFormat;
* 	VkExtent2D maxCodedExtent;
* 	VkFormat referencePictureFormat;
* 	uint32_t maxDpbSlots;
* 	uint32_t maxActiveReferencePictures;
* 	VkExtensionProperties* pStdHeaderVersion;
* };
*</pre>
**/
@AutoGenerated
public final class VkVideoSessionCreateInfoKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_INT,
			VkExtent2D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int QUEUE_FAMILY_INDEX_OFFSET = 16;
	private static final int FLAGS_OFFSET = 20;
	private static final int P_VIDEO_PROFILE_OFFSET = 24;
	private static final int PICTURE_FORMAT_OFFSET = 32;
	private static final int MAX_CODED_EXTENT_OFFSET = 36;
	private static final int REFERENCE_PICTURE_FORMAT_OFFSET = 44;
	private static final int MAX_DPB_SLOTS_OFFSET = 48;
	private static final int MAX_ACTIVE_REFERENCE_PICTURES_OFFSET = 52;
	private static final int P_STD_HEADER_VERSION_OFFSET = 56;
	
	public VkVideoSessionCreateInfoKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoSessionCreateInfoKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoSessionCreateInfoKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkVideoSessionCreateInfoKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkVideoSessionCreateInfoKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000023005);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkVideoSessionCreateInfoKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int queueFamilyIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + QUEUE_FAMILY_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoSessionCreateInfoKHR queueFamilyIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + QUEUE_FAMILY_INDEX_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkVideoSessionCreateFlagsKHR")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkVideoSessionCreateFlagsKHR")
	public VkVideoSessionCreateInfoKHR flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoProfileInfoKHR*")
	public long pVideoProfile() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_VIDEO_PROFILE_OFFSET);
	}
	
	@NativeType("VkVideoProfileInfoKHR*")
	public VkVideoSessionCreateInfoKHR pVideoProfile(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_VIDEO_PROFILE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkFormat")
	public int pictureFormat() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PICTURE_FORMAT_OFFSET);
	}
	
	@NativeType("VkFormat")
	public VkVideoSessionCreateInfoKHR pictureFormat(int value) {
		INT_HANDLE.set(this.segment, this.offset + PICTURE_FORMAT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D maxCodedExtent() {
		return new VkExtent2D(this.segment, this.offset + MAX_CODED_EXTENT_OFFSET);
	}
	
	@NativeType("VkFormat")
	public int referencePictureFormat() {
		return (int) INT_HANDLE.get(this.segment, this.offset + REFERENCE_PICTURE_FORMAT_OFFSET);
	}
	
	@NativeType("VkFormat")
	public VkVideoSessionCreateInfoKHR referencePictureFormat(int value) {
		INT_HANDLE.set(this.segment, this.offset + REFERENCE_PICTURE_FORMAT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDpbSlots() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DPB_SLOTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoSessionCreateInfoKHR maxDpbSlots(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DPB_SLOTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxActiveReferencePictures() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_ACTIVE_REFERENCE_PICTURES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoSessionCreateInfoKHR maxActiveReferencePictures(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_ACTIVE_REFERENCE_PICTURES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtensionProperties*")
	public long pStdHeaderVersion() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_STD_HEADER_VERSION_OFFSET);
	}
	
	@NativeType("VkExtensionProperties*")
	public VkVideoSessionCreateInfoKHR pStdHeaderVersion(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_STD_HEADER_VERSION_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVideoSessionCreateInfoKHR> {
		
		private static final StructConstructor<VkVideoSessionCreateInfoKHR> CONSTRUCTOR = VkVideoSessionCreateInfoKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVideoSessionCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVideoSessionCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVideoSessionCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}