package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPipelineColorBlendStateCreateInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkPipelineColorBlendStateCreateFlags flags;
* 	VkBool32 logicOpEnable;
* 	VkLogicOp logicOp;
* 	uint32_t attachmentCount;
* 	VkPipelineColorBlendAttachmentState* pAttachments;
* 	float[4] blendConstants;
* };
*</pre>
**/
@AutoGenerated
public final class VkPipelineColorBlendStateCreateInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			sequenceLayout(4, JAVA_FLOAT)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int LOGIC_OP_ENABLE_OFFSET = 20;
	private static final int LOGIC_OP_OFFSET = 24;
	private static final int ATTACHMENT_COUNT_OFFSET = 28;
	private static final int P_ATTACHMENTS_OFFSET = 32;
	private static final int BLEND_CONSTANTS_OFFSET = 40;
	
	public VkPipelineColorBlendStateCreateInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineColorBlendStateCreateInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineColorBlendStateCreateInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineColorBlendStateCreateInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineColorBlendStateCreateInfo sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 26);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPipelineColorBlendStateCreateInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineColorBlendStateCreateFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineColorBlendStateCreateFlags")
	public VkPipelineColorBlendStateCreateInfo flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean logicOpEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LOGIC_OP_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineColorBlendStateCreateInfo logicOpEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + LOGIC_OP_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkLogicOp")
	public int logicOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LOGIC_OP_OFFSET);
	}
	
	@NativeType("VkLogicOp")
	public VkPipelineColorBlendStateCreateInfo logicOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + LOGIC_OP_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int attachmentCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ATTACHMENT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkPipelineColorBlendStateCreateInfo attachmentCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + ATTACHMENT_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineColorBlendAttachmentState*")
	public long pAttachments() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_ATTACHMENTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineColorBlendAttachmentState*")
	public VkPipelineColorBlendStateCreateInfo pAttachments(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("float[4]")
	public float blendConstants(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + BLEND_CONSTANTS_OFFSET + JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[4]")
	public float[] blendConstantsArray() {
		var array = new float[4];
		MemorySegment.copy(this.segment, FLOAT, this.offset + BLEND_CONSTANTS_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("float[4]")
	public VkPipelineColorBlendStateCreateInfo blendConstants(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + BLEND_CONSTANTS_OFFSET + JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("float[4]")
	public VkPipelineColorBlendStateCreateInfo blendConstants(float[] value) {
		MemorySegment.copy(value, 0, this.segment, FLOAT, this.offset + BLEND_CONSTANTS_OFFSET, value.length);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPipelineColorBlendStateCreateInfo> {
		
		private static final StructConstructor<VkPipelineColorBlendStateCreateInfo> CONSTRUCTOR = VkPipelineColorBlendStateCreateInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPipelineColorBlendStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPipelineColorBlendStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPipelineColorBlendStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}