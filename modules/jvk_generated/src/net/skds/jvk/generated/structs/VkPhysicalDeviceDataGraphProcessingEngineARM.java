package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceDataGraphProcessingEngineARM {
* 	VkPhysicalDeviceDataGraphProcessingEngineTypeARM type;
* 	VkBool32 isForeign;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceDataGraphProcessingEngineARM extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT
	);
	private static final int TYPE_OFFSET = 0;
	private static final int IS_FOREIGN_OFFSET = 4;
	
	public VkPhysicalDeviceDataGraphProcessingEngineARM() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDataGraphProcessingEngineARM(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDataGraphProcessingEngineARM(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkPhysicalDeviceDataGraphProcessingEngineTypeARM")
	public int type() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TYPE_OFFSET);
	}
	
	@NativeType("VkPhysicalDeviceDataGraphProcessingEngineTypeARM")
	public VkPhysicalDeviceDataGraphProcessingEngineARM type(int value) {
		INT_HANDLE.set(this.segment, this.offset + TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean isForeign() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IS_FOREIGN_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceDataGraphProcessingEngineARM isForeign(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + IS_FOREIGN_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceDataGraphProcessingEngineARM> {
		
		private static final StructConstructor<VkPhysicalDeviceDataGraphProcessingEngineARM> CONSTRUCTOR = VkPhysicalDeviceDataGraphProcessingEngineARM::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceDataGraphProcessingEngineARM[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceDataGraphProcessingEngineARM[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceDataGraphProcessingEngineARM[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}