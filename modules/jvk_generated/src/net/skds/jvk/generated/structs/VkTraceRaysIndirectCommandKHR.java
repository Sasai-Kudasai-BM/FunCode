package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkTraceRaysIndirectCommandKHR {
* 	uint32_t width;
* 	uint32_t height;
* 	uint32_t depth;
* };
*</pre>
**/
@AutoGenerated
public final class VkTraceRaysIndirectCommandKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int WIDTH_OFFSET = 0;
	private static final int HEIGHT_OFFSET = 4;
	private static final int DEPTH_OFFSET = 8;
	
	public VkTraceRaysIndirectCommandKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkTraceRaysIndirectCommandKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkTraceRaysIndirectCommandKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int width() {
		return (int) INT_HANDLE.get(this.segment, this.offset + WIDTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkTraceRaysIndirectCommandKHR width(int value) {
		INT_HANDLE.set(this.segment, this.offset + WIDTH_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int height() {
		return (int) INT_HANDLE.get(this.segment, this.offset + HEIGHT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkTraceRaysIndirectCommandKHR height(int value) {
		INT_HANDLE.set(this.segment, this.offset + HEIGHT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int depth() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkTraceRaysIndirectCommandKHR depth(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkTraceRaysIndirectCommandKHR> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkTraceRaysIndirectCommandKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkTraceRaysIndirectCommandKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkTraceRaysIndirectCommandKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}