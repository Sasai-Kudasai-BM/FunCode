package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkExtent2D minFragmentShadingRateAttachmentTexelSize;
* 	VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
* 	uint32_t maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
* 	VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
* 	VkBool32 layeredShadingRateAttachments;
* 	VkBool32 fragmentShadingRateNonTrivialCombinerOps;
* 	VkExtent2D maxFragmentSize;
* 	uint32_t maxFragmentSizeAspectRatio;
* 	uint32_t maxFragmentShadingRateCoverageSamples;
* 	VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
* 	VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
* 	VkBool32 fragmentShadingRateWithSampleMask;
* 	VkBool32 fragmentShadingRateWithShaderSampleMask;
* 	VkBool32 fragmentShadingRateWithConservativeRasterization;
* 	VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
* 	VkBool32 fragmentShadingRateWithCustomSampleLocations;
* 	VkBool32 fragmentShadingRateStrictMultiplyCombiner;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceFragmentShadingRatePropertiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			VkExtent2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkExtent2D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_SIZE_OFFSET = 16;
	private static final int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_SIZE_OFFSET = 24;
	private static final int MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_SIZE_ASPECT_RATIO_OFFSET = 32;
	private static final int PRIMITIVE_FRAGMENT_SHADING_RATE_WITH_MULTIPLE_VIEWPORTS_OFFSET = 36;
	private static final int LAYERED_SHADING_RATE_ATTACHMENTS_OFFSET = 40;
	private static final int FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINER_OPS_OFFSET = 44;
	private static final int MAX_FRAGMENT_SIZE_OFFSET = 48;
	private static final int MAX_FRAGMENT_SIZE_ASPECT_RATIO_OFFSET = 56;
	private static final int MAX_FRAGMENT_SHADING_RATE_COVERAGE_SAMPLES_OFFSET = 60;
	private static final int MAX_FRAGMENT_SHADING_RATE_RASTERIZATION_SAMPLES_OFFSET = 64;
	private static final int FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_OFFSET = 68;
	private static final int FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_OFFSET = 72;
	private static final int FRAGMENT_SHADING_RATE_WITH_SHADER_SAMPLE_MASK_OFFSET = 76;
	private static final int FRAGMENT_SHADING_RATE_WITH_CONSERVATIVE_RASTERIZATION_OFFSET = 80;
	private static final int FRAGMENT_SHADING_RATE_WITH_FRAGMENT_SHADER_INTERLOCK_OFFSET = 84;
	private static final int FRAGMENT_SHADING_RATE_WITH_CUSTOM_SAMPLE_LOCATIONS_OFFSET = 88;
	private static final int FRAGMENT_SHADING_RATE_STRICT_MULTIPLY_COMBINER_OFFSET = 92;
	
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000226002);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D minFragmentShadingRateAttachmentTexelSize() {
		return new VkExtent2D(this.segment, this.offset + MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_SIZE_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D maxFragmentShadingRateAttachmentTexelSize() {
		return new VkExtent2D(this.segment, this.offset + MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int maxFragmentShadingRateAttachmentTexelSizeAspectRatio() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_SIZE_ASPECT_RATIO_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR maxFragmentShadingRateAttachmentTexelSizeAspectRatio(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_SIZE_ASPECT_RATIO_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean primitiveFragmentShadingRateWithMultipleViewports() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PRIMITIVE_FRAGMENT_SHADING_RATE_WITH_MULTIPLE_VIEWPORTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR primitiveFragmentShadingRateWithMultipleViewports(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PRIMITIVE_FRAGMENT_SHADING_RATE_WITH_MULTIPLE_VIEWPORTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean layeredShadingRateAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LAYERED_SHADING_RATE_ATTACHMENTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR layeredShadingRateAttachments(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + LAYERED_SHADING_RATE_ATTACHMENTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateNonTrivialCombinerOps() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINER_OPS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateNonTrivialCombinerOps(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINER_OPS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D maxFragmentSize() {
		return new VkExtent2D(this.segment, this.offset + MAX_FRAGMENT_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int maxFragmentSizeAspectRatio() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_SIZE_ASPECT_RATIO_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR maxFragmentSizeAspectRatio(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_SIZE_ASPECT_RATIO_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFragmentShadingRateCoverageSamples() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_SHADING_RATE_COVERAGE_SAMPLES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR maxFragmentShadingRateCoverageSamples(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_SHADING_RATE_COVERAGE_SAMPLES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSampleCountFlagBits")
	public int maxFragmentShadingRateRasterizationSamples() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_SHADING_RATE_RASTERIZATION_SAMPLES_OFFSET);
	}
	
	@NativeType("VkSampleCountFlagBits")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR maxFragmentShadingRateRasterizationSamples(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_SHADING_RATE_RASTERIZATION_SAMPLES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateWithShaderDepthStencilWrites() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateWithShaderDepthStencilWrites(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateWithSampleMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateWithSampleMask(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateWithShaderSampleMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_SHADER_SAMPLE_MASK_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateWithShaderSampleMask(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_SHADER_SAMPLE_MASK_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateWithConservativeRasterization() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_CONSERVATIVE_RASTERIZATION_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateWithConservativeRasterization(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_CONSERVATIVE_RASTERIZATION_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateWithFragmentShaderInterlock() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_FRAGMENT_SHADER_INTERLOCK_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateWithFragmentShaderInterlock(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_FRAGMENT_SHADER_INTERLOCK_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateWithCustomSampleLocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_CUSTOM_SAMPLE_LOCATIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateWithCustomSampleLocations(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_WITH_CUSTOM_SAMPLE_LOCATIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateStrictMultiplyCombiner() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_STRICT_MULTIPLY_COMBINER_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR fragmentShadingRateStrictMultiplyCombiner(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_STRICT_MULTIPLY_COMBINER_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceFragmentShadingRatePropertiesKHR> {
		
		private static final StructConstructor<VkPhysicalDeviceFragmentShadingRatePropertiesKHR> CONSTRUCTOR = VkPhysicalDeviceFragmentShadingRatePropertiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceFragmentShadingRatePropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceFragmentShadingRatePropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceFragmentShadingRatePropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}