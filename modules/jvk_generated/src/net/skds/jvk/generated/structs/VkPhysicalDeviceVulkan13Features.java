package net.skds.jvk.generated.structs;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;
import net.skds.lib2.natives.struct.annotation.StructMember;
import net.skds.lib2.natives.struct.CStructWrapper;
import net.skds.jvk.annotation.NativeType;

@AutoGenerated
public final class VkPhysicalDeviceVulkan13Features extends CStruct {


	public static final CStructWrapper<VkPhysicalDeviceVulkan13Features> WRAPPER = new CStructWrapper<>(VkPhysicalDeviceVulkan13Features.class);

	/**
	* values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES
	*/
	@StructMember()
	@NativeType("VkStructureType")
	public int sType = 53;

	/**
	* optional
	*/
	@StructMember()
	@NativeType("void*")
	public long pNext;

	@StructMember()
	@NativeType("VkBool32")
	public int robustImageAccess;

	@StructMember()
	@NativeType("VkBool32")
	public int inlineUniformBlock;

	@StructMember()
	@NativeType("VkBool32")
	public int descriptorBindingInlineUniformBlockUpdateAfterBind;

	@StructMember()
	@NativeType("VkBool32")
	public int pipelineCreationCacheControl;

	@StructMember()
	@NativeType("VkBool32")
	public int privateData;

	@StructMember()
	@NativeType("VkBool32")
	public int shaderDemoteToHelperInvocation;

	@StructMember()
	@NativeType("VkBool32")
	public int shaderTerminateInvocation;

	@StructMember()
	@NativeType("VkBool32")
	public int subgroupSizeControl;

	@StructMember()
	@NativeType("VkBool32")
	public int computeFullSubgroups;

	@StructMember()
	@NativeType("VkBool32")
	public int synchronization2;

	@StructMember()
	@NativeType("VkBool32")
	public int textureCompressionASTC_HDR;

	@StructMember()
	@NativeType("VkBool32")
	public int shaderZeroInitializeWorkgroupMemory;

	@StructMember()
	@NativeType("VkBool32")
	public int dynamicRendering;

	@StructMember()
	@NativeType("VkBool32")
	public int shaderIntegerDotProduct;

	@StructMember()
	@NativeType("VkBool32")
	public int maintenance4;


	@Override
	public CStructWrapper<VkPhysicalDeviceVulkan13Features> getWrapper() {
		return WRAPPER;
	}
}