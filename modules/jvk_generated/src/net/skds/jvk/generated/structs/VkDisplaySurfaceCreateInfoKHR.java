package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkDisplaySurfaceCreateInfoKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkDisplaySurfaceCreateFlagsKHR flags;
* 	// pad (4)
* 	VkDisplayModeKHR* displayMode;
* 	uint32_t planeIndex;
* 	uint32_t planeStackIndex;
* 	VkSurfaceTransformFlagBitsKHR transform;
* 	float globalAlpha;
* 	VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
* 	VkExtent2D imageExtent;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkDisplaySurfaceCreateInfoKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_FLOAT,
			JAVA_INT,
			VkExtent2D.MEMORY_LAYOUT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int DISPLAY_MODE_OFFSET = 24;
	private static final int PLANE_INDEX_OFFSET = 32;
	private static final int PLANE_STACK_INDEX_OFFSET = 36;
	private static final int TRANSFORM_OFFSET = 40;
	private static final int GLOBAL_ALPHA_OFFSET = 44;
	private static final int ALPHA_MODE_OFFSET = 48;
	private static final int IMAGE_EXTENT_OFFSET = 52;
	
	public VkDisplaySurfaceCreateInfoKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDisplaySurfaceCreateInfoKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDisplaySurfaceCreateInfoKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkDisplaySurfaceCreateInfoKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkDisplaySurfaceCreateInfoKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000002001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkDisplaySurfaceCreateInfoKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkDisplaySurfaceCreateFlagsKHR")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkDisplaySurfaceCreateFlagsKHR")
	public VkDisplaySurfaceCreateInfoKHR flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDisplayModeKHR*")
	public long displayMode() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DISPLAY_MODE_OFFSET);
	}
	
	@NativeType("VkDisplayModeKHR*")
	public VkDisplaySurfaceCreateInfoKHR displayMode(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DISPLAY_MODE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int planeIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PLANE_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDisplaySurfaceCreateInfoKHR planeIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + PLANE_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int planeStackIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PLANE_STACK_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDisplaySurfaceCreateInfoKHR planeStackIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + PLANE_STACK_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSurfaceTransformFlagBitsKHR")
	public int transform() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TRANSFORM_OFFSET);
	}
	
	@NativeType("VkSurfaceTransformFlagBitsKHR")
	public VkDisplaySurfaceCreateInfoKHR transform(int value) {
		INT_HANDLE.set(this.segment, this.offset + TRANSFORM_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float globalAlpha() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + GLOBAL_ALPHA_OFFSET);
	}
	
	@NativeType("float")
	public VkDisplaySurfaceCreateInfoKHR globalAlpha(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + GLOBAL_ALPHA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDisplayPlaneAlphaFlagBitsKHR")
	public int alphaMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ALPHA_MODE_OFFSET);
	}
	
	@NativeType("VkDisplayPlaneAlphaFlagBitsKHR")
	public VkDisplaySurfaceCreateInfoKHR alphaMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + ALPHA_MODE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D imageExtent() {
		return new VkExtent2D(this.segment, this.offset + IMAGE_EXTENT_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkDisplaySurfaceCreateInfoKHR> {
		
		private static final StructConstructor<VkDisplaySurfaceCreateInfoKHR> CONSTRUCTOR = VkDisplaySurfaceCreateInfoKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkDisplaySurfaceCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkDisplaySurfaceCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkDisplaySurfaceCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}