package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVertexInputBindingDivisorDescription {
* 	uint32_t binding;
* 	uint32_t divisor;
* };
*</pre>
**/
@AutoGenerated
public final class VkVertexInputBindingDivisorDescriptionEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT
	);
	private static final int BINDING_OFFSET = 0;
	private static final int DIVISOR_OFFSET = 4;
	
	public VkVertexInputBindingDivisorDescriptionEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVertexInputBindingDivisorDescriptionEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVertexInputBindingDivisorDescriptionEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int binding() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BINDING_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVertexInputBindingDivisorDescriptionEXT binding(int value) {
		INT_HANDLE.set(this.segment, this.offset + BINDING_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int divisor() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DIVISOR_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVertexInputBindingDivisorDescriptionEXT divisor(int value) {
		INT_HANDLE.set(this.segment, this.offset + DIVISOR_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVertexInputBindingDivisorDescriptionEXT> {
		
		private static final StructConstructor<VkVertexInputBindingDivisorDescriptionEXT> CONSTRUCTOR = VkVertexInputBindingDivisorDescriptionEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVertexInputBindingDivisorDescriptionEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVertexInputBindingDivisorDescriptionEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVertexInputBindingDivisorDescriptionEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}