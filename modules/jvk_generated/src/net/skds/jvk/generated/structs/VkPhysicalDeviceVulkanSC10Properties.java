package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceVulkanSC10Properties {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBool32 deviceNoDynamicHostAllocations;
* 	VkBool32 deviceDestroyFreesMemory;
* 	VkBool32 commandPoolMultipleCommandBuffersRecording;
* 	VkBool32 commandPoolResetCommandBuffer;
* 	VkBool32 commandBufferSimultaneousUse;
* 	VkBool32 secondaryCommandBufferNullOrImagelessFramebuffer;
* 	VkBool32 recycleDescriptorSetMemory;
* 	VkBool32 recyclePipelineMemory;
* 	uint32_t maxRenderPassSubpasses;
* 	uint32_t maxRenderPassDependencies;
* 	uint32_t maxSubpassInputAttachments;
* 	uint32_t maxSubpassPreserveAttachments;
* 	uint32_t maxFramebufferAttachments;
* 	uint32_t maxDescriptorSetLayoutBindings;
* 	uint32_t maxQueryFaultCount;
* 	uint32_t maxCallbackFaultCount;
* 	uint32_t maxCommandPoolCommandBuffers;
* 	// pad (4)
* 	VkDeviceSize maxCommandBufferSize;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceVulkanSC10Properties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int DEVICE_NO_DYNAMIC_HOST_ALLOCATIONS_OFFSET = 16;
	private static final int DEVICE_DESTROY_FREES_MEMORY_OFFSET = 20;
	private static final int COMMAND_POOL_MULTIPLE_COMMAND_BUFFERS_RECORDING_OFFSET = 24;
	private static final int COMMAND_POOL_RESET_COMMAND_BUFFER_OFFSET = 28;
	private static final int COMMAND_BUFFER_SIMULTANEOUS_USE_OFFSET = 32;
	private static final int SECONDARY_COMMAND_BUFFER_NULL_OR_IMAGELESS_FRAMEBUFFER_OFFSET = 36;
	private static final int RECYCLE_DESCRIPTOR_SET_MEMORY_OFFSET = 40;
	private static final int RECYCLE_PIPELINE_MEMORY_OFFSET = 44;
	private static final int MAX_RENDER_PASS_SUBPASSES_OFFSET = 48;
	private static final int MAX_RENDER_PASS_DEPENDENCIES_OFFSET = 52;
	private static final int MAX_SUBPASS_INPUT_ATTACHMENTS_OFFSET = 56;
	private static final int MAX_SUBPASS_PRESERVE_ATTACHMENTS_OFFSET = 60;
	private static final int MAX_FRAMEBUFFER_ATTACHMENTS_OFFSET = 64;
	private static final int MAX_DESCRIPTOR_SET_LAYOUT_BINDINGS_OFFSET = 68;
	private static final int MAX_QUERY_FAULT_COUNT_OFFSET = 72;
	private static final int MAX_CALLBACK_FAULT_COUNT_OFFSET = 76;
	private static final int MAX_COMMAND_POOL_COMMAND_BUFFERS_OFFSET = 80;
	private static final int MAX_COMMAND_BUFFER_SIZE_OFFSET = 88;
	
	public VkPhysicalDeviceVulkanSC10Properties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkanSC10Properties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkanSC10Properties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_PROPERTIES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_SC_1_0_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkanSC10Properties sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceVulkanSC10Properties pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean deviceNoDynamicHostAllocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_NO_DYNAMIC_HOST_ALLOCATIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties deviceNoDynamicHostAllocations(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_NO_DYNAMIC_HOST_ALLOCATIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean deviceDestroyFreesMemory() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_DESTROY_FREES_MEMORY_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties deviceDestroyFreesMemory(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_DESTROY_FREES_MEMORY_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean commandPoolMultipleCommandBuffersRecording() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMMAND_POOL_MULTIPLE_COMMAND_BUFFERS_RECORDING_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties commandPoolMultipleCommandBuffersRecording(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COMMAND_POOL_MULTIPLE_COMMAND_BUFFERS_RECORDING_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean commandPoolResetCommandBuffer() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMMAND_POOL_RESET_COMMAND_BUFFER_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties commandPoolResetCommandBuffer(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COMMAND_POOL_RESET_COMMAND_BUFFER_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean commandBufferSimultaneousUse() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMMAND_BUFFER_SIMULTANEOUS_USE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties commandBufferSimultaneousUse(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COMMAND_BUFFER_SIMULTANEOUS_USE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean secondaryCommandBufferNullOrImagelessFramebuffer() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SECONDARY_COMMAND_BUFFER_NULL_OR_IMAGELESS_FRAMEBUFFER_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties secondaryCommandBufferNullOrImagelessFramebuffer(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SECONDARY_COMMAND_BUFFER_NULL_OR_IMAGELESS_FRAMEBUFFER_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean recycleDescriptorSetMemory() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RECYCLE_DESCRIPTOR_SET_MEMORY_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties recycleDescriptorSetMemory(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RECYCLE_DESCRIPTOR_SET_MEMORY_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean recyclePipelineMemory() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RECYCLE_PIPELINE_MEMORY_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkanSC10Properties recyclePipelineMemory(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RECYCLE_PIPELINE_MEMORY_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxRenderPassSubpasses() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_RENDER_PASS_SUBPASSES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxRenderPassSubpasses(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_RENDER_PASS_SUBPASSES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxRenderPassDependencies() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_RENDER_PASS_DEPENDENCIES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxRenderPassDependencies(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_RENDER_PASS_DEPENDENCIES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxSubpassInputAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_SUBPASS_INPUT_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxSubpassInputAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_SUBPASS_INPUT_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxSubpassPreserveAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_SUBPASS_PRESERVE_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxSubpassPreserveAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_SUBPASS_PRESERVE_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFramebufferAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAMEBUFFER_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxFramebufferAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAMEBUFFER_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetLayoutBindings() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_LAYOUT_BINDINGS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxDescriptorSetLayoutBindings(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_LAYOUT_BINDINGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxQueryFaultCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_QUERY_FAULT_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxQueryFaultCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_QUERY_FAULT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxCallbackFaultCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_CALLBACK_FAULT_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxCallbackFaultCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_CALLBACK_FAULT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxCommandPoolCommandBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COMMAND_POOL_COMMAND_BUFFERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkanSC10Properties maxCommandPoolCommandBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COMMAND_POOL_COMMAND_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long maxCommandBufferSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MAX_COMMAND_BUFFER_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceVulkanSC10Properties maxCommandBufferSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MAX_COMMAND_BUFFER_SIZE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceVulkanSC10Properties> {
		
		private static final StructConstructor<VkPhysicalDeviceVulkanSC10Properties> CONSTRUCTOR = VkPhysicalDeviceVulkanSC10Properties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceVulkanSC10Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceVulkanSC10Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceVulkanSC10Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}