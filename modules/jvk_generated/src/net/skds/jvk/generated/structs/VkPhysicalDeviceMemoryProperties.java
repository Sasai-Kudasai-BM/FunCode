package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceMemoryProperties {
* 	uint32_t memoryTypeCount;
* 	VkMemoryType[32] memoryTypes;
* 	uint32_t memoryHeapCount;
* 	VkMemoryHeap[16] memoryHeaps;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceMemoryProperties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			sequenceLayout(32, VkMemoryType.MEMORY_LAYOUT),
			JAVA_INT,
			sequenceLayout(16, VkMemoryHeap.MEMORY_LAYOUT)
	);
	private static final int MEMORY_TYPE_COUNT_OFFSET = 0;
	private static final int MEMORY_TYPES_OFFSET = 4;
	private static final int MEMORY_HEAP_COUNT_OFFSET = 260;
	private static final int MEMORY_HEAPS_OFFSET = 264;
	
	public VkPhysicalDeviceMemoryProperties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMemoryProperties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMemoryProperties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int memoryTypeCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MEMORY_TYPE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMemoryProperties memoryTypeCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MEMORY_TYPE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkMemoryType[32]")
	public VkMemoryType memoryTypes(int i) {
		return new VkMemoryType(this.segment, this.offset + MEMORY_TYPES_OFFSET + VkMemoryType.MEMORY_LAYOUT.byteSize() * i);
	}
	
	@NativeType("VkMemoryType[32]")
	public VkPhysicalDeviceMemoryProperties.Array memoryTypes() {
		return new Array(this.segment, this.offset + MEMORY_TYPES_OFFSET, 32);
	}
	
	@NativeType("uint32_t")
	public int memoryHeapCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MEMORY_HEAP_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMemoryProperties memoryHeapCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MEMORY_HEAP_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkMemoryHeap[16]")
	public VkMemoryHeap memoryHeaps(int i) {
		return new VkMemoryHeap(this.segment, this.offset + MEMORY_HEAPS_OFFSET + VkMemoryHeap.MEMORY_LAYOUT.byteSize() * i);
	}
	
	@NativeType("VkMemoryHeap[16]")
	public VkPhysicalDeviceMemoryProperties.Array memoryHeaps() {
		return new Array(this.segment, this.offset + MEMORY_HEAPS_OFFSET, 16);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceMemoryProperties> {
		
		private static final StructConstructor<VkPhysicalDeviceMemoryProperties> CONSTRUCTOR = VkPhysicalDeviceMemoryProperties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceMemoryProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceMemoryProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceMemoryProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}