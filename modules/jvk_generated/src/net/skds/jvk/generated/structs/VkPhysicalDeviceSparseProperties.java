package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceSparseProperties {
* 	VkBool32 residencyStandard2DBlockShape;
* 	VkBool32 residencyStandard2DMultisampleBlockShape;
* 	VkBool32 residencyStandard3DBlockShape;
* 	VkBool32 residencyAlignedMipSize;
* 	VkBool32 residencyNonResidentStrict;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceSparseProperties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int RESIDENCY_STANDARD2_DBLOCK_SHAPE_OFFSET = 0;
	private static final int RESIDENCY_STANDARD2_DMULTISAMPLE_BLOCK_SHAPE_OFFSET = 4;
	private static final int RESIDENCY_STANDARD3_DBLOCK_SHAPE_OFFSET = 8;
	private static final int RESIDENCY_ALIGNED_MIP_SIZE_OFFSET = 12;
	private static final int RESIDENCY_NON_RESIDENT_STRICT_OFFSET = 16;
	
	public VkPhysicalDeviceSparseProperties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceSparseProperties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceSparseProperties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkBool32")
	public boolean residencyStandard2DBlockShape() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESIDENCY_STANDARD2_DBLOCK_SHAPE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceSparseProperties residencyStandard2DBlockShape(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RESIDENCY_STANDARD2_DBLOCK_SHAPE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean residencyStandard2DMultisampleBlockShape() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESIDENCY_STANDARD2_DMULTISAMPLE_BLOCK_SHAPE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceSparseProperties residencyStandard2DMultisampleBlockShape(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RESIDENCY_STANDARD2_DMULTISAMPLE_BLOCK_SHAPE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean residencyStandard3DBlockShape() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESIDENCY_STANDARD3_DBLOCK_SHAPE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceSparseProperties residencyStandard3DBlockShape(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RESIDENCY_STANDARD3_DBLOCK_SHAPE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean residencyAlignedMipSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESIDENCY_ALIGNED_MIP_SIZE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceSparseProperties residencyAlignedMipSize(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RESIDENCY_ALIGNED_MIP_SIZE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean residencyNonResidentStrict() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESIDENCY_NON_RESIDENT_STRICT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceSparseProperties residencyNonResidentStrict(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RESIDENCY_NON_RESIDENT_STRICT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceSparseProperties> {
		
		private static final StructConstructor<VkPhysicalDeviceSparseProperties> CONSTRUCTOR = VkPhysicalDeviceSparseProperties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceSparseProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceSparseProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceSparseProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}