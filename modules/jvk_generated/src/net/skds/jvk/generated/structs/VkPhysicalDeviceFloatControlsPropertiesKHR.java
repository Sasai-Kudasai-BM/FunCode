package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceFloatControlsProperties {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkShaderFloatControlsIndependence denormBehaviorIndependence;
* 	VkShaderFloatControlsIndependence roundingModeIndependence;
* 	VkBool32 shaderSignedZeroInfNanPreserveFloat16;
* 	VkBool32 shaderSignedZeroInfNanPreserveFloat32;
* 	VkBool32 shaderSignedZeroInfNanPreserveFloat64;
* 	VkBool32 shaderDenormPreserveFloat16;
* 	VkBool32 shaderDenormPreserveFloat32;
* 	VkBool32 shaderDenormPreserveFloat64;
* 	VkBool32 shaderDenormFlushToZeroFloat16;
* 	VkBool32 shaderDenormFlushToZeroFloat32;
* 	VkBool32 shaderDenormFlushToZeroFloat64;
* 	VkBool32 shaderRoundingModeRTEFloat16;
* 	VkBool32 shaderRoundingModeRTEFloat32;
* 	VkBool32 shaderRoundingModeRTEFloat64;
* 	VkBool32 shaderRoundingModeRTZFloat16;
* 	VkBool32 shaderRoundingModeRTZFloat32;
* 	VkBool32 shaderRoundingModeRTZFloat64;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceFloatControlsPropertiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int DENORM_BEHAVIOR_INDEPENDENCE_OFFSET = 16;
	private static final int ROUNDING_MODE_INDEPENDENCE_OFFSET = 20;
	private static final int SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT16_OFFSET = 24;
	private static final int SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT32_OFFSET = 28;
	private static final int SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT64_OFFSET = 32;
	private static final int SHADER_DENORM_PRESERVE_FLOAT16_OFFSET = 36;
	private static final int SHADER_DENORM_PRESERVE_FLOAT32_OFFSET = 40;
	private static final int SHADER_DENORM_PRESERVE_FLOAT64_OFFSET = 44;
	private static final int SHADER_DENORM_FLUSH_TO_ZERO_FLOAT16_OFFSET = 48;
	private static final int SHADER_DENORM_FLUSH_TO_ZERO_FLOAT32_OFFSET = 52;
	private static final int SHADER_DENORM_FLUSH_TO_ZERO_FLOAT64_OFFSET = 56;
	private static final int SHADER_ROUNDING_MODE_RTEFLOAT16_OFFSET = 60;
	private static final int SHADER_ROUNDING_MODE_RTEFLOAT32_OFFSET = 64;
	private static final int SHADER_ROUNDING_MODE_RTEFLOAT64_OFFSET = 68;
	private static final int SHADER_ROUNDING_MODE_RTZFLOAT16_OFFSET = 72;
	private static final int SHADER_ROUNDING_MODE_RTZFLOAT32_OFFSET = 76;
	private static final int SHADER_ROUNDING_MODE_RTZFLOAT64_OFFSET = 80;
	
	public VkPhysicalDeviceFloatControlsPropertiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceFloatControlsPropertiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceFloatControlsPropertiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceFloatControlsPropertiesKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceFloatControlsPropertiesKHR sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 0);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceFloatControlsPropertiesKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderFloatControlsIndependence")
	public int denormBehaviorIndependence() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DENORM_BEHAVIOR_INDEPENDENCE_OFFSET);
	}
	
	@NativeType("VkShaderFloatControlsIndependence")
	public VkPhysicalDeviceFloatControlsPropertiesKHR denormBehaviorIndependence(int value) {
		INT_HANDLE.set(this.segment, this.offset + DENORM_BEHAVIOR_INDEPENDENCE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderFloatControlsIndependence")
	public int roundingModeIndependence() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ROUNDING_MODE_INDEPENDENCE_OFFSET);
	}
	
	@NativeType("VkShaderFloatControlsIndependence")
	public VkPhysicalDeviceFloatControlsPropertiesKHR roundingModeIndependence(int value) {
		INT_HANDLE.set(this.segment, this.offset + ROUNDING_MODE_INDEPENDENCE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderSignedZeroInfNanPreserveFloat16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT16_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderSignedZeroInfNanPreserveFloat16(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT16_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderSignedZeroInfNanPreserveFloat32() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT32_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderSignedZeroInfNanPreserveFloat32(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT32_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderSignedZeroInfNanPreserveFloat64() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT64_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderSignedZeroInfNanPreserveFloat64(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SIGNED_ZERO_INF_NAN_PRESERVE_FLOAT64_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderDenormPreserveFloat16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_DENORM_PRESERVE_FLOAT16_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderDenormPreserveFloat16(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_DENORM_PRESERVE_FLOAT16_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderDenormPreserveFloat32() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_DENORM_PRESERVE_FLOAT32_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderDenormPreserveFloat32(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_DENORM_PRESERVE_FLOAT32_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderDenormPreserveFloat64() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_DENORM_PRESERVE_FLOAT64_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderDenormPreserveFloat64(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_DENORM_PRESERVE_FLOAT64_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderDenormFlushToZeroFloat16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_DENORM_FLUSH_TO_ZERO_FLOAT16_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderDenormFlushToZeroFloat16(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_DENORM_FLUSH_TO_ZERO_FLOAT16_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderDenormFlushToZeroFloat32() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_DENORM_FLUSH_TO_ZERO_FLOAT32_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderDenormFlushToZeroFloat32(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_DENORM_FLUSH_TO_ZERO_FLOAT32_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderDenormFlushToZeroFloat64() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_DENORM_FLUSH_TO_ZERO_FLOAT64_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderDenormFlushToZeroFloat64(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_DENORM_FLUSH_TO_ZERO_FLOAT64_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderRoundingModeRTEFloat16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_ROUNDING_MODE_RTEFLOAT16_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderRoundingModeRTEFloat16(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_ROUNDING_MODE_RTEFLOAT16_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderRoundingModeRTEFloat32() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_ROUNDING_MODE_RTEFLOAT32_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderRoundingModeRTEFloat32(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_ROUNDING_MODE_RTEFLOAT32_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderRoundingModeRTEFloat64() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_ROUNDING_MODE_RTEFLOAT64_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderRoundingModeRTEFloat64(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_ROUNDING_MODE_RTEFLOAT64_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderRoundingModeRTZFloat16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_ROUNDING_MODE_RTZFLOAT16_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderRoundingModeRTZFloat16(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_ROUNDING_MODE_RTZFLOAT16_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderRoundingModeRTZFloat32() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_ROUNDING_MODE_RTZFLOAT32_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderRoundingModeRTZFloat32(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_ROUNDING_MODE_RTZFLOAT32_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderRoundingModeRTZFloat64() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_ROUNDING_MODE_RTZFLOAT64_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceFloatControlsPropertiesKHR shaderRoundingModeRTZFloat64(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_ROUNDING_MODE_RTZFLOAT64_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceFloatControlsPropertiesKHR> {
		
		private static final StructConstructor<VkPhysicalDeviceFloatControlsPropertiesKHR> CONSTRUCTOR = VkPhysicalDeviceFloatControlsPropertiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceFloatControlsPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceFloatControlsPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceFloatControlsPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}