package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkGeometryTrianglesNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBuffer* vertexData;
* 	VkDeviceSize vertexOffset;
* 	uint32_t vertexCount;
* 	// pad (4)
* 	VkDeviceSize vertexStride;
* 	VkFormat vertexFormat;
* 	// pad (4)
* 	VkBuffer* indexData;
* 	VkDeviceSize indexOffset;
* 	uint32_t indexCount;
* 	VkIndexType indexType;
* 	VkBuffer* transformData;
* 	VkDeviceSize transformOffset;
* };
*</pre>
**/
@AutoGenerated
public final class VkGeometryTrianglesNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int VERTEX_DATA_OFFSET = 16;
	private static final int VERTEX_OFFSET_OFFSET = 24;
	private static final int VERTEX_COUNT_OFFSET = 32;
	private static final int VERTEX_STRIDE_OFFSET = 40;
	private static final int VERTEX_FORMAT_OFFSET = 48;
	private static final int INDEX_DATA_OFFSET = 56;
	private static final int INDEX_OFFSET_OFFSET = 64;
	private static final int INDEX_COUNT_OFFSET = 72;
	private static final int INDEX_TYPE_OFFSET = 76;
	private static final int TRANSFORM_DATA_OFFSET = 80;
	private static final int TRANSFORM_OFFSET_OFFSET = 88;
	
	public VkGeometryTrianglesNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkGeometryTrianglesNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkGeometryTrianglesNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV **/
	@NativeType("VkStructureType")
	public VkGeometryTrianglesNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV **/
	@NativeType("VkStructureType")
	public VkGeometryTrianglesNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000165004);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkGeometryTrianglesNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public long vertexData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + VERTEX_DATA_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public VkGeometryTrianglesNV vertexData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + VERTEX_DATA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long vertexOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + VERTEX_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeometryTrianglesNV vertexOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + VERTEX_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int vertexCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERTEX_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkGeometryTrianglesNV vertexCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + VERTEX_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long vertexStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + VERTEX_STRIDE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeometryTrianglesNV vertexStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + VERTEX_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkFormat")
	public int vertexFormat() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERTEX_FORMAT_OFFSET);
	}
	
	@NativeType("VkFormat")
	public VkGeometryTrianglesNV vertexFormat(int value) {
		INT_HANDLE.set(this.segment, this.offset + VERTEX_FORMAT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public long indexData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + INDEX_DATA_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public VkGeometryTrianglesNV indexData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + INDEX_DATA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long indexOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + INDEX_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeometryTrianglesNV indexOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + INDEX_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int indexCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDEX_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkGeometryTrianglesNV indexCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + INDEX_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndexType")
	public int indexType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDEX_TYPE_OFFSET);
	}
	
	@NativeType("VkIndexType")
	public VkGeometryTrianglesNV indexType(int value) {
		INT_HANDLE.set(this.segment, this.offset + INDEX_TYPE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public long transformData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + TRANSFORM_DATA_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public VkGeometryTrianglesNV transformData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + TRANSFORM_DATA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long transformOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + TRANSFORM_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeometryTrianglesNV transformOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + TRANSFORM_OFFSET_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkGeometryTrianglesNV> {
		
		private static final StructConstructor<VkGeometryTrianglesNV> CONSTRUCTOR = VkGeometryTrianglesNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkGeometryTrianglesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkGeometryTrianglesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkGeometryTrianglesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}