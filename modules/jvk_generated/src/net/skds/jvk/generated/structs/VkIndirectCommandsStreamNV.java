package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkIndirectCommandsStreamNV {
* 	VkBuffer* buffer;
* 	VkDeviceSize offset;
* };
*</pre>
**/
@AutoGenerated
public final class VkIndirectCommandsStreamNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int BUFFER_OFFSET = 0;
	private static final int OFFSET_OFFSET = 8;
	
	public VkIndirectCommandsStreamNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsStreamNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsStreamNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkBuffer*")
	public long buffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + BUFFER_OFFSET);
	}
	
	@NativeType("VkBuffer*")
	public VkIndirectCommandsStreamNV buffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long offset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkIndirectCommandsStreamNV offset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OFFSET_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkIndirectCommandsStreamNV> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkIndirectCommandsStreamNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkIndirectCommandsStreamNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkIndirectCommandsStreamNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}