package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkExternalImageFormatPropertiesNV {
* 	VkImageFormatProperties imageFormatProperties;
* 	VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
* 	VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
* 	VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkExternalImageFormatPropertiesNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkImageFormatProperties.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int IMAGE_FORMAT_PROPERTIES_OFFSET = 0;
	private static final int EXTERNAL_MEMORY_FEATURES_OFFSET = 32;
	private static final int EXPORT_FROM_IMPORTED_HANDLE_TYPES_OFFSET = 36;
	private static final int COMPATIBLE_HANDLE_TYPES_OFFSET = 40;
	
	public VkExternalImageFormatPropertiesNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkExternalImageFormatPropertiesNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkExternalImageFormatPropertiesNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkImageFormatProperties")
	public VkImageFormatProperties imageFormatProperties() {
		return new VkImageFormatProperties(this.segment, this.offset + IMAGE_FORMAT_PROPERTIES_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkExternalMemoryFeatureFlagsNV")
	public int externalMemoryFeatures() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTERNAL_MEMORY_FEATURES_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkExternalMemoryFeatureFlagsNV")
	public VkExternalImageFormatPropertiesNV externalMemoryFeatures(int value) {
		INT_HANDLE.set(this.segment, this.offset + EXTERNAL_MEMORY_FEATURES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkExternalMemoryHandleTypeFlagsNV")
	public int exportFromImportedHandleTypes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXPORT_FROM_IMPORTED_HANDLE_TYPES_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkExternalMemoryHandleTypeFlagsNV")
	public VkExternalImageFormatPropertiesNV exportFromImportedHandleTypes(int value) {
		INT_HANDLE.set(this.segment, this.offset + EXPORT_FROM_IMPORTED_HANDLE_TYPES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkExternalMemoryHandleTypeFlagsNV")
	public int compatibleHandleTypes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMPATIBLE_HANDLE_TYPES_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkExternalMemoryHandleTypeFlagsNV")
	public VkExternalImageFormatPropertiesNV compatibleHandleTypes(int value) {
		INT_HANDLE.set(this.segment, this.offset + COMPATIBLE_HANDLE_TYPES_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkExternalImageFormatPropertiesNV> {
		
		private static final StructConstructor<VkExternalImageFormatPropertiesNV> CONSTRUCTOR = VkExternalImageFormatPropertiesNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkExternalImageFormatPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkExternalImageFormatPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkExternalImageFormatPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}