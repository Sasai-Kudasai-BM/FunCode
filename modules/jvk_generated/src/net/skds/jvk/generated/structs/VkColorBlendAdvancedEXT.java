package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkColorBlendAdvancedEXT {
* 	VkBlendOp advancedBlendOp;
* 	VkBool32 srcPremultiplied;
* 	VkBool32 dstPremultiplied;
* 	VkBlendOverlapEXT blendOverlap;
* 	VkBool32 clampResults;
* };
*</pre>
**/
@AutoGenerated
public final class VkColorBlendAdvancedEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int ADVANCED_BLEND_OP_OFFSET = 0;
	private static final int SRC_PREMULTIPLIED_OFFSET = 4;
	private static final int DST_PREMULTIPLIED_OFFSET = 8;
	private static final int BLEND_OVERLAP_OFFSET = 12;
	private static final int CLAMP_RESULTS_OFFSET = 16;
	
	public VkColorBlendAdvancedEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkColorBlendAdvancedEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkColorBlendAdvancedEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkBlendOp")
	public int advancedBlendOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ADVANCED_BLEND_OP_OFFSET);
	}
	
	@NativeType("VkBlendOp")
	public VkColorBlendAdvancedEXT advancedBlendOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + ADVANCED_BLEND_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean srcPremultiplied() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SRC_PREMULTIPLIED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkColorBlendAdvancedEXT srcPremultiplied(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SRC_PREMULTIPLIED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean dstPremultiplied() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_PREMULTIPLIED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkColorBlendAdvancedEXT dstPremultiplied(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DST_PREMULTIPLIED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBlendOverlapEXT")
	public int blendOverlap() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BLEND_OVERLAP_OFFSET);
	}
	
	@NativeType("VkBlendOverlapEXT")
	public VkColorBlendAdvancedEXT blendOverlap(int value) {
		INT_HANDLE.set(this.segment, this.offset + BLEND_OVERLAP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean clampResults() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CLAMP_RESULTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkColorBlendAdvancedEXT clampResults(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + CLAMP_RESULTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkColorBlendAdvancedEXT> {
		
		private static final StructConstructor<VkColorBlendAdvancedEXT> CONSTRUCTOR = VkColorBlendAdvancedEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkColorBlendAdvancedEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkColorBlendAdvancedEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkColorBlendAdvancedEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}