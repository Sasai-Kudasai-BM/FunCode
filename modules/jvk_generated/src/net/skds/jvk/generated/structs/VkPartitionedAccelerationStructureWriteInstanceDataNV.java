package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPartitionedAccelerationStructureWriteInstanceDataNV {
* 	VkTransformMatrixKHR transform;
* 	float[6] explicitAABB;
* 	uint32_t instanceID;
* 	uint32_t instanceMask;
* 	uint32_t instanceContributionToHitGroupIndex;
* 	VkPartitionedAccelerationStructureInstanceFlagsNV instanceFlags;
* 	uint32_t instanceIndex;
* 	uint32_t partitionIndex;
* 	VkDeviceAddress accelerationStructure;
* };
*</pre>
**/
@AutoGenerated
public final class VkPartitionedAccelerationStructureWriteInstanceDataNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkTransformMatrixKHR.MEMORY_LAYOUT,
			sequenceLayout(6, JAVA_FLOAT),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG
	);
	private static final int TRANSFORM_OFFSET = 0;
	private static final int EXPLICIT_AABB_OFFSET = 48;
	private static final int INSTANCE_ID_OFFSET = 72;
	private static final int INSTANCE_MASK_OFFSET = 76;
	private static final int INSTANCE_CONTRIBUTION_TO_HIT_GROUP_INDEX_OFFSET = 80;
	private static final int INSTANCE_FLAGS_OFFSET = 84;
	private static final int INSTANCE_INDEX_OFFSET = 88;
	private static final int PARTITION_INDEX_OFFSET = 92;
	private static final int ACCELERATION_STRUCTURE_OFFSET = 96;
	
	public VkPartitionedAccelerationStructureWriteInstanceDataNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPartitionedAccelerationStructureWriteInstanceDataNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPartitionedAccelerationStructureWriteInstanceDataNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkTransformMatrixKHR")
	public VkTransformMatrixKHR transform() {
		return new VkTransformMatrixKHR(this.segment, this.offset + TRANSFORM_OFFSET);
	}
	
	@NativeType("float[6]")
	public float explicitAABB(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + EXPLICIT_AABB_OFFSET + JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[6]")
	public float[] explicitAABBArray() {
		var array = new float[6];
		MemorySegment.copy(this.segment, FLOAT, this.offset + EXPLICIT_AABB_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("float[6]")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV explicitAABB(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + EXPLICIT_AABB_OFFSET + JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("float[6]")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV explicitAABB(float[] value) {
		MemorySegment.copy(value, 0, this.segment, FLOAT, this.offset + EXPLICIT_AABB_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint32_t")
	public int instanceID() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INSTANCE_ID_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV instanceID(int value) {
		INT_HANDLE.set(this.segment, this.offset + INSTANCE_ID_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int instanceMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INSTANCE_MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV instanceMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + INSTANCE_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int instanceContributionToHitGroupIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INSTANCE_CONTRIBUTION_TO_HIT_GROUP_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV instanceContributionToHitGroupIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + INSTANCE_CONTRIBUTION_TO_HIT_GROUP_INDEX_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPartitionedAccelerationStructureInstanceFlagsNV")
	public int instanceFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INSTANCE_FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPartitionedAccelerationStructureInstanceFlagsNV")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV instanceFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + INSTANCE_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int instanceIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INSTANCE_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV instanceIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + INSTANCE_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int partitionIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PARTITION_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV partitionIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + PARTITION_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long accelerationStructure() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + ACCELERATION_STRUCTURE_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkPartitionedAccelerationStructureWriteInstanceDataNV accelerationStructure(long value) {
		LONG_HANDLE.set(this.segment, this.offset + ACCELERATION_STRUCTURE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPartitionedAccelerationStructureWriteInstanceDataNV> {
		
		private static final StructConstructor<VkPartitionedAccelerationStructureWriteInstanceDataNV> CONSTRUCTOR = VkPartitionedAccelerationStructureWriteInstanceDataNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPartitionedAccelerationStructureWriteInstanceDataNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPartitionedAccelerationStructureWriteInstanceDataNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPartitionedAccelerationStructureWriteInstanceDataNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}