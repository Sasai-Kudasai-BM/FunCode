package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkDisplayPropertiesKHR {
* 	VkDisplayKHR* display;
* 	char* displayName;
* 	VkExtent2D physicalDimensions;
* 	VkExtent2D physicalResolution;
* 	VkSurfaceTransformFlagsKHR supportedTransforms;
* 	VkBool32 planeReorderPossible;
* 	VkBool32 persistentContent;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkDisplayPropertiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_LONG,
			JAVA_LONG,
			VkExtent2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int DISPLAY_OFFSET = 0;
	private static final int DISPLAY_NAME_OFFSET = 8;
	private static final int PHYSICAL_DIMENSIONS_OFFSET = 16;
	private static final int PHYSICAL_RESOLUTION_OFFSET = 24;
	private static final int SUPPORTED_TRANSFORMS_OFFSET = 32;
	private static final int PLANE_REORDER_POSSIBLE_OFFSET = 36;
	private static final int PERSISTENT_CONTENT_OFFSET = 40;
	
	public VkDisplayPropertiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDisplayPropertiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDisplayPropertiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkDisplayKHR*")
	public long display() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DISPLAY_OFFSET);
	}
	
	@NativeType("VkDisplayKHR*")
	public VkDisplayPropertiesKHR display(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DISPLAY_OFFSET, value);
		return this;
	}
	
	@NativeType("char*")
	public long displayName() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DISPLAY_NAME_OFFSET);
	}
	
	@NativeType("char*")
	public VkDisplayPropertiesKHR displayName(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DISPLAY_NAME_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D physicalDimensions() {
		return new VkExtent2D(this.segment, this.offset + PHYSICAL_DIMENSIONS_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D physicalResolution() {
		return new VkExtent2D(this.segment, this.offset + PHYSICAL_RESOLUTION_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSurfaceTransformFlagsKHR")
	public int supportedTransforms() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_TRANSFORMS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSurfaceTransformFlagsKHR")
	public VkDisplayPropertiesKHR supportedTransforms(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_TRANSFORMS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean planeReorderPossible() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PLANE_REORDER_POSSIBLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkDisplayPropertiesKHR planeReorderPossible(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PLANE_REORDER_POSSIBLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean persistentContent() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PERSISTENT_CONTENT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkDisplayPropertiesKHR persistentContent(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PERSISTENT_CONTENT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkDisplayPropertiesKHR> {
		
		private static final StructConstructor<VkDisplayPropertiesKHR> CONSTRUCTOR = VkDisplayPropertiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkDisplayPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkDisplayPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkDisplayPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}