package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkCoarseSampleOrderCustomNV {
* 	VkShadingRatePaletteEntryNV shadingRate;
* 	uint32_t sampleCount;
* 	uint32_t sampleLocationCount;
* 	// pad (4)
* 	VkCoarseSampleLocationNV* pSampleLocations;
* };
*</pre>
**/
@AutoGenerated
public final class VkCoarseSampleOrderCustomNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int SHADING_RATE_OFFSET = 0;
	private static final int SAMPLE_COUNT_OFFSET = 4;
	private static final int SAMPLE_LOCATION_COUNT_OFFSET = 8;
	private static final int P_SAMPLE_LOCATIONS_OFFSET = 16;
	
	public VkCoarseSampleOrderCustomNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkCoarseSampleOrderCustomNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkCoarseSampleOrderCustomNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkShadingRatePaletteEntryNV")
	public int shadingRate() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADING_RATE_OFFSET);
	}
	
	@NativeType("VkShadingRatePaletteEntryNV")
	public VkCoarseSampleOrderCustomNV shadingRate(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADING_RATE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int sampleCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCoarseSampleOrderCustomNV sampleCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int sampleLocationCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLE_LOCATION_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCoarseSampleOrderCustomNV sampleLocationCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLE_LOCATION_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkCoarseSampleLocationNV*")
	public long pSampleLocations() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_SAMPLE_LOCATIONS_OFFSET);
	}
	
	@NativeType("VkCoarseSampleLocationNV*")
	public VkCoarseSampleOrderCustomNV pSampleLocations(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_SAMPLE_LOCATIONS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkCoarseSampleOrderCustomNV> {
		
		private static final StructConstructor<VkCoarseSampleOrderCustomNV> CONSTRUCTOR = VkCoarseSampleOrderCustomNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkCoarseSampleOrderCustomNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkCoarseSampleOrderCustomNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkCoarseSampleOrderCustomNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}