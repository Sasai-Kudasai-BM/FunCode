package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.jvk.generated.unions.VkAccelerationStructureMotionInstanceDataNV;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkAccelerationStructureMotionInstanceNV {
* 	VkAccelerationStructureMotionInstanceTypeNV type;
* 	VkAccelerationStructureMotionInstanceFlagsNV flags;
* 	VkAccelerationStructureMotionInstanceDataNV data;
* };
*</pre>
**/
@AutoGenerated
public final class VkAccelerationStructureMotionInstanceNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			VkAccelerationStructureMotionInstanceDataNV.MEMORY_LAYOUT
	);
	private static final int TYPE_OFFSET = 0;
	private static final int FLAGS_OFFSET = 4;
	private static final int DATA_OFFSET = 8;
	
	public VkAccelerationStructureMotionInstanceNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAccelerationStructureMotionInstanceNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAccelerationStructureMotionInstanceNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkAccelerationStructureMotionInstanceTypeNV")
	public int type() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TYPE_OFFSET);
	}
	
	@NativeType("VkAccelerationStructureMotionInstanceTypeNV")
	public VkAccelerationStructureMotionInstanceNV type(int value) {
		INT_HANDLE.set(this.segment, this.offset + TYPE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkAccelerationStructureMotionInstanceFlagsNV")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAccelerationStructureMotionInstanceFlagsNV")
	public VkAccelerationStructureMotionInstanceNV flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAccelerationStructureMotionInstanceDataNV")
	public VkAccelerationStructureMotionInstanceDataNV data() {
		return new VkAccelerationStructureMotionInstanceDataNV(this.segment, this.offset + DATA_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkAccelerationStructureMotionInstanceNV> {
		
		private static final StructConstructor<VkAccelerationStructureMotionInstanceNV> CONSTRUCTOR = VkAccelerationStructureMotionInstanceNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkAccelerationStructureMotionInstanceNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkAccelerationStructureMotionInstanceNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkAccelerationStructureMotionInstanceNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}