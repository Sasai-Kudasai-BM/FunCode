package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkClusterAccelerationStructureCommandsInfoNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkClusterAccelerationStructureInputInfoNV input;
* 	VkDeviceAddress dstImplicitData;
* 	VkDeviceAddress scratchData;
* 	VkStridedDeviceAddressRegionKHR dstAddressesArray;
* 	VkStridedDeviceAddressRegionKHR dstSizesArray;
* 	VkStridedDeviceAddressRegionKHR srcInfosArray;
* 	VkDeviceAddress srcInfosCount;
* 	VkClusterAccelerationStructureAddressResolutionFlagsNV addressResolutionFlags;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkClusterAccelerationStructureCommandsInfoNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			VkClusterAccelerationStructureInputInfoNV.MEMORY_LAYOUT,
			JAVA_LONG,
			JAVA_LONG,
			VkStridedDeviceAddressRegionKHR.MEMORY_LAYOUT,
			VkStridedDeviceAddressRegionKHR.MEMORY_LAYOUT,
			VkStridedDeviceAddressRegionKHR.MEMORY_LAYOUT,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int INPUT_OFFSET = 16;
	private static final int DST_IMPLICIT_DATA_OFFSET = 56;
	private static final int SCRATCH_DATA_OFFSET = 64;
	private static final int DST_ADDRESSES_ARRAY_OFFSET = 72;
	private static final int DST_SIZES_ARRAY_OFFSET = 96;
	private static final int SRC_INFOS_ARRAY_OFFSET = 120;
	private static final int SRC_INFOS_COUNT_OFFSET = 144;
	private static final int ADDRESS_RESOLUTION_FLAGS_OFFSET = 152;
	
	public VkClusterAccelerationStructureCommandsInfoNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClusterAccelerationStructureCommandsInfoNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClusterAccelerationStructureCommandsInfoNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV **/
	@NativeType("VkStructureType")
	public VkClusterAccelerationStructureCommandsInfoNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV **/
	@NativeType("VkStructureType")
	public VkClusterAccelerationStructureCommandsInfoNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000569006);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkClusterAccelerationStructureCommandsInfoNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkClusterAccelerationStructureInputInfoNV")
	public VkClusterAccelerationStructureInputInfoNV input() {
		return new VkClusterAccelerationStructureInputInfoNV(this.segment, this.offset + INPUT_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public long dstImplicitData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DST_IMPLICIT_DATA_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureCommandsInfoNV dstImplicitData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DST_IMPLICIT_DATA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long scratchData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SCRATCH_DATA_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureCommandsInfoNV scratchData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SCRATCH_DATA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkStridedDeviceAddressRegionKHR")
	public VkStridedDeviceAddressRegionKHR dstAddressesArray() {
		return new VkStridedDeviceAddressRegionKHR(this.segment, this.offset + DST_ADDRESSES_ARRAY_OFFSET);
	}
	
	@NativeType("VkStridedDeviceAddressRegionKHR")
	public VkStridedDeviceAddressRegionKHR dstSizesArray() {
		return new VkStridedDeviceAddressRegionKHR(this.segment, this.offset + DST_SIZES_ARRAY_OFFSET);
	}
	
	@NativeType("VkStridedDeviceAddressRegionKHR")
	public VkStridedDeviceAddressRegionKHR srcInfosArray() {
		return new VkStridedDeviceAddressRegionKHR(this.segment, this.offset + SRC_INFOS_ARRAY_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public long srcInfosCount() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SRC_INFOS_COUNT_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureCommandsInfoNV srcInfosCount(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SRC_INFOS_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkClusterAccelerationStructureAddressResolutionFlagsNV")
	public int addressResolutionFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ADDRESS_RESOLUTION_FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkClusterAccelerationStructureAddressResolutionFlagsNV")
	public VkClusterAccelerationStructureCommandsInfoNV addressResolutionFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + ADDRESS_RESOLUTION_FLAGS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkClusterAccelerationStructureCommandsInfoNV> {
		
		private static final StructConstructor<VkClusterAccelerationStructureCommandsInfoNV> CONSTRUCTOR = VkClusterAccelerationStructureCommandsInfoNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkClusterAccelerationStructureCommandsInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkClusterAccelerationStructureCommandsInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkClusterAccelerationStructureCommandsInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}