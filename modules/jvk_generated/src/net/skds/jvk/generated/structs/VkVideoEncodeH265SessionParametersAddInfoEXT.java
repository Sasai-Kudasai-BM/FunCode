package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVideoEncodeH265SessionParametersAddInfoEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t vpsStdCount;
* 	// pad (4)
* 	StdVideoH265VideoParameterSet* pVpsStd;
* 	uint32_t spsStdCount;
* 	// pad (4)
* 	StdVideoH265SequenceParameterSet* pSpsStd;
* 	uint32_t ppsStdCount;
* 	// pad (4)
* 	StdVideoH265PictureParameterSet* pPpsStd;
* };
*</pre>
**/
@AutoGenerated
public final class VkVideoEncodeH265SessionParametersAddInfoEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int VPS_STD_COUNT_OFFSET = 16;
	private static final int P_VPS_STD_OFFSET = 24;
	private static final int SPS_STD_COUNT_OFFSET = 32;
	private static final int P_SPS_STD_OFFSET = 40;
	private static final int PPS_STD_COUNT_OFFSET = 48;
	private static final int P_PPS_STD_OFFSET = 56;
	
	public VkVideoEncodeH265SessionParametersAddInfoEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeH265SessionParametersAddInfoEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeH265SessionParametersAddInfoEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT **/
	@NativeType("VkStructureType")
	public VkVideoEncodeH265SessionParametersAddInfoEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT **/
	@NativeType("VkStructureType")
	public VkVideoEncodeH265SessionParametersAddInfoEXT sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 2);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkVideoEncodeH265SessionParametersAddInfoEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int vpsStdCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VPS_STD_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeH265SessionParametersAddInfoEXT vpsStdCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + VPS_STD_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("StdVideoH265VideoParameterSet*")
	public long pVpsStd() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_VPS_STD_OFFSET);
	}
	
	/** optional **/
	@NativeType("StdVideoH265VideoParameterSet*")
	public VkVideoEncodeH265SessionParametersAddInfoEXT pVpsStd(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_VPS_STD_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int spsStdCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SPS_STD_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeH265SessionParametersAddInfoEXT spsStdCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SPS_STD_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("StdVideoH265SequenceParameterSet*")
	public long pSpsStd() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_SPS_STD_OFFSET);
	}
	
	/** optional **/
	@NativeType("StdVideoH265SequenceParameterSet*")
	public VkVideoEncodeH265SessionParametersAddInfoEXT pSpsStd(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_SPS_STD_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int ppsStdCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PPS_STD_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeH265SessionParametersAddInfoEXT ppsStdCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PPS_STD_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("StdVideoH265PictureParameterSet*")
	public long pPpsStd() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_PPS_STD_OFFSET);
	}
	
	/** optional **/
	@NativeType("StdVideoH265PictureParameterSet*")
	public VkVideoEncodeH265SessionParametersAddInfoEXT pPpsStd(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_PPS_STD_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVideoEncodeH265SessionParametersAddInfoEXT> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVideoEncodeH265SessionParametersAddInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVideoEncodeH265SessionParametersAddInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVideoEncodeH265SessionParametersAddInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}