package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceDriverProperties {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkDriverId driverID;
* 	char[256] driverName;
* 	char[256] driverInfo;
* 	VkConformanceVersion conformanceVersion;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceDriverPropertiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			sequenceLayout(256, JAVA_BYTE),
			sequenceLayout(256, JAVA_BYTE),
			VkConformanceVersion.MEMORY_LAYOUT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int DRIVER_ID_OFFSET = 16;
	private static final int DRIVER_NAME_OFFSET = 20;
	private static final int DRIVER_INFO_OFFSET = 276;
	private static final int CONFORMANCE_VERSION_OFFSET = 532;
	
	public VkPhysicalDeviceDriverPropertiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDriverPropertiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDriverPropertiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceDriverPropertiesKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceDriverPropertiesKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000196000);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceDriverPropertiesKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDriverId")
	public int driverID() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DRIVER_ID_OFFSET);
	}
	
	@NativeType("VkDriverId")
	public VkPhysicalDeviceDriverPropertiesKHR driverID(int value) {
		INT_HANDLE.set(this.segment, this.offset + DRIVER_ID_OFFSET, value);
		return this;
	}
	
	@NativeType("char[256]")
	public byte driverName(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DRIVER_NAME_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[256]")
	public byte[] driverNameArray() {
		var array = new byte[256];
		MemorySegment.copy(this.segment, BYTE, this.offset + DRIVER_NAME_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("char[256]")
	public String driverName() {
		return this.segment.getString(this.offset + DRIVER_NAME_OFFSET);
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceDriverPropertiesKHR driverName(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DRIVER_NAME_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceDriverPropertiesKHR driverName(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + DRIVER_NAME_OFFSET, value.length);
		return this;
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceDriverPropertiesKHR driverName(String value) {
		this.segment.setString(this.offset + DRIVER_NAME_OFFSET, value);
		return this;
	}
	
	@NativeType("char[256]")
	public byte driverInfo(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DRIVER_INFO_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[256]")
	public byte[] driverInfoArray() {
		var array = new byte[256];
		MemorySegment.copy(this.segment, BYTE, this.offset + DRIVER_INFO_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("char[256]")
	public String driverInfo() {
		return this.segment.getString(this.offset + DRIVER_INFO_OFFSET);
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceDriverPropertiesKHR driverInfo(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DRIVER_INFO_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceDriverPropertiesKHR driverInfo(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + DRIVER_INFO_OFFSET, value.length);
		return this;
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceDriverPropertiesKHR driverInfo(String value) {
		this.segment.setString(this.offset + DRIVER_INFO_OFFSET, value);
		return this;
	}
	
	@NativeType("VkConformanceVersion")
	public VkConformanceVersion conformanceVersion() {
		return new VkConformanceVersion(this.segment, this.offset + CONFORMANCE_VERSION_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceDriverPropertiesKHR> {
		
		private static final StructConstructor<VkPhysicalDeviceDriverPropertiesKHR> CONSTRUCTOR = VkPhysicalDeviceDriverPropertiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceDriverPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceDriverPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceDriverPropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}