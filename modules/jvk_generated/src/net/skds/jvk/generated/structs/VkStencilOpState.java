package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkStencilOpState {
* 	VkStencilOp failOp;
* 	VkStencilOp passOp;
* 	VkStencilOp depthFailOp;
* 	VkCompareOp compareOp;
* 	uint32_t compareMask;
* 	uint32_t writeMask;
* 	uint32_t reference;
* };
*</pre>
**/
@AutoGenerated
public final class VkStencilOpState extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int FAIL_OP_OFFSET = 0;
	private static final int PASS_OP_OFFSET = 4;
	private static final int DEPTH_FAIL_OP_OFFSET = 8;
	private static final int COMPARE_OP_OFFSET = 12;
	private static final int COMPARE_MASK_OFFSET = 16;
	private static final int WRITE_MASK_OFFSET = 20;
	private static final int REFERENCE_OFFSET = 24;
	
	public VkStencilOpState() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkStencilOpState(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkStencilOpState(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkStencilOp")
	public int failOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FAIL_OP_OFFSET);
	}
	
	@NativeType("VkStencilOp")
	public VkStencilOpState failOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + FAIL_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkStencilOp")
	public int passOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PASS_OP_OFFSET);
	}
	
	@NativeType("VkStencilOp")
	public VkStencilOpState passOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + PASS_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkStencilOp")
	public int depthFailOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_FAIL_OP_OFFSET);
	}
	
	@NativeType("VkStencilOp")
	public VkStencilOpState depthFailOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_FAIL_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkCompareOp")
	public int compareOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMPARE_OP_OFFSET);
	}
	
	@NativeType("VkCompareOp")
	public VkStencilOpState compareOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + COMPARE_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int compareMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMPARE_MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkStencilOpState compareMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + COMPARE_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int writeMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + WRITE_MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkStencilOpState writeMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + WRITE_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int reference() {
		return (int) INT_HANDLE.get(this.segment, this.offset + REFERENCE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkStencilOpState reference(int value) {
		INT_HANDLE.set(this.segment, this.offset + REFERENCE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkStencilOpState> {
		
		private static final StructConstructor<VkStencilOpState> CONSTRUCTOR = VkStencilOpState::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkStencilOpState[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkStencilOpState[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkStencilOpState[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}