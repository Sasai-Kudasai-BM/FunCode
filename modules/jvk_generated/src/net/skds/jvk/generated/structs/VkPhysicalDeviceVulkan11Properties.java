package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceVulkan11Properties {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint8_t[16] deviceUUID;
* 	uint8_t[16] driverUUID;
* 	uint8_t[8] deviceLUID;
* 	uint32_t deviceNodeMask;
* 	VkBool32 deviceLUIDValid;
* 	uint32_t subgroupSize;
* 	VkShaderStageFlags subgroupSupportedStages;
* 	VkSubgroupFeatureFlags subgroupSupportedOperations;
* 	VkBool32 subgroupQuadOperationsInAllStages;
* 	VkPointClippingBehavior pointClippingBehavior;
* 	uint32_t maxMultiviewViewCount;
* 	uint32_t maxMultiviewInstanceIndex;
* 	VkBool32 protectedNoFault;
* 	uint32_t maxPerSetDescriptors;
* 	// pad (4)
* 	VkDeviceSize maxMemoryAllocationSize;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceVulkan11Properties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			sequenceLayout(16, JAVA_BYTE),
			sequenceLayout(16, JAVA_BYTE),
			sequenceLayout(8, JAVA_BYTE),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int DEVICE_UUID_OFFSET = 16;
	private static final int DRIVER_UUID_OFFSET = 32;
	private static final int DEVICE_LUID_OFFSET = 48;
	private static final int DEVICE_NODE_MASK_OFFSET = 56;
	private static final int DEVICE_LUIDVALID_OFFSET = 60;
	private static final int SUBGROUP_SIZE_OFFSET = 64;
	private static final int SUBGROUP_SUPPORTED_STAGES_OFFSET = 68;
	private static final int SUBGROUP_SUPPORTED_OPERATIONS_OFFSET = 72;
	private static final int SUBGROUP_QUAD_OPERATIONS_IN_ALL_STAGES_OFFSET = 76;
	private static final int POINT_CLIPPING_BEHAVIOR_OFFSET = 80;
	private static final int MAX_MULTIVIEW_VIEW_COUNT_OFFSET = 84;
	private static final int MAX_MULTIVIEW_INSTANCE_INDEX_OFFSET = 88;
	private static final int PROTECTED_NO_FAULT_OFFSET = 92;
	private static final int MAX_PER_SET_DESCRIPTORS_OFFSET = 96;
	private static final int MAX_MEMORY_ALLOCATION_SIZE_OFFSET = 104;
	
	public VkPhysicalDeviceVulkan11Properties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan11Properties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan11Properties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan11Properties sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan11Properties sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 50);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceVulkan11Properties pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t[16]")
	public byte deviceUUID(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DEVICE_UUID_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("uint8_t[16]")
	public byte[] deviceUUIDArray() {
		var array = new byte[16];
		MemorySegment.copy(this.segment, BYTE, this.offset + DEVICE_UUID_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceVulkan11Properties deviceUUID(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DEVICE_UUID_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceVulkan11Properties deviceUUID(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + DEVICE_UUID_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint8_t[16]")
	public byte driverUUID(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DRIVER_UUID_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("uint8_t[16]")
	public byte[] driverUUIDArray() {
		var array = new byte[16];
		MemorySegment.copy(this.segment, BYTE, this.offset + DRIVER_UUID_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceVulkan11Properties driverUUID(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DRIVER_UUID_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceVulkan11Properties driverUUID(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + DRIVER_UUID_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint8_t[8]")
	public byte deviceLUID(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DEVICE_LUID_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("uint8_t[8]")
	public byte[] deviceLUIDArray() {
		var array = new byte[8];
		MemorySegment.copy(this.segment, BYTE, this.offset + DEVICE_LUID_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint8_t[8]")
	public VkPhysicalDeviceVulkan11Properties deviceLUID(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DEVICE_LUID_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint8_t[8]")
	public VkPhysicalDeviceVulkan11Properties deviceLUID(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + DEVICE_LUID_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint32_t")
	public int deviceNodeMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_NODE_MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan11Properties deviceNodeMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_NODE_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean deviceLUIDValid() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_LUIDVALID_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Properties deviceLUIDValid(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_LUIDVALID_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("uint32_t")
	public int subgroupSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBGROUP_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan11Properties subgroupSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUBGROUP_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderStageFlags")
	public int subgroupSupportedStages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBGROUP_SUPPORTED_STAGES_OFFSET);
	}
	
	@NativeType("VkShaderStageFlags")
	public VkPhysicalDeviceVulkan11Properties subgroupSupportedStages(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUBGROUP_SUPPORTED_STAGES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSubgroupFeatureFlags")
	public int subgroupSupportedOperations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBGROUP_SUPPORTED_OPERATIONS_OFFSET);
	}
	
	@NativeType("VkSubgroupFeatureFlags")
	public VkPhysicalDeviceVulkan11Properties subgroupSupportedOperations(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUBGROUP_SUPPORTED_OPERATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean subgroupQuadOperationsInAllStages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBGROUP_QUAD_OPERATIONS_IN_ALL_STAGES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Properties subgroupQuadOperationsInAllStages(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SUBGROUP_QUAD_OPERATIONS_IN_ALL_STAGES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkPointClippingBehavior")
	public int pointClippingBehavior() {
		return (int) INT_HANDLE.get(this.segment, this.offset + POINT_CLIPPING_BEHAVIOR_OFFSET);
	}
	
	@NativeType("VkPointClippingBehavior")
	public VkPhysicalDeviceVulkan11Properties pointClippingBehavior(int value) {
		INT_HANDLE.set(this.segment, this.offset + POINT_CLIPPING_BEHAVIOR_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMultiviewViewCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MULTIVIEW_VIEW_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan11Properties maxMultiviewViewCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MULTIVIEW_VIEW_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMultiviewInstanceIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MULTIVIEW_INSTANCE_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan11Properties maxMultiviewInstanceIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MULTIVIEW_INSTANCE_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean protectedNoFault() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PROTECTED_NO_FAULT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Properties protectedNoFault(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PROTECTED_NO_FAULT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerSetDescriptors() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_SET_DESCRIPTORS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan11Properties maxPerSetDescriptors(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_SET_DESCRIPTORS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long maxMemoryAllocationSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MAX_MEMORY_ALLOCATION_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceVulkan11Properties maxMemoryAllocationSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MAX_MEMORY_ALLOCATION_SIZE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceVulkan11Properties> {
		
		private static final StructConstructor<VkPhysicalDeviceVulkan11Properties> CONSTRUCTOR = VkPhysicalDeviceVulkan11Properties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceVulkan11Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceVulkan11Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceVulkan11Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}