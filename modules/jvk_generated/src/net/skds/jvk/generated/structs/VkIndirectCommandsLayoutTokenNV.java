package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkIndirectCommandsLayoutTokenNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkIndirectCommandsTokenTypeNV tokenType;
* 	uint32_t stream;
* 	uint32_t offset;
* 	uint32_t vertexBindingUnit;
* 	VkBool32 vertexDynamicStride;
* 	// pad (4)
* 	VkPipelineLayout* pushconstantPipelineLayout;
* 	VkShaderStageFlags pushconstantShaderStageFlags;
* 	uint32_t pushconstantOffset;
* 	uint32_t pushconstantSize;
* 	VkIndirectStateFlagsNV indirectStateFlags;
* 	uint32_t indexTypeCount;
* 	// pad (4)
* 	VkIndexType* pIndexTypes;
* 	uint32_t* pIndexTypeValues;
* };
*</pre>
**/
@AutoGenerated
public final class VkIndirectCommandsLayoutTokenNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int TOKEN_TYPE_OFFSET = 16;
	private static final int STREAM_OFFSET = 20;
	private static final int OFFSET_OFFSET = 24;
	private static final int VERTEX_BINDING_UNIT_OFFSET = 28;
	private static final int VERTEX_DYNAMIC_STRIDE_OFFSET = 32;
	private static final int PUSHCONSTANT_PIPELINE_LAYOUT_OFFSET = 40;
	private static final int PUSHCONSTANT_SHADER_STAGE_FLAGS_OFFSET = 48;
	private static final int PUSHCONSTANT_OFFSET_OFFSET = 52;
	private static final int PUSHCONSTANT_SIZE_OFFSET = 56;
	private static final int INDIRECT_STATE_FLAGS_OFFSET = 60;
	private static final int INDEX_TYPE_COUNT_OFFSET = 64;
	private static final int P_INDEX_TYPES_OFFSET = 72;
	private static final int P_INDEX_TYPE_VALUES_OFFSET = 80;
	
	public VkIndirectCommandsLayoutTokenNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsLayoutTokenNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsLayoutTokenNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV **/
	@NativeType("VkStructureType")
	public VkIndirectCommandsLayoutTokenNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV **/
	@NativeType("VkStructureType")
	public VkIndirectCommandsLayoutTokenNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000277003);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkIndirectCommandsLayoutTokenNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndirectCommandsTokenTypeNV")
	public int tokenType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TOKEN_TYPE_OFFSET);
	}
	
	@NativeType("VkIndirectCommandsTokenTypeNV")
	public VkIndirectCommandsLayoutTokenNV tokenType(int value) {
		INT_HANDLE.set(this.segment, this.offset + TOKEN_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int stream() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STREAM_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutTokenNV stream(int value) {
		INT_HANDLE.set(this.segment, this.offset + STREAM_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int offset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutTokenNV offset(int value) {
		INT_HANDLE.set(this.segment, this.offset + OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int vertexBindingUnit() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERTEX_BINDING_UNIT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutTokenNV vertexBindingUnit(int value) {
		INT_HANDLE.set(this.segment, this.offset + VERTEX_BINDING_UNIT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean vertexDynamicStride() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERTEX_DYNAMIC_STRIDE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkIndirectCommandsLayoutTokenNV vertexDynamicStride(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + VERTEX_DYNAMIC_STRIDE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineLayout*")
	public long pushconstantPipelineLayout() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PUSHCONSTANT_PIPELINE_LAYOUT_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineLayout*")
	public VkIndirectCommandsLayoutTokenNV pushconstantPipelineLayout(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PUSHCONSTANT_PIPELINE_LAYOUT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkShaderStageFlags")
	public int pushconstantShaderStageFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PUSHCONSTANT_SHADER_STAGE_FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkShaderStageFlags")
	public VkIndirectCommandsLayoutTokenNV pushconstantShaderStageFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + PUSHCONSTANT_SHADER_STAGE_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int pushconstantOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PUSHCONSTANT_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutTokenNV pushconstantOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + PUSHCONSTANT_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int pushconstantSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PUSHCONSTANT_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutTokenNV pushconstantSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + PUSHCONSTANT_SIZE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkIndirectStateFlagsNV")
	public int indirectStateFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDIRECT_STATE_FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkIndirectStateFlagsNV")
	public VkIndirectCommandsLayoutTokenNV indirectStateFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + INDIRECT_STATE_FLAGS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int indexTypeCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDEX_TYPE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkIndirectCommandsLayoutTokenNV indexTypeCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + INDEX_TYPE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndexType*")
	public long pIndexTypes() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_INDEX_TYPES_OFFSET);
	}
	
	@NativeType("VkIndexType*")
	public VkIndirectCommandsLayoutTokenNV pIndexTypes(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_INDEX_TYPES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t*")
	public long pIndexTypeValues() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_INDEX_TYPE_VALUES_OFFSET);
	}
	
	@NativeType("uint32_t*")
	public VkIndirectCommandsLayoutTokenNV pIndexTypeValues(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_INDEX_TYPE_VALUES_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkIndirectCommandsLayoutTokenNV> {
		
		private static final StructConstructor<VkIndirectCommandsLayoutTokenNV> CONSTRUCTOR = VkIndirectCommandsLayoutTokenNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkIndirectCommandsLayoutTokenNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkIndirectCommandsLayoutTokenNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkIndirectCommandsLayoutTokenNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}