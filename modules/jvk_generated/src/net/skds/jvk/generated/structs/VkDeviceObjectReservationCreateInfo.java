package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkDeviceObjectReservationCreateInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t pipelineCacheCreateInfoCount;
* 	// pad (4)
* 	VkPipelineCacheCreateInfo* pPipelineCacheCreateInfos;
* 	uint32_t pipelinePoolSizeCount;
* 	// pad (4)
* 	VkPipelinePoolSize* pPipelinePoolSizes;
* 	uint32_t semaphoreRequestCount;
* 	uint32_t commandBufferRequestCount;
* 	uint32_t fenceRequestCount;
* 	uint32_t deviceMemoryRequestCount;
* 	uint32_t bufferRequestCount;
* 	uint32_t imageRequestCount;
* 	uint32_t eventRequestCount;
* 	uint32_t queryPoolRequestCount;
* 	uint32_t bufferViewRequestCount;
* 	uint32_t imageViewRequestCount;
* 	uint32_t layeredImageViewRequestCount;
* 	uint32_t pipelineCacheRequestCount;
* 	uint32_t pipelineLayoutRequestCount;
* 	uint32_t renderPassRequestCount;
* 	uint32_t graphicsPipelineRequestCount;
* 	uint32_t computePipelineRequestCount;
* 	uint32_t descriptorSetLayoutRequestCount;
* 	uint32_t samplerRequestCount;
* 	uint32_t descriptorPoolRequestCount;
* 	uint32_t descriptorSetRequestCount;
* 	uint32_t framebufferRequestCount;
* 	uint32_t commandPoolRequestCount;
* 	uint32_t samplerYcbcrConversionRequestCount;
* 	uint32_t surfaceRequestCount;
* 	uint32_t swapchainRequestCount;
* 	uint32_t displayModeRequestCount;
* 	uint32_t subpassDescriptionRequestCount;
* 	uint32_t attachmentDescriptionRequestCount;
* 	uint32_t descriptorSetLayoutBindingRequestCount;
* 	uint32_t descriptorSetLayoutBindingLimit;
* 	uint32_t maxImageViewMipLevels;
* 	uint32_t maxImageViewArrayLayers;
* 	uint32_t maxLayeredImageViewMipLevels;
* 	uint32_t maxOcclusionQueriesPerPool;
* 	uint32_t maxPipelineStatisticsQueriesPerPool;
* 	uint32_t maxTimestampQueriesPerPool;
* 	uint32_t maxImmutableSamplersPerDescriptorSetLayout;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkDeviceObjectReservationCreateInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int PIPELINE_CACHE_CREATE_INFO_COUNT_OFFSET = 16;
	private static final int P_PIPELINE_CACHE_CREATE_INFOS_OFFSET = 24;
	private static final int PIPELINE_POOL_SIZE_COUNT_OFFSET = 32;
	private static final int P_PIPELINE_POOL_SIZES_OFFSET = 40;
	private static final int SEMAPHORE_REQUEST_COUNT_OFFSET = 48;
	private static final int COMMAND_BUFFER_REQUEST_COUNT_OFFSET = 52;
	private static final int FENCE_REQUEST_COUNT_OFFSET = 56;
	private static final int DEVICE_MEMORY_REQUEST_COUNT_OFFSET = 60;
	private static final int BUFFER_REQUEST_COUNT_OFFSET = 64;
	private static final int IMAGE_REQUEST_COUNT_OFFSET = 68;
	private static final int EVENT_REQUEST_COUNT_OFFSET = 72;
	private static final int QUERY_POOL_REQUEST_COUNT_OFFSET = 76;
	private static final int BUFFER_VIEW_REQUEST_COUNT_OFFSET = 80;
	private static final int IMAGE_VIEW_REQUEST_COUNT_OFFSET = 84;
	private static final int LAYERED_IMAGE_VIEW_REQUEST_COUNT_OFFSET = 88;
	private static final int PIPELINE_CACHE_REQUEST_COUNT_OFFSET = 92;
	private static final int PIPELINE_LAYOUT_REQUEST_COUNT_OFFSET = 96;
	private static final int RENDER_PASS_REQUEST_COUNT_OFFSET = 100;
	private static final int GRAPHICS_PIPELINE_REQUEST_COUNT_OFFSET = 104;
	private static final int COMPUTE_PIPELINE_REQUEST_COUNT_OFFSET = 108;
	private static final int DESCRIPTOR_SET_LAYOUT_REQUEST_COUNT_OFFSET = 112;
	private static final int SAMPLER_REQUEST_COUNT_OFFSET = 116;
	private static final int DESCRIPTOR_POOL_REQUEST_COUNT_OFFSET = 120;
	private static final int DESCRIPTOR_SET_REQUEST_COUNT_OFFSET = 124;
	private static final int FRAMEBUFFER_REQUEST_COUNT_OFFSET = 128;
	private static final int COMMAND_POOL_REQUEST_COUNT_OFFSET = 132;
	private static final int SAMPLER_YCBCR_CONVERSION_REQUEST_COUNT_OFFSET = 136;
	private static final int SURFACE_REQUEST_COUNT_OFFSET = 140;
	private static final int SWAPCHAIN_REQUEST_COUNT_OFFSET = 144;
	private static final int DISPLAY_MODE_REQUEST_COUNT_OFFSET = 148;
	private static final int SUBPASS_DESCRIPTION_REQUEST_COUNT_OFFSET = 152;
	private static final int ATTACHMENT_DESCRIPTION_REQUEST_COUNT_OFFSET = 156;
	private static final int DESCRIPTOR_SET_LAYOUT_BINDING_REQUEST_COUNT_OFFSET = 160;
	private static final int DESCRIPTOR_SET_LAYOUT_BINDING_LIMIT_OFFSET = 164;
	private static final int MAX_IMAGE_VIEW_MIP_LEVELS_OFFSET = 168;
	private static final int MAX_IMAGE_VIEW_ARRAY_LAYERS_OFFSET = 172;
	private static final int MAX_LAYERED_IMAGE_VIEW_MIP_LEVELS_OFFSET = 176;
	private static final int MAX_OCCLUSION_QUERIES_PER_POOL_OFFSET = 180;
	private static final int MAX_PIPELINE_STATISTICS_QUERIES_PER_POOL_OFFSET = 184;
	private static final int MAX_TIMESTAMP_QUERIES_PER_POOL_OFFSET = 188;
	private static final int MAX_IMMUTABLE_SAMPLERS_PER_DESCRIPTOR_SET_LAYOUT_OFFSET = 192;
	
	public VkDeviceObjectReservationCreateInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDeviceObjectReservationCreateInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDeviceObjectReservationCreateInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_DEVICE_OBJECT_RESERVATION_CREATE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_DEVICE_OBJECT_RESERVATION_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkDeviceObjectReservationCreateInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkDeviceObjectReservationCreateInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int pipelineCacheCreateInfoCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_CACHE_CREATE_INFO_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo pipelineCacheCreateInfoCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_CACHE_CREATE_INFO_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelineCacheCreateInfo*")
	public long pPipelineCacheCreateInfos() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_PIPELINE_CACHE_CREATE_INFOS_OFFSET);
	}
	
	@NativeType("VkPipelineCacheCreateInfo*")
	public VkDeviceObjectReservationCreateInfo pPipelineCacheCreateInfos(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_PIPELINE_CACHE_CREATE_INFOS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int pipelinePoolSizeCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_POOL_SIZE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo pipelinePoolSizeCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_POOL_SIZE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelinePoolSize*")
	public long pPipelinePoolSizes() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_PIPELINE_POOL_SIZES_OFFSET);
	}
	
	@NativeType("VkPipelinePoolSize*")
	public VkDeviceObjectReservationCreateInfo pPipelinePoolSizes(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_PIPELINE_POOL_SIZES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int semaphoreRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SEMAPHORE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo semaphoreRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SEMAPHORE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int commandBufferRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMMAND_BUFFER_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo commandBufferRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COMMAND_BUFFER_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int fenceRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FENCE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo fenceRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + FENCE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int deviceMemoryRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_MEMORY_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo deviceMemoryRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_MEMORY_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int bufferRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo bufferRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int imageRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo imageRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int eventRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EVENT_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo eventRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + EVENT_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int queryPoolRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + QUERY_POOL_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo queryPoolRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + QUERY_POOL_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int bufferViewRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_VIEW_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo bufferViewRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_VIEW_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int imageViewRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_VIEW_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo imageViewRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_VIEW_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int layeredImageViewRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LAYERED_IMAGE_VIEW_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo layeredImageViewRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + LAYERED_IMAGE_VIEW_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int pipelineCacheRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_CACHE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo pipelineCacheRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_CACHE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int pipelineLayoutRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_LAYOUT_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo pipelineLayoutRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_LAYOUT_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int renderPassRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RENDER_PASS_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo renderPassRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + RENDER_PASS_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int graphicsPipelineRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + GRAPHICS_PIPELINE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo graphicsPipelineRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + GRAPHICS_PIPELINE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int computePipelineRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMPUTE_PIPELINE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo computePipelineRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COMPUTE_PIPELINE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int descriptorSetLayoutRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_SET_LAYOUT_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo descriptorSetLayoutRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_SET_LAYOUT_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int samplerRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLER_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo samplerRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLER_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int descriptorPoolRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_POOL_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo descriptorPoolRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_POOL_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int descriptorSetRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_SET_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo descriptorSetRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_SET_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int framebufferRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAMEBUFFER_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo framebufferRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + FRAMEBUFFER_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int commandPoolRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMMAND_POOL_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo commandPoolRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COMMAND_POOL_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int samplerYcbcrConversionRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLER_YCBCR_CONVERSION_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo samplerYcbcrConversionRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLER_YCBCR_CONVERSION_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int surfaceRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SURFACE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo surfaceRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SURFACE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int swapchainRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SWAPCHAIN_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo swapchainRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SWAPCHAIN_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int displayModeRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DISPLAY_MODE_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo displayModeRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DISPLAY_MODE_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int subpassDescriptionRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBPASS_DESCRIPTION_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo subpassDescriptionRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUBPASS_DESCRIPTION_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int attachmentDescriptionRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ATTACHMENT_DESCRIPTION_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo attachmentDescriptionRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + ATTACHMENT_DESCRIPTION_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int descriptorSetLayoutBindingRequestCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_SET_LAYOUT_BINDING_REQUEST_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo descriptorSetLayoutBindingRequestCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_SET_LAYOUT_BINDING_REQUEST_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int descriptorSetLayoutBindingLimit() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_SET_LAYOUT_BINDING_LIMIT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo descriptorSetLayoutBindingLimit(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_SET_LAYOUT_BINDING_LIMIT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImageViewMipLevels() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_VIEW_MIP_LEVELS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo maxImageViewMipLevels(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_VIEW_MIP_LEVELS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImageViewArrayLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_VIEW_ARRAY_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo maxImageViewArrayLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_VIEW_ARRAY_LAYERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxLayeredImageViewMipLevels() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_LAYERED_IMAGE_VIEW_MIP_LEVELS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo maxLayeredImageViewMipLevels(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_LAYERED_IMAGE_VIEW_MIP_LEVELS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxOcclusionQueriesPerPool() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_OCCLUSION_QUERIES_PER_POOL_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo maxOcclusionQueriesPerPool(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_OCCLUSION_QUERIES_PER_POOL_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPipelineStatisticsQueriesPerPool() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PIPELINE_STATISTICS_QUERIES_PER_POOL_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo maxPipelineStatisticsQueriesPerPool(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PIPELINE_STATISTICS_QUERIES_PER_POOL_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTimestampQueriesPerPool() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TIMESTAMP_QUERIES_PER_POOL_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo maxTimestampQueriesPerPool(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TIMESTAMP_QUERIES_PER_POOL_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImmutableSamplersPerDescriptorSetLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMMUTABLE_SAMPLERS_PER_DESCRIPTOR_SET_LAYOUT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkDeviceObjectReservationCreateInfo maxImmutableSamplersPerDescriptorSetLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMMUTABLE_SAMPLERS_PER_DESCRIPTOR_SET_LAYOUT_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkDeviceObjectReservationCreateInfo> {
		
		private static final StructConstructor<VkDeviceObjectReservationCreateInfo> CONSTRUCTOR = VkDeviceObjectReservationCreateInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkDeviceObjectReservationCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkDeviceObjectReservationCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkDeviceObjectReservationCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}