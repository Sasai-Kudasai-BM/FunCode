package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSubpassDescription {
* 	VkSubpassDescriptionFlags flags;
* 	VkPipelineBindPoint pipelineBindPoint;
* 	uint32_t inputAttachmentCount;
* 	// pad (4)
* 	VkAttachmentReference* pInputAttachments;
* 	uint32_t colorAttachmentCount;
* 	// pad (4)
* 	VkAttachmentReference* pColorAttachments;
* 	VkAttachmentReference* pResolveAttachments;
* 	VkAttachmentReference* pDepthStencilAttachment;
* 	uint32_t preserveAttachmentCount;
* 	// pad (4)
* 	uint32_t* pPreserveAttachments;
* };
*</pre>
**/
@AutoGenerated
public final class VkSubpassDescription extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int FLAGS_OFFSET = 0;
	private static final int PIPELINE_BIND_POINT_OFFSET = 4;
	private static final int INPUT_ATTACHMENT_COUNT_OFFSET = 8;
	private static final int P_INPUT_ATTACHMENTS_OFFSET = 16;
	private static final int COLOR_ATTACHMENT_COUNT_OFFSET = 24;
	private static final int P_COLOR_ATTACHMENTS_OFFSET = 32;
	private static final int P_RESOLVE_ATTACHMENTS_OFFSET = 40;
	private static final int P_DEPTH_STENCIL_ATTACHMENT_OFFSET = 48;
	private static final int PRESERVE_ATTACHMENT_COUNT_OFFSET = 56;
	private static final int P_PRESERVE_ATTACHMENTS_OFFSET = 64;
	
	public VkSubpassDescription() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSubpassDescription(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSubpassDescription(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** optional **/
	@NativeType("VkSubpassDescriptionFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSubpassDescriptionFlags")
	public VkSubpassDescription flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelineBindPoint")
	public int pipelineBindPoint() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_BIND_POINT_OFFSET);
	}
	
	@NativeType("VkPipelineBindPoint")
	public VkSubpassDescription pipelineBindPoint(int value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_BIND_POINT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int inputAttachmentCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INPUT_ATTACHMENT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkSubpassDescription inputAttachmentCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + INPUT_ATTACHMENT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentReference*")
	public long pInputAttachments() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_INPUT_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("VkAttachmentReference*")
	public VkSubpassDescription pInputAttachments(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_INPUT_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int colorAttachmentCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COLOR_ATTACHMENT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkSubpassDescription colorAttachmentCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COLOR_ATTACHMENT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentReference*")
	public long pColorAttachments() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_COLOR_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("VkAttachmentReference*")
	public VkSubpassDescription pColorAttachments(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_COLOR_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkAttachmentReference*")
	public long pResolveAttachments() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_RESOLVE_ATTACHMENTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAttachmentReference*")
	public VkSubpassDescription pResolveAttachments(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_RESOLVE_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkAttachmentReference*")
	public long pDepthStencilAttachment() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_DEPTH_STENCIL_ATTACHMENT_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAttachmentReference*")
	public VkSubpassDescription pDepthStencilAttachment(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_DEPTH_STENCIL_ATTACHMENT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int preserveAttachmentCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PRESERVE_ATTACHMENT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkSubpassDescription preserveAttachmentCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + PRESERVE_ATTACHMENT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t*")
	public long pPreserveAttachments() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_PRESERVE_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t*")
	public VkSubpassDescription pPreserveAttachments(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_PRESERVE_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSubpassDescription> {
		
		private static final StructConstructor<VkSubpassDescription> CONSTRUCTOR = VkSubpassDescription::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSubpassDescription[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSubpassDescription[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSubpassDescription[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}