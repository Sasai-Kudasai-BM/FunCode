package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkBindSparseInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t waitSemaphoreCount;
* 	// pad (4)
* 	VkSemaphore** pWaitSemaphores;
* 	uint32_t bufferBindCount;
* 	// pad (4)
* 	VkSparseBufferMemoryBindInfo* pBufferBinds;
* 	uint32_t imageOpaqueBindCount;
* 	// pad (4)
* 	VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
* 	uint32_t imageBindCount;
* 	// pad (4)
* 	VkSparseImageMemoryBindInfo* pImageBinds;
* 	uint32_t signalSemaphoreCount;
* 	// pad (4)
* 	VkSemaphore** pSignalSemaphores;
* };
*</pre>
**/
@AutoGenerated
public final class VkBindSparseInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int WAIT_SEMAPHORE_COUNT_OFFSET = 16;
	private static final int P_WAIT_SEMAPHORES_OFFSET = 24;
	private static final int BUFFER_BIND_COUNT_OFFSET = 32;
	private static final int P_BUFFER_BINDS_OFFSET = 40;
	private static final int IMAGE_OPAQUE_BIND_COUNT_OFFSET = 48;
	private static final int P_IMAGE_OPAQUE_BINDS_OFFSET = 56;
	private static final int IMAGE_BIND_COUNT_OFFSET = 64;
	private static final int P_IMAGE_BINDS_OFFSET = 72;
	private static final int SIGNAL_SEMAPHORE_COUNT_OFFSET = 80;
	private static final int P_SIGNAL_SEMAPHORES_OFFSET = 88;
	
	public VkBindSparseInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkBindSparseInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkBindSparseInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO **/
	@NativeType("VkStructureType")
	public VkBindSparseInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO **/
	@NativeType("VkStructureType")
	public VkBindSparseInfo sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 7);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkBindSparseInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int waitSemaphoreCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + WAIT_SEMAPHORE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkBindSparseInfo waitSemaphoreCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + WAIT_SEMAPHORE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSemaphore**")
	public long pWaitSemaphores() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_WAIT_SEMAPHORES_OFFSET);
	}
	
	@NativeType("VkSemaphore**")
	public VkBindSparseInfo pWaitSemaphores(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_WAIT_SEMAPHORES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int bufferBindCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_BIND_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkBindSparseInfo bufferBindCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_BIND_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSparseBufferMemoryBindInfo*")
	public long pBufferBinds() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_BUFFER_BINDS_OFFSET);
	}
	
	@NativeType("VkSparseBufferMemoryBindInfo*")
	public VkBindSparseInfo pBufferBinds(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_BUFFER_BINDS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int imageOpaqueBindCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_OPAQUE_BIND_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkBindSparseInfo imageOpaqueBindCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_OPAQUE_BIND_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSparseImageOpaqueMemoryBindInfo*")
	public long pImageOpaqueBinds() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_IMAGE_OPAQUE_BINDS_OFFSET);
	}
	
	@NativeType("VkSparseImageOpaqueMemoryBindInfo*")
	public VkBindSparseInfo pImageOpaqueBinds(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_IMAGE_OPAQUE_BINDS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int imageBindCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_BIND_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkBindSparseInfo imageBindCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_BIND_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSparseImageMemoryBindInfo*")
	public long pImageBinds() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_IMAGE_BINDS_OFFSET);
	}
	
	@NativeType("VkSparseImageMemoryBindInfo*")
	public VkBindSparseInfo pImageBinds(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_IMAGE_BINDS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int signalSemaphoreCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SIGNAL_SEMAPHORE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkBindSparseInfo signalSemaphoreCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SIGNAL_SEMAPHORE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSemaphore**")
	public long pSignalSemaphores() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_SIGNAL_SEMAPHORES_OFFSET);
	}
	
	@NativeType("VkSemaphore**")
	public VkBindSparseInfo pSignalSemaphores(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_SIGNAL_SEMAPHORES_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkBindSparseInfo> {
		
		private static final StructConstructor<VkBindSparseInfo> CONSTRUCTOR = VkBindSparseInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkBindSparseInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkBindSparseInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkBindSparseInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}