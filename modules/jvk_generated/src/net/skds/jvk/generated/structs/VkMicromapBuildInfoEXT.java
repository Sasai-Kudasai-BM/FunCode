package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.jvk.generated.unions.VkDeviceOrHostAddressConstKHR;
import net.skds.jvk.generated.unions.VkDeviceOrHostAddressKHR;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkMicromapBuildInfoEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkMicromapTypeEXT type;
* 	VkBuildMicromapFlagsEXT flags;
* 	VkBuildMicromapModeEXT mode;
* 	// pad (4)
* 	VkMicromapEXT* dstMicromap;
* 	uint32_t usageCountsCount;
* 	// pad (4)
* 	VkMicromapUsageEXT* pUsageCounts;
* 	VkMicromapUsageEXT* ppUsageCounts;
* 	VkDeviceOrHostAddressConstKHR data;
* 	VkDeviceOrHostAddressKHR scratchData;
* 	VkDeviceOrHostAddressConstKHR triangleArray;
* 	VkDeviceSize triangleArrayStride;
* };
*</pre>
**/
@AutoGenerated
public final class VkMicromapBuildInfoEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			VkDeviceOrHostAddressConstKHR.MEMORY_LAYOUT,
			VkDeviceOrHostAddressKHR.MEMORY_LAYOUT,
			VkDeviceOrHostAddressConstKHR.MEMORY_LAYOUT,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int TYPE_OFFSET = 16;
	private static final int FLAGS_OFFSET = 20;
	private static final int MODE_OFFSET = 24;
	private static final int DST_MICROMAP_OFFSET = 32;
	private static final int USAGE_COUNTS_COUNT_OFFSET = 40;
	private static final int P_USAGE_COUNTS_OFFSET = 48;
	private static final int PP_USAGE_COUNTS_OFFSET = 56;
	private static final int DATA_OFFSET = 64;
	private static final int SCRATCH_DATA_OFFSET = 72;
	private static final int TRIANGLE_ARRAY_OFFSET = 80;
	private static final int TRIANGLE_ARRAY_STRIDE_OFFSET = 88;
	
	public VkMicromapBuildInfoEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkMicromapBuildInfoEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkMicromapBuildInfoEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT **/
	@NativeType("VkStructureType")
	public VkMicromapBuildInfoEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT **/
	@NativeType("VkStructureType")
	public VkMicromapBuildInfoEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000396000);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkMicromapBuildInfoEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkMicromapTypeEXT")
	public int type() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TYPE_OFFSET);
	}
	
	@NativeType("VkMicromapTypeEXT")
	public VkMicromapBuildInfoEXT type(int value) {
		INT_HANDLE.set(this.segment, this.offset + TYPE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkBuildMicromapFlagsEXT")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkBuildMicromapFlagsEXT")
	public VkMicromapBuildInfoEXT flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBuildMicromapModeEXT")
	public int mode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MODE_OFFSET);
	}
	
	@NativeType("VkBuildMicromapModeEXT")
	public VkMicromapBuildInfoEXT mode(int value) {
		INT_HANDLE.set(this.segment, this.offset + MODE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkMicromapEXT*")
	public long dstMicromap() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DST_MICROMAP_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkMicromapEXT*")
	public VkMicromapBuildInfoEXT dstMicromap(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DST_MICROMAP_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int usageCountsCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + USAGE_COUNTS_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkMicromapBuildInfoEXT usageCountsCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + USAGE_COUNTS_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public long pUsageCounts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_USAGE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public VkMicromapBuildInfoEXT pUsageCounts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_USAGE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public long ppUsageCounts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PP_USAGE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public VkMicromapBuildInfoEXT ppUsageCounts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PP_USAGE_COUNTS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceOrHostAddressConstKHR")
	public VkDeviceOrHostAddressConstKHR data() {
		return new VkDeviceOrHostAddressConstKHR(this.segment, this.offset + DATA_OFFSET);
	}
	
	@NativeType("VkDeviceOrHostAddressKHR")
	public VkDeviceOrHostAddressKHR scratchData() {
		return new VkDeviceOrHostAddressKHR(this.segment, this.offset + SCRATCH_DATA_OFFSET);
	}
	
	@NativeType("VkDeviceOrHostAddressConstKHR")
	public VkDeviceOrHostAddressConstKHR triangleArray() {
		return new VkDeviceOrHostAddressConstKHR(this.segment, this.offset + TRIANGLE_ARRAY_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public long triangleArrayStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + TRIANGLE_ARRAY_STRIDE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkMicromapBuildInfoEXT triangleArrayStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + TRIANGLE_ARRAY_STRIDE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkMicromapBuildInfoEXT> {
		
		private static final StructConstructor<VkMicromapBuildInfoEXT> CONSTRUCTOR = VkMicromapBuildInfoEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkMicromapBuildInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkMicromapBuildInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkMicromapBuildInfoEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}