package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkShaderResourceUsageAMD {
* 	uint32_t numUsedVgprs;
* 	uint32_t numUsedSgprs;
* 	uint32_t ldsSizePerLocalWorkGroup;
* 	// pad (4)
* 	size_t ldsUsageSizeInBytes;
* 	size_t scratchMemUsageInBytes;
* };
*</pre>
**/
@AutoGenerated
public final class VkShaderResourceUsageAMD extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int NUM_USED_VGPRS_OFFSET = 0;
	private static final int NUM_USED_SGPRS_OFFSET = 4;
	private static final int LDS_SIZE_PER_LOCAL_WORK_GROUP_OFFSET = 8;
	private static final int LDS_USAGE_SIZE_IN_BYTES_OFFSET = 16;
	private static final int SCRATCH_MEM_USAGE_IN_BYTES_OFFSET = 24;
	
	public VkShaderResourceUsageAMD() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkShaderResourceUsageAMD(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkShaderResourceUsageAMD(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int numUsedVgprs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_USED_VGPRS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkShaderResourceUsageAMD numUsedVgprs(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_USED_VGPRS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int numUsedSgprs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_USED_SGPRS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkShaderResourceUsageAMD numUsedSgprs(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_USED_SGPRS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int ldsSizePerLocalWorkGroup() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LDS_SIZE_PER_LOCAL_WORK_GROUP_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkShaderResourceUsageAMD ldsSizePerLocalWorkGroup(int value) {
		INT_HANDLE.set(this.segment, this.offset + LDS_SIZE_PER_LOCAL_WORK_GROUP_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long ldsUsageSizeInBytes() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + LDS_USAGE_SIZE_IN_BYTES_OFFSET);
	}
	
	@NativeType("size_t")
	public VkShaderResourceUsageAMD ldsUsageSizeInBytes(long value) {
		LONG_HANDLE.set(this.segment, this.offset + LDS_USAGE_SIZE_IN_BYTES_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long scratchMemUsageInBytes() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SCRATCH_MEM_USAGE_IN_BYTES_OFFSET);
	}
	
	@NativeType("size_t")
	public VkShaderResourceUsageAMD scratchMemUsageInBytes(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SCRATCH_MEM_USAGE_IN_BYTES_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkShaderResourceUsageAMD> {
		
		private static final StructConstructor<VkShaderResourceUsageAMD> CONSTRUCTOR = VkShaderResourceUsageAMD::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkShaderResourceUsageAMD[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkShaderResourceUsageAMD[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkShaderResourceUsageAMD[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}