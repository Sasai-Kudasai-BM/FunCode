package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkDebugUtilsMessengerCallbackDataEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
* 	// pad (4)
* 	char* pMessageIdName;
* 	int32_t messageIdNumber;
* 	// pad (4)
* 	char* pMessage;
* 	uint32_t queueLabelCount;
* 	// pad (4)
* 	VkDebugUtilsLabelEXT* pQueueLabels;
* 	uint32_t cmdBufLabelCount;
* 	// pad (4)
* 	VkDebugUtilsLabelEXT* pCmdBufLabels;
* 	uint32_t objectCount;
* 	// pad (4)
* 	VkDebugUtilsObjectNameInfoEXT* pObjects;
* };
*</pre>
**/
@AutoGenerated
public final class VkDebugUtilsMessengerCallbackDataEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int P_MESSAGE_ID_NAME_OFFSET = 24;
	private static final int MESSAGE_ID_NUMBER_OFFSET = 32;
	private static final int P_MESSAGE_OFFSET = 40;
	private static final int QUEUE_LABEL_COUNT_OFFSET = 48;
	private static final int P_QUEUE_LABELS_OFFSET = 56;
	private static final int CMD_BUF_LABEL_COUNT_OFFSET = 64;
	private static final int P_CMD_BUF_LABELS_OFFSET = 72;
	private static final int OBJECT_COUNT_OFFSET = 80;
	private static final int P_OBJECTS_OFFSET = 88;
	
	public VkDebugUtilsMessengerCallbackDataEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDebugUtilsMessengerCallbackDataEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDebugUtilsMessengerCallbackDataEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT **/
	@NativeType("VkStructureType")
	public VkDebugUtilsMessengerCallbackDataEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT **/
	@NativeType("VkStructureType")
	public VkDebugUtilsMessengerCallbackDataEXT sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 3);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkDebugUtilsMessengerCallbackDataEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkDebugUtilsMessengerCallbackDataFlagsEXT")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkDebugUtilsMessengerCallbackDataFlagsEXT")
	public VkDebugUtilsMessengerCallbackDataEXT flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("char*")
	public long pMessageIdName() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_MESSAGE_ID_NAME_OFFSET);
	}
	
	/** optional **/
	@NativeType("char*")
	public VkDebugUtilsMessengerCallbackDataEXT pMessageIdName(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_MESSAGE_ID_NAME_OFFSET, value);
		return this;
	}
	
	@NativeType("int32_t")
	public int messageIdNumber() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MESSAGE_ID_NUMBER_OFFSET);
	}
	
	@NativeType("int32_t")
	public VkDebugUtilsMessengerCallbackDataEXT messageIdNumber(int value) {
		INT_HANDLE.set(this.segment, this.offset + MESSAGE_ID_NUMBER_OFFSET, value);
		return this;
	}
	
	@NativeType("char*")
	public long pMessage() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_MESSAGE_OFFSET);
	}
	
	@NativeType("char*")
	public VkDebugUtilsMessengerCallbackDataEXT pMessage(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_MESSAGE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int queueLabelCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + QUEUE_LABEL_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDebugUtilsMessengerCallbackDataEXT queueLabelCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + QUEUE_LABEL_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDebugUtilsLabelEXT*")
	public long pQueueLabels() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_QUEUE_LABELS_OFFSET);
	}
	
	@NativeType("VkDebugUtilsLabelEXT*")
	public VkDebugUtilsMessengerCallbackDataEXT pQueueLabels(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_QUEUE_LABELS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int cmdBufLabelCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CMD_BUF_LABEL_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDebugUtilsMessengerCallbackDataEXT cmdBufLabelCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + CMD_BUF_LABEL_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDebugUtilsLabelEXT*")
	public long pCmdBufLabels() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_CMD_BUF_LABELS_OFFSET);
	}
	
	@NativeType("VkDebugUtilsLabelEXT*")
	public VkDebugUtilsMessengerCallbackDataEXT pCmdBufLabels(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_CMD_BUF_LABELS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int objectCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + OBJECT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkDebugUtilsMessengerCallbackDataEXT objectCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + OBJECT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDebugUtilsObjectNameInfoEXT*")
	public long pObjects() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_OBJECTS_OFFSET);
	}
	
	@NativeType("VkDebugUtilsObjectNameInfoEXT*")
	public VkDebugUtilsMessengerCallbackDataEXT pObjects(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_OBJECTS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkDebugUtilsMessengerCallbackDataEXT> {
		
		private static final StructConstructor<VkDebugUtilsMessengerCallbackDataEXT> CONSTRUCTOR = VkDebugUtilsMessengerCallbackDataEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkDebugUtilsMessengerCallbackDataEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkDebugUtilsMessengerCallbackDataEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkDebugUtilsMessengerCallbackDataEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}