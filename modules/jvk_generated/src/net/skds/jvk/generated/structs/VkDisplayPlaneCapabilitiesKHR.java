package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkDisplayPlaneCapabilitiesKHR {
* 	VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
* 	VkOffset2D minSrcPosition;
* 	VkOffset2D maxSrcPosition;
* 	VkExtent2D minSrcExtent;
* 	VkExtent2D maxSrcExtent;
* 	VkOffset2D minDstPosition;
* 	VkOffset2D maxDstPosition;
* 	VkExtent2D minDstExtent;
* 	VkExtent2D maxDstExtent;
* };
*</pre>
**/
@AutoGenerated
public final class VkDisplayPlaneCapabilitiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			VkOffset2D.MEMORY_LAYOUT,
			VkOffset2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT,
			VkOffset2D.MEMORY_LAYOUT,
			VkOffset2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT
	);
	private static final int SUPPORTED_ALPHA_OFFSET = 0;
	private static final int MIN_SRC_POSITION_OFFSET = 4;
	private static final int MAX_SRC_POSITION_OFFSET = 12;
	private static final int MIN_SRC_EXTENT_OFFSET = 20;
	private static final int MAX_SRC_EXTENT_OFFSET = 28;
	private static final int MIN_DST_POSITION_OFFSET = 36;
	private static final int MAX_DST_POSITION_OFFSET = 44;
	private static final int MIN_DST_EXTENT_OFFSET = 52;
	private static final int MAX_DST_EXTENT_OFFSET = 60;
	
	public VkDisplayPlaneCapabilitiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDisplayPlaneCapabilitiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkDisplayPlaneCapabilitiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** optional **/
	@NativeType("VkDisplayPlaneAlphaFlagsKHR")
	public int supportedAlpha() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_ALPHA_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkDisplayPlaneAlphaFlagsKHR")
	public VkDisplayPlaneCapabilitiesKHR supportedAlpha(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_ALPHA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkOffset2D")
	public VkOffset2D minSrcPosition() {
		return new VkOffset2D(this.segment, this.offset + MIN_SRC_POSITION_OFFSET);
	}
	
	@NativeType("VkOffset2D")
	public VkOffset2D maxSrcPosition() {
		return new VkOffset2D(this.segment, this.offset + MAX_SRC_POSITION_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D minSrcExtent() {
		return new VkExtent2D(this.segment, this.offset + MIN_SRC_EXTENT_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D maxSrcExtent() {
		return new VkExtent2D(this.segment, this.offset + MAX_SRC_EXTENT_OFFSET);
	}
	
	@NativeType("VkOffset2D")
	public VkOffset2D minDstPosition() {
		return new VkOffset2D(this.segment, this.offset + MIN_DST_POSITION_OFFSET);
	}
	
	@NativeType("VkOffset2D")
	public VkOffset2D maxDstPosition() {
		return new VkOffset2D(this.segment, this.offset + MAX_DST_POSITION_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D minDstExtent() {
		return new VkExtent2D(this.segment, this.offset + MIN_DST_EXTENT_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D maxDstExtent() {
		return new VkExtent2D(this.segment, this.offset + MAX_DST_EXTENT_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkDisplayPlaneCapabilitiesKHR> {
		
		private static final StructConstructor<VkDisplayPlaneCapabilitiesKHR> CONSTRUCTOR = VkDisplayPlaneCapabilitiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkDisplayPlaneCapabilitiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkDisplayPlaneCapabilitiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkDisplayPlaneCapabilitiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}