package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkClusterAccelerationStructureBuildTriangleClusterInfoNV {
* 	uint32_t clusterID;
* 	VkClusterAccelerationStructureClusterFlagsNV clusterFlags;
* 	uint32_t triangleCount;
* 	uint32_t vertexCount;
* 	uint32_t positionTruncateBitCount;
* 	uint32_t indexType;
* 	uint32_t opacityMicromapIndexType;
* 	VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV baseGeometryIndexAndGeometryFlags;
* 	uint16_t indexBufferStride;
* 	uint16_t vertexBufferStride;
* 	uint16_t geometryIndexAndFlagsBufferStride;
* 	uint16_t opacityMicromapIndexBufferStride;
* 	VkDeviceAddress indexBuffer;
* 	VkDeviceAddress vertexBuffer;
* 	VkDeviceAddress geometryIndexAndFlagsBuffer;
* 	VkDeviceAddress opacityMicromapArray;
* 	VkDeviceAddress opacityMicromapIndexBuffer;
* };
*</pre>
**/
@AutoGenerated
public final class VkClusterAccelerationStructureBuildTriangleClusterInfoNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV.MEMORY_LAYOUT,
			JAVA_SHORT,
			JAVA_SHORT,
			JAVA_SHORT,
			JAVA_SHORT,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int CLUSTER_ID_OFFSET = 0;
	private static final int CLUSTER_FLAGS_OFFSET = 4;
	private static final int TRIANGLE_COUNT_OFFSET = 8;
	private static final int VERTEX_COUNT_OFFSET = 12;
	private static final int POSITION_TRUNCATE_BIT_COUNT_OFFSET = 16;
	private static final int INDEX_TYPE_OFFSET = 20;
	private static final int OPACITY_MICROMAP_INDEX_TYPE_OFFSET = 24;
	private static final int BASE_GEOMETRY_INDEX_AND_GEOMETRY_FLAGS_OFFSET = 28;
	private static final int INDEX_BUFFER_STRIDE_OFFSET = 40;
	private static final int VERTEX_BUFFER_STRIDE_OFFSET = 42;
	private static final int GEOMETRY_INDEX_AND_FLAGS_BUFFER_STRIDE_OFFSET = 44;
	private static final int OPACITY_MICROMAP_INDEX_BUFFER_STRIDE_OFFSET = 46;
	private static final int INDEX_BUFFER_OFFSET = 48;
	private static final int VERTEX_BUFFER_OFFSET = 56;
	private static final int GEOMETRY_INDEX_AND_FLAGS_BUFFER_OFFSET = 64;
	private static final int OPACITY_MICROMAP_ARRAY_OFFSET = 72;
	private static final int OPACITY_MICROMAP_INDEX_BUFFER_OFFSET = 80;
	
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int clusterID() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CLUSTER_ID_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV clusterID(int value) {
		INT_HANDLE.set(this.segment, this.offset + CLUSTER_ID_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkClusterAccelerationStructureClusterFlagsNV")
	public int clusterFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CLUSTER_FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkClusterAccelerationStructureClusterFlagsNV")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV clusterFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + CLUSTER_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int triangleCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TRIANGLE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV triangleCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + TRIANGLE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int vertexCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERTEX_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV vertexCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + VERTEX_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int positionTruncateBitCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + POSITION_TRUNCATE_BIT_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV positionTruncateBitCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + POSITION_TRUNCATE_BIT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int indexType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDEX_TYPE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV indexType(int value) {
		INT_HANDLE.set(this.segment, this.offset + INDEX_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int opacityMicromapIndexType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + OPACITY_MICROMAP_INDEX_TYPE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV opacityMicromapIndexType(int value) {
		INT_HANDLE.set(this.segment, this.offset + OPACITY_MICROMAP_INDEX_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV")
	public VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV baseGeometryIndexAndGeometryFlags() {
		return new VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(this.segment, this.offset + BASE_GEOMETRY_INDEX_AND_GEOMETRY_FLAGS_OFFSET);
	}
	
	@NativeType("uint16_t")
	public short indexBufferStride() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + INDEX_BUFFER_STRIDE_OFFSET);
	}
	
	@NativeType("uint16_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV indexBufferStride(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + INDEX_BUFFER_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint16_t")
	public short vertexBufferStride() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + VERTEX_BUFFER_STRIDE_OFFSET);
	}
	
	@NativeType("uint16_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV vertexBufferStride(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + VERTEX_BUFFER_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint16_t")
	public short geometryIndexAndFlagsBufferStride() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + GEOMETRY_INDEX_AND_FLAGS_BUFFER_STRIDE_OFFSET);
	}
	
	@NativeType("uint16_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV geometryIndexAndFlagsBufferStride(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + GEOMETRY_INDEX_AND_FLAGS_BUFFER_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint16_t")
	public short opacityMicromapIndexBufferStride() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + OPACITY_MICROMAP_INDEX_BUFFER_STRIDE_OFFSET);
	}
	
	@NativeType("uint16_t")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV opacityMicromapIndexBufferStride(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + OPACITY_MICROMAP_INDEX_BUFFER_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long indexBuffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + INDEX_BUFFER_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV indexBuffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + INDEX_BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long vertexBuffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + VERTEX_BUFFER_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV vertexBuffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + VERTEX_BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long geometryIndexAndFlagsBuffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + GEOMETRY_INDEX_AND_FLAGS_BUFFER_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV geometryIndexAndFlagsBuffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + GEOMETRY_INDEX_AND_FLAGS_BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long opacityMicromapArray() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OPACITY_MICROMAP_ARRAY_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV opacityMicromapArray(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OPACITY_MICROMAP_ARRAY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long opacityMicromapIndexBuffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OPACITY_MICROMAP_INDEX_BUFFER_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureBuildTriangleClusterInfoNV opacityMicromapIndexBuffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OPACITY_MICROMAP_INDEX_BUFFER_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkClusterAccelerationStructureBuildTriangleClusterInfoNV> {
		
		private static final StructConstructor<VkClusterAccelerationStructureBuildTriangleClusterInfoNV> CONSTRUCTOR = VkClusterAccelerationStructureBuildTriangleClusterInfoNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkClusterAccelerationStructureBuildTriangleClusterInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkClusterAccelerationStructureBuildTriangleClusterInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkClusterAccelerationStructureBuildTriangleClusterInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}