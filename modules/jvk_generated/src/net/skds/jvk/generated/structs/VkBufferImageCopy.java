package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkBufferImageCopy {
* 	VkDeviceSize bufferOffset;
* 	uint32_t bufferRowLength;
* 	uint32_t bufferImageHeight;
* 	VkImageSubresourceLayers imageSubresource;
* 	VkOffset3D imageOffset;
* 	VkExtent3D imageExtent;
* };
*</pre>
**/
@AutoGenerated
public final class VkBufferImageCopy extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			VkImageSubresourceLayers.MEMORY_LAYOUT,
			VkOffset3D.MEMORY_LAYOUT,
			VkExtent3D.MEMORY_LAYOUT
	);
	private static final int BUFFER_OFFSET_OFFSET = 0;
	private static final int BUFFER_ROW_LENGTH_OFFSET = 8;
	private static final int BUFFER_IMAGE_HEIGHT_OFFSET = 12;
	private static final int IMAGE_SUBRESOURCE_OFFSET = 16;
	private static final int IMAGE_OFFSET_OFFSET = 32;
	private static final int IMAGE_EXTENT_OFFSET = 44;
	
	public VkBufferImageCopy() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkBufferImageCopy(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkBufferImageCopy(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkDeviceSize")
	public long bufferOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + BUFFER_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkBufferImageCopy bufferOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + BUFFER_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int bufferRowLength() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_ROW_LENGTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkBufferImageCopy bufferRowLength(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_ROW_LENGTH_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int bufferImageHeight() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_IMAGE_HEIGHT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkBufferImageCopy bufferImageHeight(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_IMAGE_HEIGHT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageSubresourceLayers")
	public VkImageSubresourceLayers imageSubresource() {
		return new VkImageSubresourceLayers(this.segment, this.offset + IMAGE_SUBRESOURCE_OFFSET);
	}
	
	@NativeType("VkOffset3D")
	public VkOffset3D imageOffset() {
		return new VkOffset3D(this.segment, this.offset + IMAGE_OFFSET_OFFSET);
	}
	
	@NativeType("VkExtent3D")
	public VkExtent3D imageExtent() {
		return new VkExtent3D(this.segment, this.offset + IMAGE_EXTENT_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkBufferImageCopy> {
		
		private static final StructConstructor<VkBufferImageCopy> CONSTRUCTOR = VkBufferImageCopy::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkBufferImageCopy[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkBufferImageCopy[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkBufferImageCopy[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}