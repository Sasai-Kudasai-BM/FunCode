package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkMicromapTriangleEXT {
* 	uint32_t dataOffset;
* 	uint16_t subdivisionLevel;
* 	uint16_t format;
* };
*</pre>
**/
@AutoGenerated
public final class VkMicromapTriangleEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_SHORT,
			JAVA_SHORT
	);
	private static final int DATA_OFFSET_OFFSET = 0;
	private static final int SUBDIVISION_LEVEL_OFFSET = 4;
	private static final int FORMAT_OFFSET = 6;
	
	public VkMicromapTriangleEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkMicromapTriangleEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkMicromapTriangleEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int dataOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DATA_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkMicromapTriangleEXT dataOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + DATA_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint16_t")
	public short subdivisionLevel() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + SUBDIVISION_LEVEL_OFFSET);
	}
	
	@NativeType("uint16_t")
	public VkMicromapTriangleEXT subdivisionLevel(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + SUBDIVISION_LEVEL_OFFSET, value);
		return this;
	}
	
	@NativeType("uint16_t")
	public short format() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + FORMAT_OFFSET);
	}
	
	@NativeType("uint16_t")
	public VkMicromapTriangleEXT format(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + FORMAT_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkMicromapTriangleEXT> {
		
		private static final StructConstructor<VkMicromapTriangleEXT> CONSTRUCTOR = VkMicromapTriangleEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkMicromapTriangleEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkMicromapTriangleEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkMicromapTriangleEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}