package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkImageCreateInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkImageCreateFlags flags;
* 	VkImageType imageType;
* 	VkFormat format;
* 	VkExtent3D extent;
* 	uint32_t mipLevels;
* 	uint32_t arrayLayers;
* 	VkSampleCountFlagBits samples;
* 	VkImageTiling tiling;
* 	VkImageUsageFlags usage;
* 	VkSharingMode sharingMode;
* 	uint32_t queueFamilyIndexCount;
* 	// pad (4)
* 	uint32_t* pQueueFamilyIndices;
* 	VkImageLayout initialLayout;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkImageCreateInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkExtent3D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int IMAGE_TYPE_OFFSET = 20;
	private static final int FORMAT_OFFSET = 24;
	private static final int EXTENT_OFFSET = 28;
	private static final int MIP_LEVELS_OFFSET = 40;
	private static final int ARRAY_LAYERS_OFFSET = 44;
	private static final int SAMPLES_OFFSET = 48;
	private static final int TILING_OFFSET = 52;
	private static final int USAGE_OFFSET = 56;
	private static final int SHARING_MODE_OFFSET = 60;
	private static final int QUEUE_FAMILY_INDEX_COUNT_OFFSET = 64;
	private static final int P_QUEUE_FAMILY_INDICES_OFFSET = 72;
	private static final int INITIAL_LAYOUT_OFFSET = 80;
	
	public VkImageCreateInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkImageCreateInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkImageCreateInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkImageCreateInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkImageCreateInfo sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 14);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkImageCreateInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImageCreateFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImageCreateFlags")
	public VkImageCreateInfo flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageType")
	public int imageType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_TYPE_OFFSET);
	}
	
	@NativeType("VkImageType")
	public VkImageCreateInfo imageType(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkFormat")
	public int format() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FORMAT_OFFSET);
	}
	
	@NativeType("VkFormat")
	public VkImageCreateInfo format(int value) {
		INT_HANDLE.set(this.segment, this.offset + FORMAT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent3D")
	public VkExtent3D extent() {
		return new VkExtent3D(this.segment, this.offset + EXTENT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int mipLevels() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIP_LEVELS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkImageCreateInfo mipLevels(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIP_LEVELS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int arrayLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ARRAY_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkImageCreateInfo arrayLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + ARRAY_LAYERS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSampleCountFlagBits")
	public int samples() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLES_OFFSET);
	}
	
	@NativeType("VkSampleCountFlagBits")
	public VkImageCreateInfo samples(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageTiling")
	public int tiling() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TILING_OFFSET);
	}
	
	@NativeType("VkImageTiling")
	public VkImageCreateInfo tiling(int value) {
		INT_HANDLE.set(this.segment, this.offset + TILING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageUsageFlags")
	public int usage() {
		return (int) INT_HANDLE.get(this.segment, this.offset + USAGE_OFFSET);
	}
	
	@NativeType("VkImageUsageFlags")
	public VkImageCreateInfo usage(int value) {
		INT_HANDLE.set(this.segment, this.offset + USAGE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSharingMode")
	public int sharingMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHARING_MODE_OFFSET);
	}
	
	@NativeType("VkSharingMode")
	public VkImageCreateInfo sharingMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHARING_MODE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int queueFamilyIndexCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + QUEUE_FAMILY_INDEX_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkImageCreateInfo queueFamilyIndexCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + QUEUE_FAMILY_INDEX_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t*")
	public long pQueueFamilyIndices() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_QUEUE_FAMILY_INDICES_OFFSET);
	}
	
	@NativeType("uint32_t*")
	public VkImageCreateInfo pQueueFamilyIndices(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_QUEUE_FAMILY_INDICES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageLayout")
	public int initialLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INITIAL_LAYOUT_OFFSET);
	}
	
	@NativeType("VkImageLayout")
	public VkImageCreateInfo initialLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + INITIAL_LAYOUT_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkImageCreateInfo> {
		
		private static final StructConstructor<VkImageCreateInfo> CONSTRUCTOR = VkImageCreateInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkImageCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkImageCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkImageCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}