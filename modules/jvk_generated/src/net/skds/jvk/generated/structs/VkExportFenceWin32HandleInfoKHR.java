package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkExportFenceWin32HandleInfoKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	SECURITY_ATTRIBUTES** pAttributes;
* 	DWORD dwAccess;
* 	// pad (6)
* 	LPCWSTR* name;
* };
*</pre>
**/
@AutoGenerated
public final class VkExportFenceWin32HandleInfoKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_SHORT,
			paddingLayout(6),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int P_ATTRIBUTES_OFFSET = 16;
	private static final int DW_ACCESS_OFFSET = 24;
	private static final int NAME_OFFSET = 32;
	
	public VkExportFenceWin32HandleInfoKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkExportFenceWin32HandleInfoKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkExportFenceWin32HandleInfoKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkExportFenceWin32HandleInfoKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkExportFenceWin32HandleInfoKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000114001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkExportFenceWin32HandleInfoKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("SECURITY_ATTRIBUTES**")
	public long pAttributes() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_ATTRIBUTES_OFFSET);
	}
	
	/** optional **/
	@NativeType("SECURITY_ATTRIBUTES**")
	public VkExportFenceWin32HandleInfoKHR pAttributes(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_ATTRIBUTES_OFFSET, value);
		return this;
	}
	
	@NativeType("DWORD")
	public short dwAccess() {
		return (short) SHORT_HANDLE.get(this.segment, this.offset + DW_ACCESS_OFFSET);
	}
	
	@NativeType("DWORD")
	public VkExportFenceWin32HandleInfoKHR dwAccess(short value) {
		SHORT_HANDLE.set(this.segment, this.offset + DW_ACCESS_OFFSET, value);
		return this;
	}
	
	@NativeType("LPCWSTR*")
	public long name() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + NAME_OFFSET);
	}
	
	@NativeType("LPCWSTR*")
	public VkExportFenceWin32HandleInfoKHR name(long value) {
		LONG_HANDLE.set(this.segment, this.offset + NAME_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkExportFenceWin32HandleInfoKHR> {
		
		private static final StructConstructor<VkExportFenceWin32HandleInfoKHR> CONSTRUCTOR = VkExportFenceWin32HandleInfoKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkExportFenceWin32HandleInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkExportFenceWin32HandleInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkExportFenceWin32HandleInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}