package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkQueueFamilyProperties {
* 	VkQueueFlags queueFlags;
* 	uint32_t queueCount;
* 	uint32_t timestampValidBits;
* 	VkExtent3D minImageTransferGranularity;
* };
*</pre>
**/
@AutoGenerated
public final class VkQueueFamilyProperties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkExtent3D.MEMORY_LAYOUT
	);
	private static final int QUEUE_FLAGS_OFFSET = 0;
	private static final int QUEUE_COUNT_OFFSET = 4;
	private static final int TIMESTAMP_VALID_BITS_OFFSET = 8;
	private static final int MIN_IMAGE_TRANSFER_GRANULARITY_OFFSET = 12;
	
	public VkQueueFamilyProperties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkQueueFamilyProperties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkQueueFamilyProperties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** optional **/
	@NativeType("VkQueueFlags")
	public int queueFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + QUEUE_FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkQueueFlags")
	public VkQueueFamilyProperties queueFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + QUEUE_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int queueCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + QUEUE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkQueueFamilyProperties queueCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + QUEUE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int timestampValidBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TIMESTAMP_VALID_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkQueueFamilyProperties timestampValidBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + TIMESTAMP_VALID_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent3D")
	public VkExtent3D minImageTransferGranularity() {
		return new VkExtent3D(this.segment, this.offset + MIN_IMAGE_TRANSFER_GRANULARITY_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkQueueFamilyProperties> {
		
		private static final StructConstructor<VkQueueFamilyProperties> CONSTRUCTOR = VkQueueFamilyProperties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkQueueFamilyProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkQueueFamilyProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkQueueFamilyProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}