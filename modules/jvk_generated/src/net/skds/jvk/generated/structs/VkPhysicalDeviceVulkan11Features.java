package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceVulkan11Features {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBool32 storageBuffer16BitAccess;
* 	VkBool32 uniformAndStorageBuffer16BitAccess;
* 	VkBool32 storagePushConstant16;
* 	VkBool32 storageInputOutput16;
* 	VkBool32 multiview;
* 	VkBool32 multiviewGeometryShader;
* 	VkBool32 multiviewTessellationShader;
* 	VkBool32 variablePointersStorageBuffer;
* 	VkBool32 variablePointers;
* 	VkBool32 protectedMemory;
* 	VkBool32 samplerYcbcrConversion;
* 	VkBool32 shaderDrawParameters;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceVulkan11Features extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int STORAGE_BUFFER16_BIT_ACCESS_OFFSET = 16;
	private static final int UNIFORM_AND_STORAGE_BUFFER16_BIT_ACCESS_OFFSET = 20;
	private static final int STORAGE_PUSH_CONSTANT16_OFFSET = 24;
	private static final int STORAGE_INPUT_OUTPUT16_OFFSET = 28;
	private static final int MULTIVIEW_OFFSET = 32;
	private static final int MULTIVIEW_GEOMETRY_SHADER_OFFSET = 36;
	private static final int MULTIVIEW_TESSELLATION_SHADER_OFFSET = 40;
	private static final int VARIABLE_POINTERS_STORAGE_BUFFER_OFFSET = 44;
	private static final int VARIABLE_POINTERS_OFFSET = 48;
	private static final int PROTECTED_MEMORY_OFFSET = 52;
	private static final int SAMPLER_YCBCR_CONVERSION_OFFSET = 56;
	private static final int SHADER_DRAW_PARAMETERS_OFFSET = 60;
	
	public VkPhysicalDeviceVulkan11Features() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan11Features(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan11Features(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan11Features sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan11Features sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 49);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceVulkan11Features pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean storageBuffer16BitAccess() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORAGE_BUFFER16_BIT_ACCESS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features storageBuffer16BitAccess(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + STORAGE_BUFFER16_BIT_ACCESS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean uniformAndStorageBuffer16BitAccess() {
		return (int) INT_HANDLE.get(this.segment, this.offset + UNIFORM_AND_STORAGE_BUFFER16_BIT_ACCESS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features uniformAndStorageBuffer16BitAccess(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + UNIFORM_AND_STORAGE_BUFFER16_BIT_ACCESS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean storagePushConstant16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORAGE_PUSH_CONSTANT16_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features storagePushConstant16(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + STORAGE_PUSH_CONSTANT16_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean storageInputOutput16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORAGE_INPUT_OUTPUT16_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features storageInputOutput16(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + STORAGE_INPUT_OUTPUT16_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean multiview() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MULTIVIEW_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features multiview(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + MULTIVIEW_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean multiviewGeometryShader() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MULTIVIEW_GEOMETRY_SHADER_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features multiviewGeometryShader(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + MULTIVIEW_GEOMETRY_SHADER_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean multiviewTessellationShader() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MULTIVIEW_TESSELLATION_SHADER_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features multiviewTessellationShader(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + MULTIVIEW_TESSELLATION_SHADER_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean variablePointersStorageBuffer() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VARIABLE_POINTERS_STORAGE_BUFFER_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features variablePointersStorageBuffer(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + VARIABLE_POINTERS_STORAGE_BUFFER_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean variablePointers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VARIABLE_POINTERS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features variablePointers(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + VARIABLE_POINTERS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean protectedMemory() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PROTECTED_MEMORY_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features protectedMemory(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PROTECTED_MEMORY_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean samplerYcbcrConversion() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLER_YCBCR_CONVERSION_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features samplerYcbcrConversion(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLER_YCBCR_CONVERSION_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean shaderDrawParameters() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_DRAW_PARAMETERS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan11Features shaderDrawParameters(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_DRAW_PARAMETERS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceVulkan11Features> {
		
		private static final StructConstructor<VkPhysicalDeviceVulkan11Features> CONSTRUCTOR = VkPhysicalDeviceVulkan11Features::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceVulkan11Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceVulkan11Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceVulkan11Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}