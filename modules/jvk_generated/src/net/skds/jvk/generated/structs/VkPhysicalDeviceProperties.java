package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceProperties {
* 	uint32_t apiVersion;
* 	uint32_t driverVersion;
* 	uint32_t vendorID;
* 	uint32_t deviceID;
* 	VkPhysicalDeviceType deviceType;
* 	char[256] deviceName;
* 	uint8_t[16] pipelineCacheUUID;
* 	// pad (4)
* 	VkPhysicalDeviceLimits limits;
* 	VkPhysicalDeviceSparseProperties sparseProperties;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceProperties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(256, JAVA_BYTE),
			sequenceLayout(16, JAVA_BYTE),
			paddingLayout(4),
			VkPhysicalDeviceLimits.MEMORY_LAYOUT,
			VkPhysicalDeviceSparseProperties.MEMORY_LAYOUT,
			paddingLayout(4)
	);
	private static final int API_VERSION_OFFSET = 0;
	private static final int DRIVER_VERSION_OFFSET = 4;
	private static final int VENDOR_ID_OFFSET = 8;
	private static final int DEVICE_ID_OFFSET = 12;
	private static final int DEVICE_TYPE_OFFSET = 16;
	private static final int DEVICE_NAME_OFFSET = 20;
	private static final int PIPELINE_CACHE_UUID_OFFSET = 276;
	private static final int LIMITS_OFFSET = 296;
	private static final int SPARSE_PROPERTIES_OFFSET = 800;
	
	public VkPhysicalDeviceProperties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceProperties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceProperties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int apiVersion() {
		return (int) INT_HANDLE.get(this.segment, this.offset + API_VERSION_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceProperties apiVersion(int value) {
		INT_HANDLE.set(this.segment, this.offset + API_VERSION_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int driverVersion() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DRIVER_VERSION_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceProperties driverVersion(int value) {
		INT_HANDLE.set(this.segment, this.offset + DRIVER_VERSION_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int vendorID() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VENDOR_ID_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceProperties vendorID(int value) {
		INT_HANDLE.set(this.segment, this.offset + VENDOR_ID_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int deviceID() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_ID_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceProperties deviceID(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_ID_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPhysicalDeviceType")
	public int deviceType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEVICE_TYPE_OFFSET);
	}
	
	@NativeType("VkPhysicalDeviceType")
	public VkPhysicalDeviceProperties deviceType(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEVICE_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("char[256]")
	public byte deviceName(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DEVICE_NAME_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[256]")
	public byte[] deviceNameArray() {
		var array = new byte[256];
		MemorySegment.copy(this.segment, BYTE, this.offset + DEVICE_NAME_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("char[256]")
	public String deviceName() {
		return this.segment.getString(this.offset + DEVICE_NAME_OFFSET);
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceProperties deviceName(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DEVICE_NAME_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceProperties deviceName(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + DEVICE_NAME_OFFSET, value.length);
		return this;
	}
	
	@NativeType("char[256]")
	public VkPhysicalDeviceProperties deviceName(String value) {
		this.segment.setString(this.offset + DEVICE_NAME_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t[16]")
	public byte pipelineCacheUUID(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + PIPELINE_CACHE_UUID_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("uint8_t[16]")
	public byte[] pipelineCacheUUIDArray() {
		var array = new byte[16];
		MemorySegment.copy(this.segment, BYTE, this.offset + PIPELINE_CACHE_UUID_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceProperties pipelineCacheUUID(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + PIPELINE_CACHE_UUID_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceProperties pipelineCacheUUID(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + PIPELINE_CACHE_UUID_OFFSET, value.length);
		return this;
	}
	
	@NativeType("VkPhysicalDeviceLimits")
	public VkPhysicalDeviceLimits limits() {
		return new VkPhysicalDeviceLimits(this.segment, this.offset + LIMITS_OFFSET);
	}
	
	@NativeType("VkPhysicalDeviceSparseProperties")
	public VkPhysicalDeviceSparseProperties sparseProperties() {
		return new VkPhysicalDeviceSparseProperties(this.segment, this.offset + SPARSE_PROPERTIES_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceProperties> {
		
		private static final StructConstructor<VkPhysicalDeviceProperties> CONSTRUCTOR = VkPhysicalDeviceProperties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}