package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.jvk.generated.unions.VkClearValue;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkRenderingAttachmentInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkImageView* imageView;
* 	VkImageLayout imageLayout;
* 	VkResolveModeFlagBits resolveMode;
* 	VkImageView* resolveImageView;
* 	VkImageLayout resolveImageLayout;
* 	VkAttachmentLoadOp loadOp;
* 	VkAttachmentStoreOp storeOp;
* 	VkClearValue clearValue;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkRenderingAttachmentInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkClearValue.MEMORY_LAYOUT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int IMAGE_VIEW_OFFSET = 16;
	private static final int IMAGE_LAYOUT_OFFSET = 24;
	private static final int RESOLVE_MODE_OFFSET = 28;
	private static final int RESOLVE_IMAGE_VIEW_OFFSET = 32;
	private static final int RESOLVE_IMAGE_LAYOUT_OFFSET = 40;
	private static final int LOAD_OP_OFFSET = 44;
	private static final int STORE_OP_OFFSET = 48;
	private static final int CLEAR_VALUE_OFFSET = 52;
	
	public VkRenderingAttachmentInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkRenderingAttachmentInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkRenderingAttachmentInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO **/
	@NativeType("VkStructureType")
	public VkRenderingAttachmentInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO **/
	@NativeType("VkStructureType")
	public VkRenderingAttachmentInfo sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000044001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkRenderingAttachmentInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImageView*")
	public long imageView() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + IMAGE_VIEW_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImageView*")
	public VkRenderingAttachmentInfo imageView(long value) {
		LONG_HANDLE.set(this.segment, this.offset + IMAGE_VIEW_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageLayout")
	public int imageLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_LAYOUT_OFFSET);
	}
	
	@NativeType("VkImageLayout")
	public VkRenderingAttachmentInfo imageLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_LAYOUT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkResolveModeFlagBits")
	public int resolveMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESOLVE_MODE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkResolveModeFlagBits")
	public VkRenderingAttachmentInfo resolveMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + RESOLVE_MODE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImageView*")
	public long resolveImageView() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + RESOLVE_IMAGE_VIEW_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImageView*")
	public VkRenderingAttachmentInfo resolveImageView(long value) {
		LONG_HANDLE.set(this.segment, this.offset + RESOLVE_IMAGE_VIEW_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageLayout")
	public int resolveImageLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESOLVE_IMAGE_LAYOUT_OFFSET);
	}
	
	@NativeType("VkImageLayout")
	public VkRenderingAttachmentInfo resolveImageLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + RESOLVE_IMAGE_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentLoadOp")
	public int loadOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LOAD_OP_OFFSET);
	}
	
	@NativeType("VkAttachmentLoadOp")
	public VkRenderingAttachmentInfo loadOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + LOAD_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentStoreOp")
	public int storeOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORE_OP_OFFSET);
	}
	
	@NativeType("VkAttachmentStoreOp")
	public VkRenderingAttachmentInfo storeOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + STORE_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkClearValue")
	public VkClearValue clearValue() {
		return new VkClearValue(this.segment, this.offset + CLEAR_VALUE_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkRenderingAttachmentInfo> {
		
		private static final StructConstructor<VkRenderingAttachmentInfo> CONSTRUCTOR = VkRenderingAttachmentInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkRenderingAttachmentInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkRenderingAttachmentInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkRenderingAttachmentInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}