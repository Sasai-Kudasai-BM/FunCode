package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceCooperativeMatrix2FeaturesNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBool32 cooperativeMatrixWorkgroupScope;
* 	VkBool32 cooperativeMatrixFlexibleDimensions;
* 	VkBool32 cooperativeMatrixReductions;
* 	VkBool32 cooperativeMatrixConversions;
* 	VkBool32 cooperativeMatrixPerElementOperations;
* 	VkBool32 cooperativeMatrixTensorAddressing;
* 	VkBool32 cooperativeMatrixBlockLoads;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceCooperativeMatrix2FeaturesNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int COOPERATIVE_MATRIX_WORKGROUP_SCOPE_OFFSET = 16;
	private static final int COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_OFFSET = 20;
	private static final int COOPERATIVE_MATRIX_REDUCTIONS_OFFSET = 24;
	private static final int COOPERATIVE_MATRIX_CONVERSIONS_OFFSET = 28;
	private static final int COOPERATIVE_MATRIX_PER_ELEMENT_OPERATIONS_OFFSET = 32;
	private static final int COOPERATIVE_MATRIX_TENSOR_ADDRESSING_OFFSET = 36;
	private static final int COOPERATIVE_MATRIX_BLOCK_LOADS_OFFSET = 40;
	
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000593000);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean cooperativeMatrixWorkgroupScope() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COOPERATIVE_MATRIX_WORKGROUP_SCOPE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV cooperativeMatrixWorkgroupScope(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COOPERATIVE_MATRIX_WORKGROUP_SCOPE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean cooperativeMatrixFlexibleDimensions() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV cooperativeMatrixFlexibleDimensions(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean cooperativeMatrixReductions() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COOPERATIVE_MATRIX_REDUCTIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV cooperativeMatrixReductions(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COOPERATIVE_MATRIX_REDUCTIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean cooperativeMatrixConversions() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COOPERATIVE_MATRIX_CONVERSIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV cooperativeMatrixConversions(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COOPERATIVE_MATRIX_CONVERSIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean cooperativeMatrixPerElementOperations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COOPERATIVE_MATRIX_PER_ELEMENT_OPERATIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV cooperativeMatrixPerElementOperations(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COOPERATIVE_MATRIX_PER_ELEMENT_OPERATIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean cooperativeMatrixTensorAddressing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COOPERATIVE_MATRIX_TENSOR_ADDRESSING_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV cooperativeMatrixTensorAddressing(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COOPERATIVE_MATRIX_TENSOR_ADDRESSING_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean cooperativeMatrixBlockLoads() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COOPERATIVE_MATRIX_BLOCK_LOADS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV cooperativeMatrixBlockLoads(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COOPERATIVE_MATRIX_BLOCK_LOADS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceCooperativeMatrix2FeaturesNV> {
		
		private static final StructConstructor<VkPhysicalDeviceCooperativeMatrix2FeaturesNV> CONSTRUCTOR = VkPhysicalDeviceCooperativeMatrix2FeaturesNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceCooperativeMatrix2FeaturesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceCooperativeMatrix2FeaturesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceCooperativeMatrix2FeaturesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}