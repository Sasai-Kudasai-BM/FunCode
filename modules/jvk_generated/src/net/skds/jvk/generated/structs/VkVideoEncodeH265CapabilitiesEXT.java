package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVideoEncodeH265CapabilitiesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkVideoEncodeH265CapabilityFlagsEXT flags;
* 	VkVideoEncodeH265InputModeFlagsEXT inputModeFlags;
* 	VkVideoEncodeH265OutputModeFlagsEXT outputModeFlags;
* 	VkVideoEncodeH265CtbSizeFlagsEXT ctbSizes;
* 	VkVideoEncodeH265TransformBlockSizeFlagsEXT transformBlockSizes;
* 	uint8_t maxPPictureL0ReferenceCount;
* 	uint8_t maxBPictureL0ReferenceCount;
* 	uint8_t maxL1ReferenceCount;
* 	uint8_t maxSubLayersCount;
* 	uint8_t minLog2MinLumaCodingBlockSizeMinus3;
* 	uint8_t maxLog2MinLumaCodingBlockSizeMinus3;
* 	uint8_t minLog2MinLumaTransformBlockSizeMinus2;
* 	uint8_t maxLog2MinLumaTransformBlockSizeMinus2;
* 	uint8_t minMaxTransformHierarchyDepthInter;
* 	uint8_t maxMaxTransformHierarchyDepthInter;
* 	uint8_t minMaxTransformHierarchyDepthIntra;
* 	uint8_t maxMaxTransformHierarchyDepthIntra;
* 	uint8_t maxDiffCuQpDeltaDepth;
* 	uint8_t minMaxNumMergeCand;
* 	uint8_t maxMaxNumMergeCand;
* 	// pad (5)
* };
*</pre>
**/
@AutoGenerated
public final class VkVideoEncodeH265CapabilitiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			paddingLayout(5)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int INPUT_MODE_FLAGS_OFFSET = 20;
	private static final int OUTPUT_MODE_FLAGS_OFFSET = 24;
	private static final int CTB_SIZES_OFFSET = 28;
	private static final int TRANSFORM_BLOCK_SIZES_OFFSET = 32;
	private static final int MAX_PPICTURE_L0_REFERENCE_COUNT_OFFSET = 36;
	private static final int MAX_BPICTURE_L0_REFERENCE_COUNT_OFFSET = 37;
	private static final int MAX_L1_REFERENCE_COUNT_OFFSET = 38;
	private static final int MAX_SUB_LAYERS_COUNT_OFFSET = 39;
	private static final int MIN_LOG2_MIN_LUMA_CODING_BLOCK_SIZE_MINUS3_OFFSET = 40;
	private static final int MAX_LOG2_MIN_LUMA_CODING_BLOCK_SIZE_MINUS3_OFFSET = 41;
	private static final int MIN_LOG2_MIN_LUMA_TRANSFORM_BLOCK_SIZE_MINUS2_OFFSET = 42;
	private static final int MAX_LOG2_MIN_LUMA_TRANSFORM_BLOCK_SIZE_MINUS2_OFFSET = 43;
	private static final int MIN_MAX_TRANSFORM_HIERARCHY_DEPTH_INTER_OFFSET = 44;
	private static final int MAX_MAX_TRANSFORM_HIERARCHY_DEPTH_INTER_OFFSET = 45;
	private static final int MIN_MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA_OFFSET = 46;
	private static final int MAX_MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA_OFFSET = 47;
	private static final int MAX_DIFF_CU_QP_DELTA_DEPTH_OFFSET = 48;
	private static final int MIN_MAX_NUM_MERGE_CAND_OFFSET = 49;
	private static final int MAX_MAX_NUM_MERGE_CAND_OFFSET = 50;
	
	public VkVideoEncodeH265CapabilitiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeH265CapabilitiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeH265CapabilitiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT **/
	@NativeType("VkStructureType")
	public VkVideoEncodeH265CapabilitiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT **/
	@NativeType("VkStructureType")
	public VkVideoEncodeH265CapabilitiesEXT sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 0);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkVideoEncodeH265CapabilitiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH265CapabilityFlagsEXT")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH265CapabilityFlagsEXT")
	public VkVideoEncodeH265CapabilitiesEXT flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH265InputModeFlagsEXT")
	public int inputModeFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INPUT_MODE_FLAGS_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH265InputModeFlagsEXT")
	public VkVideoEncodeH265CapabilitiesEXT inputModeFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + INPUT_MODE_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH265OutputModeFlagsEXT")
	public int outputModeFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + OUTPUT_MODE_FLAGS_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH265OutputModeFlagsEXT")
	public VkVideoEncodeH265CapabilitiesEXT outputModeFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + OUTPUT_MODE_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH265CtbSizeFlagsEXT")
	public int ctbSizes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CTB_SIZES_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH265CtbSizeFlagsEXT")
	public VkVideoEncodeH265CapabilitiesEXT ctbSizes(int value) {
		INT_HANDLE.set(this.segment, this.offset + CTB_SIZES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH265TransformBlockSizeFlagsEXT")
	public int transformBlockSizes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TRANSFORM_BLOCK_SIZES_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH265TransformBlockSizeFlagsEXT")
	public VkVideoEncodeH265CapabilitiesEXT transformBlockSizes(int value) {
		INT_HANDLE.set(this.segment, this.offset + TRANSFORM_BLOCK_SIZES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxPPictureL0ReferenceCount() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_PPICTURE_L0_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxPPictureL0ReferenceCount(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_PPICTURE_L0_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxBPictureL0ReferenceCount() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_BPICTURE_L0_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxBPictureL0ReferenceCount(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_BPICTURE_L0_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxL1ReferenceCount() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_L1_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxL1ReferenceCount(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_L1_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxSubLayersCount() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_SUB_LAYERS_COUNT_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxSubLayersCount(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_SUB_LAYERS_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte minLog2MinLumaCodingBlockSizeMinus3() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MIN_LOG2_MIN_LUMA_CODING_BLOCK_SIZE_MINUS3_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT minLog2MinLumaCodingBlockSizeMinus3(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MIN_LOG2_MIN_LUMA_CODING_BLOCK_SIZE_MINUS3_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxLog2MinLumaCodingBlockSizeMinus3() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_LOG2_MIN_LUMA_CODING_BLOCK_SIZE_MINUS3_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxLog2MinLumaCodingBlockSizeMinus3(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_LOG2_MIN_LUMA_CODING_BLOCK_SIZE_MINUS3_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte minLog2MinLumaTransformBlockSizeMinus2() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MIN_LOG2_MIN_LUMA_TRANSFORM_BLOCK_SIZE_MINUS2_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT minLog2MinLumaTransformBlockSizeMinus2(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MIN_LOG2_MIN_LUMA_TRANSFORM_BLOCK_SIZE_MINUS2_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxLog2MinLumaTransformBlockSizeMinus2() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_LOG2_MIN_LUMA_TRANSFORM_BLOCK_SIZE_MINUS2_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxLog2MinLumaTransformBlockSizeMinus2(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_LOG2_MIN_LUMA_TRANSFORM_BLOCK_SIZE_MINUS2_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte minMaxTransformHierarchyDepthInter() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MIN_MAX_TRANSFORM_HIERARCHY_DEPTH_INTER_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT minMaxTransformHierarchyDepthInter(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MIN_MAX_TRANSFORM_HIERARCHY_DEPTH_INTER_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxMaxTransformHierarchyDepthInter() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_MAX_TRANSFORM_HIERARCHY_DEPTH_INTER_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxMaxTransformHierarchyDepthInter(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_MAX_TRANSFORM_HIERARCHY_DEPTH_INTER_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte minMaxTransformHierarchyDepthIntra() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MIN_MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT minMaxTransformHierarchyDepthIntra(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MIN_MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxMaxTransformHierarchyDepthIntra() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxMaxTransformHierarchyDepthIntra(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxDiffCuQpDeltaDepth() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_DIFF_CU_QP_DELTA_DEPTH_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxDiffCuQpDeltaDepth(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_DIFF_CU_QP_DELTA_DEPTH_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte minMaxNumMergeCand() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MIN_MAX_NUM_MERGE_CAND_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT minMaxNumMergeCand(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MIN_MAX_NUM_MERGE_CAND_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxMaxNumMergeCand() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_MAX_NUM_MERGE_CAND_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH265CapabilitiesEXT maxMaxNumMergeCand(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_MAX_NUM_MERGE_CAND_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVideoEncodeH265CapabilitiesEXT> {
		
		private static final StructConstructor<VkVideoEncodeH265CapabilitiesEXT> CONSTRUCTOR = VkVideoEncodeH265CapabilitiesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVideoEncodeH265CapabilitiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVideoEncodeH265CapabilitiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVideoEncodeH265CapabilitiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}