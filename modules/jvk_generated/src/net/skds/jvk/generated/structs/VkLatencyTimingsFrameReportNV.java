package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkLatencyTimingsFrameReportNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint64_t presentID;
* 	uint64_t inputSampleTimeUs;
* 	uint64_t simStartTimeUs;
* 	uint64_t simEndTimeUs;
* 	uint64_t renderSubmitStartTimeUs;
* 	uint64_t renderSubmitEndTimeUs;
* 	uint64_t presentStartTimeUs;
* 	uint64_t presentEndTimeUs;
* 	uint64_t driverStartTimeUs;
* 	uint64_t driverEndTimeUs;
* 	uint64_t osRenderQueueStartTimeUs;
* 	uint64_t osRenderQueueEndTimeUs;
* 	uint64_t gpuRenderStartTimeUs;
* 	uint64_t gpuRenderEndTimeUs;
* };
*</pre>
**/
@AutoGenerated
public final class VkLatencyTimingsFrameReportNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int PRESENT_ID_OFFSET = 16;
	private static final int INPUT_SAMPLE_TIME_US_OFFSET = 24;
	private static final int SIM_START_TIME_US_OFFSET = 32;
	private static final int SIM_END_TIME_US_OFFSET = 40;
	private static final int RENDER_SUBMIT_START_TIME_US_OFFSET = 48;
	private static final int RENDER_SUBMIT_END_TIME_US_OFFSET = 56;
	private static final int PRESENT_START_TIME_US_OFFSET = 64;
	private static final int PRESENT_END_TIME_US_OFFSET = 72;
	private static final int DRIVER_START_TIME_US_OFFSET = 80;
	private static final int DRIVER_END_TIME_US_OFFSET = 88;
	private static final int OS_RENDER_QUEUE_START_TIME_US_OFFSET = 96;
	private static final int OS_RENDER_QUEUE_END_TIME_US_OFFSET = 104;
	private static final int GPU_RENDER_START_TIME_US_OFFSET = 112;
	private static final int GPU_RENDER_END_TIME_US_OFFSET = 120;
	
	public VkLatencyTimingsFrameReportNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkLatencyTimingsFrameReportNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkLatencyTimingsFrameReportNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV **/
	@NativeType("VkStructureType")
	public VkLatencyTimingsFrameReportNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV **/
	@NativeType("VkStructureType")
	public VkLatencyTimingsFrameReportNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000505004);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkLatencyTimingsFrameReportNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long presentID() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PRESENT_ID_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV presentID(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PRESENT_ID_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long inputSampleTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + INPUT_SAMPLE_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV inputSampleTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + INPUT_SAMPLE_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long simStartTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SIM_START_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV simStartTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SIM_START_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long simEndTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SIM_END_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV simEndTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SIM_END_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long renderSubmitStartTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + RENDER_SUBMIT_START_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV renderSubmitStartTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + RENDER_SUBMIT_START_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long renderSubmitEndTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + RENDER_SUBMIT_END_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV renderSubmitEndTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + RENDER_SUBMIT_END_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long presentStartTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PRESENT_START_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV presentStartTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PRESENT_START_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long presentEndTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PRESENT_END_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV presentEndTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PRESENT_END_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long driverStartTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DRIVER_START_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV driverStartTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DRIVER_START_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long driverEndTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DRIVER_END_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV driverEndTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DRIVER_END_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long osRenderQueueStartTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OS_RENDER_QUEUE_START_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV osRenderQueueStartTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OS_RENDER_QUEUE_START_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long osRenderQueueEndTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OS_RENDER_QUEUE_END_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV osRenderQueueEndTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OS_RENDER_QUEUE_END_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long gpuRenderStartTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + GPU_RENDER_START_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV gpuRenderStartTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + GPU_RENDER_START_TIME_US_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long gpuRenderEndTimeUs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + GPU_RENDER_END_TIME_US_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkLatencyTimingsFrameReportNV gpuRenderEndTimeUs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + GPU_RENDER_END_TIME_US_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkLatencyTimingsFrameReportNV> {
		
		private static final StructConstructor<VkLatencyTimingsFrameReportNV> CONSTRUCTOR = VkLatencyTimingsFrameReportNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkLatencyTimingsFrameReportNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkLatencyTimingsFrameReportNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkLatencyTimingsFrameReportNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}