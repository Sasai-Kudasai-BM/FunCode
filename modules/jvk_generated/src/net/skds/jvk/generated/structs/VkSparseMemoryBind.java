package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSparseMemoryBind {
* 	VkDeviceSize resourceOffset;
* 	VkDeviceSize size;
* 	VkDeviceMemory* memory;
* 	VkDeviceSize memoryOffset;
* 	VkSparseMemoryBindFlags flags;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkSparseMemoryBind extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int RESOURCE_OFFSET_OFFSET = 0;
	private static final int SIZE_OFFSET = 8;
	private static final int MEMORY_OFFSET = 16;
	private static final int MEMORY_OFFSET_OFFSET = 24;
	private static final int FLAGS_OFFSET = 32;
	
	public VkSparseMemoryBind() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSparseMemoryBind(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSparseMemoryBind(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkDeviceSize")
	public long resourceOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + RESOURCE_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkSparseMemoryBind resourceOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + RESOURCE_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long size() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkSparseMemoryBind size(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SIZE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkDeviceMemory*")
	public long memory() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MEMORY_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkDeviceMemory*")
	public VkSparseMemoryBind memory(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MEMORY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long memoryOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MEMORY_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkSparseMemoryBind memoryOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MEMORY_OFFSET_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSparseMemoryBindFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSparseMemoryBindFlags")
	public VkSparseMemoryBind flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSparseMemoryBind> {
		
		private static final StructConstructor<VkSparseMemoryBind> CONSTRUCTOR = VkSparseMemoryBind::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSparseMemoryBind[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSparseMemoryBind[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSparseMemoryBind[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}