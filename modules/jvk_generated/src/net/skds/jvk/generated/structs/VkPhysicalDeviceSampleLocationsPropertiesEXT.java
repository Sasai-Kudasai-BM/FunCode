package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkSampleCountFlags sampleLocationSampleCounts;
* 	VkExtent2D maxSampleLocationGridSize;
* 	float[2] sampleLocationCoordinateRange;
* 	uint32_t sampleLocationSubPixelBits;
* 	VkBool32 variableSampleLocations;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceSampleLocationsPropertiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			VkExtent2D.MEMORY_LAYOUT,
			sequenceLayout(2, JAVA_FLOAT),
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int SAMPLE_LOCATION_SAMPLE_COUNTS_OFFSET = 16;
	private static final int MAX_SAMPLE_LOCATION_GRID_SIZE_OFFSET = 20;
	private static final int SAMPLE_LOCATION_COORDINATE_RANGE_OFFSET = 28;
	private static final int SAMPLE_LOCATION_SUB_PIXEL_BITS_OFFSET = 36;
	private static final int VARIABLE_SAMPLE_LOCATIONS_OFFSET = 40;
	
	public VkPhysicalDeviceSampleLocationsPropertiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceSampleLocationsPropertiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceSampleLocationsPropertiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000143003);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSampleCountFlags")
	public int sampleLocationSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLE_LOCATION_SAMPLE_COUNTS_OFFSET);
	}
	
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT sampleLocationSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLE_LOCATION_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D maxSampleLocationGridSize() {
		return new VkExtent2D(this.segment, this.offset + MAX_SAMPLE_LOCATION_GRID_SIZE_OFFSET);
	}
	
	@NativeType("float[2]")
	public float sampleLocationCoordinateRange(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + SAMPLE_LOCATION_COORDINATE_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[2]")
	public float[] sampleLocationCoordinateRangeArray() {
		var array = new float[2];
		MemorySegment.copy(this.segment, FLOAT, this.offset + SAMPLE_LOCATION_COORDINATE_RANGE_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("float[2]")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT sampleLocationCoordinateRange(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + SAMPLE_LOCATION_COORDINATE_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("float[2]")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT sampleLocationCoordinateRange(float[] value) {
		MemorySegment.copy(value, 0, this.segment, FLOAT, this.offset + SAMPLE_LOCATION_COORDINATE_RANGE_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint32_t")
	public int sampleLocationSubPixelBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLE_LOCATION_SUB_PIXEL_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT sampleLocationSubPixelBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLE_LOCATION_SUB_PIXEL_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean variableSampleLocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VARIABLE_SAMPLE_LOCATIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceSampleLocationsPropertiesEXT variableSampleLocations(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + VARIABLE_SAMPLE_LOCATIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceSampleLocationsPropertiesEXT> {
		
		private static final StructConstructor<VkPhysicalDeviceSampleLocationsPropertiesEXT> CONSTRUCTOR = VkPhysicalDeviceSampleLocationsPropertiesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceSampleLocationsPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceSampleLocationsPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceSampleLocationsPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}