package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVideoEncodeAV1PictureInfoKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkVideoEncodeAV1PredictionModeKHR predictionMode;
* 	VkVideoEncodeAV1RateControlGroupKHR rateControlGroup;
* 	uint32_t constantQIndex;
* 	// pad (4)
* 	StdVideoEncodeAV1PictureInfo* pStdPictureInfo;
* 	int32_t[7] referenceNameSlotIndices;
* 	VkBool32 primaryReferenceCdfOnly;
* 	VkBool32 generateObuExtensionHeader;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkVideoEncodeAV1PictureInfoKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			sequenceLayout(7, JAVA_INT),
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int PREDICTION_MODE_OFFSET = 16;
	private static final int RATE_CONTROL_GROUP_OFFSET = 20;
	private static final int CONSTANT_QINDEX_OFFSET = 24;
	private static final int P_STD_PICTURE_INFO_OFFSET = 32;
	private static final int REFERENCE_NAME_SLOT_INDICES_OFFSET = 40;
	private static final int PRIMARY_REFERENCE_CDF_ONLY_OFFSET = 68;
	private static final int GENERATE_OBU_EXTENSION_HEADER_OFFSET = 72;
	
	public VkVideoEncodeAV1PictureInfoKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeAV1PictureInfoKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeAV1PictureInfoKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkVideoEncodeAV1PictureInfoKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkVideoEncodeAV1PictureInfoKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000513002);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkVideoEncodeAV1PictureInfoKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeAV1PredictionModeKHR")
	public int predictionMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREDICTION_MODE_OFFSET);
	}
	
	@NativeType("VkVideoEncodeAV1PredictionModeKHR")
	public VkVideoEncodeAV1PictureInfoKHR predictionMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + PREDICTION_MODE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeAV1RateControlGroupKHR")
	public int rateControlGroup() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RATE_CONTROL_GROUP_OFFSET);
	}
	
	@NativeType("VkVideoEncodeAV1RateControlGroupKHR")
	public VkVideoEncodeAV1PictureInfoKHR rateControlGroup(int value) {
		INT_HANDLE.set(this.segment, this.offset + RATE_CONTROL_GROUP_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int constantQIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CONSTANT_QINDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeAV1PictureInfoKHR constantQIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + CONSTANT_QINDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("StdVideoEncodeAV1PictureInfo*")
	public long pStdPictureInfo() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_STD_PICTURE_INFO_OFFSET);
	}
	
	@NativeType("StdVideoEncodeAV1PictureInfo*")
	public VkVideoEncodeAV1PictureInfoKHR pStdPictureInfo(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_STD_PICTURE_INFO_OFFSET, value);
		return this;
	}
	
	@NativeType("int32_t[7]")
	public int referenceNameSlotIndices(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + REFERENCE_NAME_SLOT_INDICES_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("int32_t[7]")
	public int[] referenceNameSlotIndicesArray() {
		var array = new int[7];
		MemorySegment.copy(this.segment, INT, this.offset + REFERENCE_NAME_SLOT_INDICES_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("int32_t[7]")
	public VkVideoEncodeAV1PictureInfoKHR referenceNameSlotIndices(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + REFERENCE_NAME_SLOT_INDICES_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("int32_t[7]")
	public VkVideoEncodeAV1PictureInfoKHR referenceNameSlotIndices(int[] value) {
		MemorySegment.copy(value, 0, this.segment, INT, this.offset + REFERENCE_NAME_SLOT_INDICES_OFFSET, value.length);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean primaryReferenceCdfOnly() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PRIMARY_REFERENCE_CDF_ONLY_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkVideoEncodeAV1PictureInfoKHR primaryReferenceCdfOnly(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PRIMARY_REFERENCE_CDF_ONLY_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean generateObuExtensionHeader() {
		return (int) INT_HANDLE.get(this.segment, this.offset + GENERATE_OBU_EXTENSION_HEADER_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkVideoEncodeAV1PictureInfoKHR generateObuExtensionHeader(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + GENERATE_OBU_EXTENSION_HEADER_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVideoEncodeAV1PictureInfoKHR> {
		
		private static final StructConstructor<VkVideoEncodeAV1PictureInfoKHR> CONSTRUCTOR = VkVideoEncodeAV1PictureInfoKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVideoEncodeAV1PictureInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVideoEncodeAV1PictureInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVideoEncodeAV1PictureInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}