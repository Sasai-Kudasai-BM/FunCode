package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceMeshShaderPropertiesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t maxTaskWorkGroupTotalCount;
* 	uint32_t[3] maxTaskWorkGroupCount;
* 	uint32_t maxTaskWorkGroupInvocations;
* 	uint32_t[3] maxTaskWorkGroupSize;
* 	uint32_t maxTaskPayloadSize;
* 	uint32_t maxTaskSharedMemorySize;
* 	uint32_t maxTaskPayloadAndSharedMemorySize;
* 	uint32_t maxMeshWorkGroupTotalCount;
* 	uint32_t[3] maxMeshWorkGroupCount;
* 	uint32_t maxMeshWorkGroupInvocations;
* 	uint32_t[3] maxMeshWorkGroupSize;
* 	uint32_t maxMeshSharedMemorySize;
* 	uint32_t maxMeshPayloadAndSharedMemorySize;
* 	uint32_t maxMeshOutputMemorySize;
* 	uint32_t maxMeshPayloadAndOutputMemorySize;
* 	uint32_t maxMeshOutputComponents;
* 	uint32_t maxMeshOutputVertices;
* 	uint32_t maxMeshOutputPrimitives;
* 	uint32_t maxMeshOutputLayers;
* 	uint32_t maxMeshMultiviewViewCount;
* 	uint32_t meshOutputPerVertexGranularity;
* 	uint32_t meshOutputPerPrimitiveGranularity;
* 	uint32_t maxPreferredTaskWorkGroupInvocations;
* 	uint32_t maxPreferredMeshWorkGroupInvocations;
* 	VkBool32 prefersLocalInvocationVertexOutput;
* 	VkBool32 prefersLocalInvocationPrimitiveOutput;
* 	VkBool32 prefersCompactVertexOutput;
* 	VkBool32 prefersCompactPrimitiveOutput;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceMeshShaderPropertiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MAX_TASK_WORK_GROUP_TOTAL_COUNT_OFFSET = 16;
	private static final int MAX_TASK_WORK_GROUP_COUNT_OFFSET = 20;
	private static final int MAX_TASK_WORK_GROUP_INVOCATIONS_OFFSET = 32;
	private static final int MAX_TASK_WORK_GROUP_SIZE_OFFSET = 36;
	private static final int MAX_TASK_PAYLOAD_SIZE_OFFSET = 48;
	private static final int MAX_TASK_SHARED_MEMORY_SIZE_OFFSET = 52;
	private static final int MAX_TASK_PAYLOAD_AND_SHARED_MEMORY_SIZE_OFFSET = 56;
	private static final int MAX_MESH_WORK_GROUP_TOTAL_COUNT_OFFSET = 60;
	private static final int MAX_MESH_WORK_GROUP_COUNT_OFFSET = 64;
	private static final int MAX_MESH_WORK_GROUP_INVOCATIONS_OFFSET = 76;
	private static final int MAX_MESH_WORK_GROUP_SIZE_OFFSET = 80;
	private static final int MAX_MESH_SHARED_MEMORY_SIZE_OFFSET = 92;
	private static final int MAX_MESH_PAYLOAD_AND_SHARED_MEMORY_SIZE_OFFSET = 96;
	private static final int MAX_MESH_OUTPUT_MEMORY_SIZE_OFFSET = 100;
	private static final int MAX_MESH_PAYLOAD_AND_OUTPUT_MEMORY_SIZE_OFFSET = 104;
	private static final int MAX_MESH_OUTPUT_COMPONENTS_OFFSET = 108;
	private static final int MAX_MESH_OUTPUT_VERTICES_OFFSET = 112;
	private static final int MAX_MESH_OUTPUT_PRIMITIVES_OFFSET = 116;
	private static final int MAX_MESH_OUTPUT_LAYERS_OFFSET = 120;
	private static final int MAX_MESH_MULTIVIEW_VIEW_COUNT_OFFSET = 124;
	private static final int MESH_OUTPUT_PER_VERTEX_GRANULARITY_OFFSET = 128;
	private static final int MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_OFFSET = 132;
	private static final int MAX_PREFERRED_TASK_WORK_GROUP_INVOCATIONS_OFFSET = 136;
	private static final int MAX_PREFERRED_MESH_WORK_GROUP_INVOCATIONS_OFFSET = 140;
	private static final int PREFERS_LOCAL_INVOCATION_VERTEX_OUTPUT_OFFSET = 144;
	private static final int PREFERS_LOCAL_INVOCATION_PRIMITIVE_OUTPUT_OFFSET = 148;
	private static final int PREFERS_COMPACT_VERTEX_OUTPUT_OFFSET = 152;
	private static final int PREFERS_COMPACT_PRIMITIVE_OUTPUT_OFFSET = 156;
	
	public VkPhysicalDeviceMeshShaderPropertiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMeshShaderPropertiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMeshShaderPropertiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceMeshShaderPropertiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceMeshShaderPropertiesEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000328001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceMeshShaderPropertiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskWorkGroupTotalCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_WORK_GROUP_TOTAL_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskWorkGroupTotalCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_WORK_GROUP_TOTAL_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxTaskWorkGroupCount(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_WORK_GROUP_COUNT_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public int[] maxTaskWorkGroupCountArray() {
		var array = new int[3];
		MemorySegment.copy(this.segment, INT, this.offset + MAX_TASK_WORK_GROUP_COUNT_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskWorkGroupCount(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_WORK_GROUP_COUNT_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskWorkGroupCount(int[] value) {
		MemorySegment.copy(value, 0, this.segment, INT, this.offset + MAX_TASK_WORK_GROUP_COUNT_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskWorkGroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_WORK_GROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskWorkGroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_WORK_GROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxTaskWorkGroupSize(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public int[] maxTaskWorkGroupSizeArray() {
		var array = new int[3];
		MemorySegment.copy(this.segment, INT, this.offset + MAX_TASK_WORK_GROUP_SIZE_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskWorkGroupSize(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskWorkGroupSize(int[] value) {
		MemorySegment.copy(value, 0, this.segment, INT, this.offset + MAX_TASK_WORK_GROUP_SIZE_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskPayloadSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_PAYLOAD_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskPayloadSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_PAYLOAD_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskSharedMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_SHARED_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskSharedMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_SHARED_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskPayloadAndSharedMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_PAYLOAD_AND_SHARED_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxTaskPayloadAndSharedMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_PAYLOAD_AND_SHARED_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshWorkGroupTotalCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_WORK_GROUP_TOTAL_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshWorkGroupTotalCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_WORK_GROUP_TOTAL_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxMeshWorkGroupCount(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_WORK_GROUP_COUNT_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public int[] maxMeshWorkGroupCountArray() {
		var array = new int[3];
		MemorySegment.copy(this.segment, INT, this.offset + MAX_MESH_WORK_GROUP_COUNT_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshWorkGroupCount(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_WORK_GROUP_COUNT_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshWorkGroupCount(int[] value) {
		MemorySegment.copy(value, 0, this.segment, INT, this.offset + MAX_MESH_WORK_GROUP_COUNT_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshWorkGroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_WORK_GROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshWorkGroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_WORK_GROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxMeshWorkGroupSize(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public int[] maxMeshWorkGroupSizeArray() {
		var array = new int[3];
		MemorySegment.copy(this.segment, INT, this.offset + MAX_MESH_WORK_GROUP_SIZE_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshWorkGroupSize(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshWorkGroupSize(int[] value) {
		MemorySegment.copy(value, 0, this.segment, INT, this.offset + MAX_MESH_WORK_GROUP_SIZE_OFFSET, value.length);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshSharedMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_SHARED_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshSharedMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_SHARED_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshPayloadAndSharedMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_PAYLOAD_AND_SHARED_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshPayloadAndSharedMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_PAYLOAD_AND_SHARED_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshOutputMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_OUTPUT_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshOutputMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_OUTPUT_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshPayloadAndOutputMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_PAYLOAD_AND_OUTPUT_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshPayloadAndOutputMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_PAYLOAD_AND_OUTPUT_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshOutputVertices() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_OUTPUT_VERTICES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshOutputVertices(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_OUTPUT_VERTICES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshOutputPrimitives() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_OUTPUT_PRIMITIVES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshOutputPrimitives(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_OUTPUT_PRIMITIVES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshOutputLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_OUTPUT_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshOutputLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_OUTPUT_LAYERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshMultiviewViewCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_MULTIVIEW_VIEW_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxMeshMultiviewViewCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_MULTIVIEW_VIEW_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int meshOutputPerVertexGranularity() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MESH_OUTPUT_PER_VERTEX_GRANULARITY_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT meshOutputPerVertexGranularity(int value) {
		INT_HANDLE.set(this.segment, this.offset + MESH_OUTPUT_PER_VERTEX_GRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int meshOutputPerPrimitiveGranularity() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT meshOutputPerPrimitiveGranularity(int value) {
		INT_HANDLE.set(this.segment, this.offset + MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPreferredTaskWorkGroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PREFERRED_TASK_WORK_GROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxPreferredTaskWorkGroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PREFERRED_TASK_WORK_GROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPreferredMeshWorkGroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PREFERRED_MESH_WORK_GROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesEXT maxPreferredMeshWorkGroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PREFERRED_MESH_WORK_GROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean prefersLocalInvocationVertexOutput() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERS_LOCAL_INVOCATION_VERTEX_OUTPUT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMeshShaderPropertiesEXT prefersLocalInvocationVertexOutput(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERS_LOCAL_INVOCATION_VERTEX_OUTPUT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean prefersLocalInvocationPrimitiveOutput() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERS_LOCAL_INVOCATION_PRIMITIVE_OUTPUT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMeshShaderPropertiesEXT prefersLocalInvocationPrimitiveOutput(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERS_LOCAL_INVOCATION_PRIMITIVE_OUTPUT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean prefersCompactVertexOutput() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERS_COMPACT_VERTEX_OUTPUT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMeshShaderPropertiesEXT prefersCompactVertexOutput(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERS_COMPACT_VERTEX_OUTPUT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean prefersCompactPrimitiveOutput() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PREFERS_COMPACT_PRIMITIVE_OUTPUT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMeshShaderPropertiesEXT prefersCompactPrimitiveOutput(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PREFERS_COMPACT_PRIMITIVE_OUTPUT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceMeshShaderPropertiesEXT> {
		
		private static final StructConstructor<VkPhysicalDeviceMeshShaderPropertiesEXT> CONSTRUCTOR = VkPhysicalDeviceMeshShaderPropertiesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceMeshShaderPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceMeshShaderPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceMeshShaderPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}