package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkCooperativeMatrixPropertiesNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t MSize;
* 	uint32_t NSize;
* 	uint32_t KSize;
* 	VkComponentTypeNV AType;
* 	VkComponentTypeNV BType;
* 	VkComponentTypeNV CType;
* 	VkComponentTypeNV DType;
* 	VkScopeNV scope;
* };
*</pre>
**/
@AutoGenerated
public final class VkCooperativeMatrixPropertiesNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MSIZE_OFFSET = 16;
	private static final int NSIZE_OFFSET = 20;
	private static final int KSIZE_OFFSET = 24;
	private static final int ATYPE_OFFSET = 28;
	private static final int BTYPE_OFFSET = 32;
	private static final int CTYPE_OFFSET = 36;
	private static final int DTYPE_OFFSET = 40;
	private static final int SCOPE_OFFSET = 44;
	
	public VkCooperativeMatrixPropertiesNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkCooperativeMatrixPropertiesNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkCooperativeMatrixPropertiesNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkCooperativeMatrixPropertiesNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkCooperativeMatrixPropertiesNV sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 1);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkCooperativeMatrixPropertiesNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int MSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MSIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCooperativeMatrixPropertiesNV MSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MSIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int NSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NSIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCooperativeMatrixPropertiesNV NSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + NSIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int KSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + KSIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCooperativeMatrixPropertiesNV KSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + KSIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeNV")
	public int AType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ATYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeNV")
	public VkCooperativeMatrixPropertiesNV AType(int value) {
		INT_HANDLE.set(this.segment, this.offset + ATYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeNV")
	public int BType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BTYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeNV")
	public VkCooperativeMatrixPropertiesNV BType(int value) {
		INT_HANDLE.set(this.segment, this.offset + BTYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeNV")
	public int CType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CTYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeNV")
	public VkCooperativeMatrixPropertiesNV CType(int value) {
		INT_HANDLE.set(this.segment, this.offset + CTYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeNV")
	public int DType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DTYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeNV")
	public VkCooperativeMatrixPropertiesNV DType(int value) {
		INT_HANDLE.set(this.segment, this.offset + DTYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkScopeNV")
	public int scope() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SCOPE_OFFSET);
	}
	
	@NativeType("VkScopeNV")
	public VkCooperativeMatrixPropertiesNV scope(int value) {
		INT_HANDLE.set(this.segment, this.offset + SCOPE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkCooperativeMatrixPropertiesNV> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkCooperativeMatrixPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkCooperativeMatrixPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkCooperativeMatrixPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}