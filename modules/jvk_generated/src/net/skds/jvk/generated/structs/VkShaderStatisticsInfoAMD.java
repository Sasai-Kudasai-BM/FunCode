package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkShaderStatisticsInfoAMD {
* 	VkShaderStageFlags shaderStageMask;
* 	// pad (4)
* 	VkShaderResourceUsageAMD resourceUsage;
* 	uint32_t numPhysicalVgprs;
* 	uint32_t numPhysicalSgprs;
* 	uint32_t numAvailableVgprs;
* 	uint32_t numAvailableSgprs;
* 	uint32_t[3] computeWorkGroupSize;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkShaderStatisticsInfoAMD extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			VkShaderResourceUsageAMD.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			paddingLayout(4)
	);
	private static final int SHADER_STAGE_MASK_OFFSET = 0;
	private static final int RESOURCE_USAGE_OFFSET = 8;
	private static final int NUM_PHYSICAL_VGPRS_OFFSET = 40;
	private static final int NUM_PHYSICAL_SGPRS_OFFSET = 44;
	private static final int NUM_AVAILABLE_VGPRS_OFFSET = 48;
	private static final int NUM_AVAILABLE_SGPRS_OFFSET = 52;
	private static final int COMPUTE_WORK_GROUP_SIZE_OFFSET = 56;
	
	public VkShaderStatisticsInfoAMD() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkShaderStatisticsInfoAMD(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkShaderStatisticsInfoAMD(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkShaderStageFlags")
	public int shaderStageMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_STAGE_MASK_OFFSET);
	}
	
	@NativeType("VkShaderStageFlags")
	public VkShaderStatisticsInfoAMD shaderStageMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_STAGE_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("VkShaderResourceUsageAMD")
	public VkShaderResourceUsageAMD resourceUsage() {
		return new VkShaderResourceUsageAMD(this.segment, this.offset + RESOURCE_USAGE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int numPhysicalVgprs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_PHYSICAL_VGPRS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkShaderStatisticsInfoAMD numPhysicalVgprs(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_PHYSICAL_VGPRS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int numPhysicalSgprs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_PHYSICAL_SGPRS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkShaderStatisticsInfoAMD numPhysicalSgprs(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_PHYSICAL_SGPRS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int numAvailableVgprs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_AVAILABLE_VGPRS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkShaderStatisticsInfoAMD numAvailableVgprs(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_AVAILABLE_VGPRS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int numAvailableSgprs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_AVAILABLE_SGPRS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkShaderStatisticsInfoAMD numAvailableSgprs(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_AVAILABLE_SGPRS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int computeWorkGroupSize(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMPUTE_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public int[] computeWorkGroupSizeArray() {
		var array = new int[3];
		MemorySegment.copy(this.segment, INT, this.offset + COMPUTE_WORK_GROUP_SIZE_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("uint32_t[3]")
	public VkShaderStatisticsInfoAMD computeWorkGroupSize(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + COMPUTE_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public VkShaderStatisticsInfoAMD computeWorkGroupSize(int[] value) {
		MemorySegment.copy(value, 0, this.segment, INT, this.offset + COMPUTE_WORK_GROUP_SIZE_OFFSET, value.length);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkShaderStatisticsInfoAMD> {
		
		private static final StructConstructor<VkShaderStatisticsInfoAMD> CONSTRUCTOR = VkShaderStatisticsInfoAMD::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkShaderStatisticsInfoAMD[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkShaderStatisticsInfoAMD[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkShaderStatisticsInfoAMD[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}