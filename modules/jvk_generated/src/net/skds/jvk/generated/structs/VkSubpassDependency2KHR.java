package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSubpassDependency2 {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t srcSubpass;
* 	uint32_t dstSubpass;
* 	VkPipelineStageFlags srcStageMask;
* 	VkPipelineStageFlags dstStageMask;
* 	VkAccessFlags srcAccessMask;
* 	VkAccessFlags dstAccessMask;
* 	VkDependencyFlags dependencyFlags;
* 	int32_t viewOffset;
* };
*</pre>
**/
@AutoGenerated
public final class VkSubpassDependency2KHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int SRC_SUBPASS_OFFSET = 16;
	private static final int DST_SUBPASS_OFFSET = 20;
	private static final int SRC_STAGE_MASK_OFFSET = 24;
	private static final int DST_STAGE_MASK_OFFSET = 28;
	private static final int SRC_ACCESS_MASK_OFFSET = 32;
	private static final int DST_ACCESS_MASK_OFFSET = 36;
	private static final int DEPENDENCY_FLAGS_OFFSET = 40;
	private static final int VIEW_OFFSET_OFFSET = 44;
	
	public VkSubpassDependency2KHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSubpassDependency2KHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSubpassDependency2KHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 **/
	@NativeType("VkStructureType")
	public VkSubpassDependency2KHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 **/
	@NativeType("VkStructureType")
	public VkSubpassDependency2KHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000109003);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkSubpassDependency2KHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int srcSubpass() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SRC_SUBPASS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSubpassDependency2KHR srcSubpass(int value) {
		INT_HANDLE.set(this.segment, this.offset + SRC_SUBPASS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int dstSubpass() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_SUBPASS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSubpassDependency2KHR dstSubpass(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_SUBPASS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags")
	public int srcStageMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SRC_STAGE_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags")
	public VkSubpassDependency2KHR srcStageMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + SRC_STAGE_MASK_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags")
	public int dstStageMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_STAGE_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags")
	public VkSubpassDependency2KHR dstStageMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_STAGE_MASK_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkAccessFlags")
	public int srcAccessMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SRC_ACCESS_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAccessFlags")
	public VkSubpassDependency2KHR srcAccessMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + SRC_ACCESS_MASK_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkAccessFlags")
	public int dstAccessMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_ACCESS_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAccessFlags")
	public VkSubpassDependency2KHR dstAccessMask(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_ACCESS_MASK_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkDependencyFlags")
	public int dependencyFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPENDENCY_FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkDependencyFlags")
	public VkSubpassDependency2KHR dependencyFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEPENDENCY_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("int32_t")
	public int viewOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VIEW_OFFSET_OFFSET);
	}
	
	@NativeType("int32_t")
	public VkSubpassDependency2KHR viewOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + VIEW_OFFSET_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSubpassDependency2KHR> {
		
		private static final StructConstructor<VkSubpassDependency2KHR> CONSTRUCTOR = VkSubpassDependency2KHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSubpassDependency2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSubpassDependency2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSubpassDependency2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}