package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.jvk.generated.unions.VkDeviceOrHostAddressConstKHR;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkIndexType indexType;
* 	// pad (4)
* 	VkDeviceOrHostAddressConstKHR indexBuffer;
* 	VkDeviceSize indexStride;
* 	uint32_t baseTriangle;
* 	uint32_t usageCountsCount;
* 	VkMicromapUsageEXT* pUsageCounts;
* 	VkMicromapUsageEXT* ppUsageCounts;
* 	VkMicromapEXT* micromap;
* };
*</pre>
**/
@AutoGenerated
public final class VkAccelerationStructureTrianglesOpacityMicromapEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			VkDeviceOrHostAddressConstKHR.MEMORY_LAYOUT,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int INDEX_TYPE_OFFSET = 16;
	private static final int INDEX_BUFFER_OFFSET = 24;
	private static final int INDEX_STRIDE_OFFSET = 32;
	private static final int BASE_TRIANGLE_OFFSET = 40;
	private static final int USAGE_COUNTS_COUNT_OFFSET = 44;
	private static final int P_USAGE_COUNTS_OFFSET = 48;
	private static final int PP_USAGE_COUNTS_OFFSET = 56;
	private static final int MICROMAP_OFFSET = 64;
	
	public VkAccelerationStructureTrianglesOpacityMicromapEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAccelerationStructureTrianglesOpacityMicromapEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAccelerationStructureTrianglesOpacityMicromapEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT **/
	@NativeType("VkStructureType")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT **/
	@NativeType("VkStructureType")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000396009);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndexType")
	public int indexType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INDEX_TYPE_OFFSET);
	}
	
	@NativeType("VkIndexType")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT indexType(int value) {
		INT_HANDLE.set(this.segment, this.offset + INDEX_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceOrHostAddressConstKHR")
	public VkDeviceOrHostAddressConstKHR indexBuffer() {
		return new VkDeviceOrHostAddressConstKHR(this.segment, this.offset + INDEX_BUFFER_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public long indexStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + INDEX_STRIDE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT indexStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + INDEX_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int baseTriangle() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BASE_TRIANGLE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT baseTriangle(int value) {
		INT_HANDLE.set(this.segment, this.offset + BASE_TRIANGLE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int usageCountsCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + USAGE_COUNTS_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT usageCountsCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + USAGE_COUNTS_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public long pUsageCounts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_USAGE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT pUsageCounts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_USAGE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public long ppUsageCounts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PP_USAGE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkMicromapUsageEXT*")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT ppUsageCounts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PP_USAGE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkMicromapEXT*")
	public long micromap() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MICROMAP_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkMicromapEXT*")
	public VkAccelerationStructureTrianglesOpacityMicromapEXT micromap(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MICROMAP_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkAccelerationStructureTrianglesOpacityMicromapEXT> {
		
		private static final StructConstructor<VkAccelerationStructureTrianglesOpacityMicromapEXT> CONSTRUCTOR = VkAccelerationStructureTrianglesOpacityMicromapEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkAccelerationStructureTrianglesOpacityMicromapEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkAccelerationStructureTrianglesOpacityMicromapEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkAccelerationStructureTrianglesOpacityMicromapEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}