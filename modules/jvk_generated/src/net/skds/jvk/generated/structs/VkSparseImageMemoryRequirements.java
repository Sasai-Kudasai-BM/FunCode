package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSparseImageMemoryRequirements {
* 	VkSparseImageFormatProperties formatProperties;
* 	uint32_t imageMipTailFirstLod;
* 	VkDeviceSize imageMipTailSize;
* 	VkDeviceSize imageMipTailOffset;
* 	VkDeviceSize imageMipTailStride;
* };
*</pre>
**/
@AutoGenerated
public final class VkSparseImageMemoryRequirements extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkSparseImageFormatProperties.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int IMAGE_MIP_TAIL_FIRST_LOD_OFFSET = 20;
	private static final int IMAGE_MIP_TAIL_SIZE_OFFSET = 24;
	private static final int IMAGE_MIP_TAIL_OFFSET_OFFSET = 32;
	private static final int IMAGE_MIP_TAIL_STRIDE_OFFSET = 40;
	
	public VkSparseImageMemoryRequirements() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSparseImageMemoryRequirements(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSparseImageMemoryRequirements(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkSparseImageFormatProperties")
	public VkSparseImageFormatProperties formatProperties() {
		return new VkSparseImageFormatProperties(this.segment, this.offset + FORMAT_PROPERTIES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int imageMipTailFirstLod() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_MIP_TAIL_FIRST_LOD_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSparseImageMemoryRequirements imageMipTailFirstLod(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_MIP_TAIL_FIRST_LOD_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long imageMipTailSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + IMAGE_MIP_TAIL_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkSparseImageMemoryRequirements imageMipTailSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + IMAGE_MIP_TAIL_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long imageMipTailOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + IMAGE_MIP_TAIL_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkSparseImageMemoryRequirements imageMipTailOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + IMAGE_MIP_TAIL_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long imageMipTailStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + IMAGE_MIP_TAIL_STRIDE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkSparseImageMemoryRequirements imageMipTailStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + IMAGE_MIP_TAIL_STRIDE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSparseImageMemoryRequirements> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSparseImageMemoryRequirements[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSparseImageMemoryRequirements[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSparseImageMemoryRequirements[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}