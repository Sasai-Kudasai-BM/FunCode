package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkFrameBoundaryEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkFrameBoundaryFlagsEXT flags;
* 	// pad (4)
* 	uint64_t frameID;
* 	uint32_t imageCount;
* 	// pad (4)
* 	VkImage** pImages;
* 	uint32_t bufferCount;
* 	// pad (4)
* 	VkBuffer** pBuffers;
* 	uint64_t tagName;
* 	size_t tagSize;
* 	void* pTag;
* };
*</pre>
**/
@AutoGenerated
public final class VkFrameBoundaryEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int FRAME_ID_OFFSET = 24;
	private static final int IMAGE_COUNT_OFFSET = 32;
	private static final int P_IMAGES_OFFSET = 40;
	private static final int BUFFER_COUNT_OFFSET = 48;
	private static final int P_BUFFERS_OFFSET = 56;
	private static final int TAG_NAME_OFFSET = 64;
	private static final int TAG_SIZE_OFFSET = 72;
	private static final int P_TAG_OFFSET = 80;
	
	public VkFrameBoundaryEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkFrameBoundaryEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkFrameBoundaryEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT **/
	@NativeType("VkStructureType")
	public VkFrameBoundaryEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT **/
	@NativeType("VkStructureType")
	public VkFrameBoundaryEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000375001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkFrameBoundaryEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkFrameBoundaryFlagsEXT")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkFrameBoundaryFlagsEXT")
	public VkFrameBoundaryEXT flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long frameID() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + FRAME_ID_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkFrameBoundaryEXT frameID(long value) {
		LONG_HANDLE.set(this.segment, this.offset + FRAME_ID_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int imageCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkFrameBoundaryEXT imageCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImage**")
	public long pImages() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_IMAGES_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImage**")
	public VkFrameBoundaryEXT pImages(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_IMAGES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int bufferCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkFrameBoundaryEXT bufferCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkBuffer**")
	public long pBuffers() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_BUFFERS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkBuffer**")
	public VkFrameBoundaryEXT pBuffers(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_BUFFERS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint64_t")
	public long tagName() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + TAG_NAME_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint64_t")
	public VkFrameBoundaryEXT tagName(long value) {
		LONG_HANDLE.set(this.segment, this.offset + TAG_NAME_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("size_t")
	public long tagSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + TAG_SIZE_OFFSET);
	}
	
	/** optional **/
	@NativeType("size_t")
	public VkFrameBoundaryEXT tagSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + TAG_SIZE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pTag() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_TAG_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkFrameBoundaryEXT pTag(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_TAG_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkFrameBoundaryEXT> {
		
		private static final StructConstructor<VkFrameBoundaryEXT> CONSTRUCTOR = VkFrameBoundaryEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkFrameBoundaryEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkFrameBoundaryEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkFrameBoundaryEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}