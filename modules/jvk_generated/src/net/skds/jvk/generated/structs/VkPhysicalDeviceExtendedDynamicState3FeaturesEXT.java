package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBool32 extendedDynamicState3TessellationDomainOrigin;
* 	VkBool32 extendedDynamicState3DepthClampEnable;
* 	VkBool32 extendedDynamicState3PolygonMode;
* 	VkBool32 extendedDynamicState3RasterizationSamples;
* 	VkBool32 extendedDynamicState3SampleMask;
* 	VkBool32 extendedDynamicState3AlphaToCoverageEnable;
* 	VkBool32 extendedDynamicState3AlphaToOneEnable;
* 	VkBool32 extendedDynamicState3LogicOpEnable;
* 	VkBool32 extendedDynamicState3ColorBlendEnable;
* 	VkBool32 extendedDynamicState3ColorBlendEquation;
* 	VkBool32 extendedDynamicState3ColorWriteMask;
* 	VkBool32 extendedDynamicState3RasterizationStream;
* 	VkBool32 extendedDynamicState3ConservativeRasterizationMode;
* 	VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
* 	VkBool32 extendedDynamicState3DepthClipEnable;
* 	VkBool32 extendedDynamicState3SampleLocationsEnable;
* 	VkBool32 extendedDynamicState3ColorBlendAdvanced;
* 	VkBool32 extendedDynamicState3ProvokingVertexMode;
* 	VkBool32 extendedDynamicState3LineRasterizationMode;
* 	VkBool32 extendedDynamicState3LineStippleEnable;
* 	VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
* 	VkBool32 extendedDynamicState3ViewportWScalingEnable;
* 	VkBool32 extendedDynamicState3ViewportSwizzle;
* 	VkBool32 extendedDynamicState3CoverageToColorEnable;
* 	VkBool32 extendedDynamicState3CoverageToColorLocation;
* 	VkBool32 extendedDynamicState3CoverageModulationMode;
* 	VkBool32 extendedDynamicState3CoverageModulationTableEnable;
* 	VkBool32 extendedDynamicState3CoverageModulationTable;
* 	VkBool32 extendedDynamicState3CoverageReductionMode;
* 	VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
* 	VkBool32 extendedDynamicState3ShadingRateImageEnable;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int EXTENDED_DYNAMIC_STATE3_TESSELLATION_DOMAIN_ORIGIN_OFFSET = 16;
	private static final int EXTENDED_DYNAMIC_STATE3_DEPTH_CLAMP_ENABLE_OFFSET = 20;
	private static final int EXTENDED_DYNAMIC_STATE3_POLYGON_MODE_OFFSET = 24;
	private static final int EXTENDED_DYNAMIC_STATE3_RASTERIZATION_SAMPLES_OFFSET = 28;
	private static final int EXTENDED_DYNAMIC_STATE3_SAMPLE_MASK_OFFSET = 32;
	private static final int EXTENDED_DYNAMIC_STATE3_ALPHA_TO_COVERAGE_ENABLE_OFFSET = 36;
	private static final int EXTENDED_DYNAMIC_STATE3_ALPHA_TO_ONE_ENABLE_OFFSET = 40;
	private static final int EXTENDED_DYNAMIC_STATE3_LOGIC_OP_ENABLE_OFFSET = 44;
	private static final int EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_ENABLE_OFFSET = 48;
	private static final int EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_EQUATION_OFFSET = 52;
	private static final int EXTENDED_DYNAMIC_STATE3_COLOR_WRITE_MASK_OFFSET = 56;
	private static final int EXTENDED_DYNAMIC_STATE3_RASTERIZATION_STREAM_OFFSET = 60;
	private static final int EXTENDED_DYNAMIC_STATE3_CONSERVATIVE_RASTERIZATION_MODE_OFFSET = 64;
	private static final int EXTENDED_DYNAMIC_STATE3_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_OFFSET = 68;
	private static final int EXTENDED_DYNAMIC_STATE3_DEPTH_CLIP_ENABLE_OFFSET = 72;
	private static final int EXTENDED_DYNAMIC_STATE3_SAMPLE_LOCATIONS_ENABLE_OFFSET = 76;
	private static final int EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_ADVANCED_OFFSET = 80;
	private static final int EXTENDED_DYNAMIC_STATE3_PROVOKING_VERTEX_MODE_OFFSET = 84;
	private static final int EXTENDED_DYNAMIC_STATE3_LINE_RASTERIZATION_MODE_OFFSET = 88;
	private static final int EXTENDED_DYNAMIC_STATE3_LINE_STIPPLE_ENABLE_OFFSET = 92;
	private static final int EXTENDED_DYNAMIC_STATE3_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_OFFSET = 96;
	private static final int EXTENDED_DYNAMIC_STATE3_VIEWPORT_WSCALING_ENABLE_OFFSET = 100;
	private static final int EXTENDED_DYNAMIC_STATE3_VIEWPORT_SWIZZLE_OFFSET = 104;
	private static final int EXTENDED_DYNAMIC_STATE3_COVERAGE_TO_COLOR_ENABLE_OFFSET = 108;
	private static final int EXTENDED_DYNAMIC_STATE3_COVERAGE_TO_COLOR_LOCATION_OFFSET = 112;
	private static final int EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_MODE_OFFSET = 116;
	private static final int EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_TABLE_ENABLE_OFFSET = 120;
	private static final int EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_TABLE_OFFSET = 124;
	private static final int EXTENDED_DYNAMIC_STATE3_COVERAGE_REDUCTION_MODE_OFFSET = 128;
	private static final int EXTENDED_DYNAMIC_STATE3_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_OFFSET = 132;
	private static final int EXTENDED_DYNAMIC_STATE3_SHADING_RATE_IMAGE_ENABLE_OFFSET = 136;
	
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000455000);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3TessellationDomainOrigin() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_TESSELLATION_DOMAIN_ORIGIN_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3TessellationDomainOrigin(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_TESSELLATION_DOMAIN_ORIGIN_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3DepthClampEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_DEPTH_CLAMP_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3DepthClampEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_DEPTH_CLAMP_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3PolygonMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_POLYGON_MODE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3PolygonMode(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_POLYGON_MODE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3RasterizationSamples() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_RASTERIZATION_SAMPLES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3RasterizationSamples(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_RASTERIZATION_SAMPLES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3SampleMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_SAMPLE_MASK_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3SampleMask(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_SAMPLE_MASK_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3AlphaToCoverageEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_ALPHA_TO_COVERAGE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3AlphaToCoverageEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_ALPHA_TO_COVERAGE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3AlphaToOneEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_ALPHA_TO_ONE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3AlphaToOneEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_ALPHA_TO_ONE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3LogicOpEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_LOGIC_OP_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3LogicOpEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_LOGIC_OP_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ColorBlendEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ColorBlendEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ColorBlendEquation() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_EQUATION_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ColorBlendEquation(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_EQUATION_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ColorWriteMask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_WRITE_MASK_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ColorWriteMask(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_WRITE_MASK_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3RasterizationStream() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_RASTERIZATION_STREAM_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3RasterizationStream(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_RASTERIZATION_STREAM_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ConservativeRasterizationMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_CONSERVATIVE_RASTERIZATION_MODE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ConservativeRasterizationMode(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_CONSERVATIVE_RASTERIZATION_MODE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ExtraPrimitiveOverestimationSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ExtraPrimitiveOverestimationSize(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3DepthClipEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_DEPTH_CLIP_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3DepthClipEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_DEPTH_CLIP_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3SampleLocationsEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_SAMPLE_LOCATIONS_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3SampleLocationsEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_SAMPLE_LOCATIONS_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ColorBlendAdvanced() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_ADVANCED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ColorBlendAdvanced(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COLOR_BLEND_ADVANCED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ProvokingVertexMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_PROVOKING_VERTEX_MODE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ProvokingVertexMode(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_PROVOKING_VERTEX_MODE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3LineRasterizationMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_LINE_RASTERIZATION_MODE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3LineRasterizationMode(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_LINE_RASTERIZATION_MODE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3LineStippleEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_LINE_STIPPLE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3LineStippleEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_LINE_STIPPLE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3DepthClipNegativeOneToOne() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3DepthClipNegativeOneToOne(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ViewportWScalingEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_VIEWPORT_WSCALING_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ViewportWScalingEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_VIEWPORT_WSCALING_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ViewportSwizzle() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_VIEWPORT_SWIZZLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ViewportSwizzle(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_VIEWPORT_SWIZZLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3CoverageToColorEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_TO_COLOR_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3CoverageToColorEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_TO_COLOR_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3CoverageToColorLocation() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_TO_COLOR_LOCATION_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3CoverageToColorLocation(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_TO_COLOR_LOCATION_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3CoverageModulationMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_MODE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3CoverageModulationMode(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_MODE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3CoverageModulationTableEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_TABLE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3CoverageModulationTableEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_TABLE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3CoverageModulationTable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_TABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3CoverageModulationTable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_MODULATION_TABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3CoverageReductionMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_REDUCTION_MODE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3CoverageReductionMode(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_COVERAGE_REDUCTION_MODE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3RepresentativeFragmentTestEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3RepresentativeFragmentTestEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean extendedDynamicState3ShadingRateImageEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_SHADING_RATE_IMAGE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT extendedDynamicState3ShadingRateImageEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EXTENDED_DYNAMIC_STATE3_SHADING_RATE_IMAGE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT> {
		
		private static final StructConstructor<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT> CONSTRUCTOR = VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceExtendedDynamicState3FeaturesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceExtendedDynamicState3FeaturesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceExtendedDynamicState3FeaturesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}