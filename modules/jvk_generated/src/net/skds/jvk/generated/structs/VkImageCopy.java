package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkImageCopy {
* 	VkImageSubresourceLayers srcSubresource;
* 	VkOffset3D srcOffset;
* 	VkImageSubresourceLayers dstSubresource;
* 	VkOffset3D dstOffset;
* 	VkExtent3D extent;
* };
*</pre>
**/
@AutoGenerated
public final class VkImageCopy extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkImageSubresourceLayers.MEMORY_LAYOUT,
			VkOffset3D.MEMORY_LAYOUT,
			VkImageSubresourceLayers.MEMORY_LAYOUT,
			VkOffset3D.MEMORY_LAYOUT,
			VkExtent3D.MEMORY_LAYOUT
	);
	private static final int SRC_SUBRESOURCE_OFFSET = 0;
	private static final int SRC_OFFSET_OFFSET = 16;
	private static final int DST_SUBRESOURCE_OFFSET = 28;
	private static final int DST_OFFSET_OFFSET = 44;
	private static final int EXTENT_OFFSET = 56;
	
	public VkImageCopy() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkImageCopy(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkImageCopy(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkImageSubresourceLayers")
	public VkImageSubresourceLayers srcSubresource() {
		return new VkImageSubresourceLayers(this.segment, this.offset + SRC_SUBRESOURCE_OFFSET);
	}
	
	@NativeType("VkOffset3D")
	public VkOffset3D srcOffset() {
		return new VkOffset3D(this.segment, this.offset + SRC_OFFSET_OFFSET);
	}
	
	@NativeType("VkImageSubresourceLayers")
	public VkImageSubresourceLayers dstSubresource() {
		return new VkImageSubresourceLayers(this.segment, this.offset + DST_SUBRESOURCE_OFFSET);
	}
	
	@NativeType("VkOffset3D")
	public VkOffset3D dstOffset() {
		return new VkOffset3D(this.segment, this.offset + DST_OFFSET_OFFSET);
	}
	
	@NativeType("VkExtent3D")
	public VkExtent3D extent() {
		return new VkExtent3D(this.segment, this.offset + EXTENT_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkImageCopy> {
		
		private static final StructConstructor<VkImageCopy> CONSTRUCTOR = VkImageCopy::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkImageCopy[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkImageCopy[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkImageCopy[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}