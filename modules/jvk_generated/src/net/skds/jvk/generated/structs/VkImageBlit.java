package net.skds.jvk.generated.structs;

import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;

import static java.lang.foreign.MemoryLayout.sequenceLayout;
import static java.lang.foreign.MemoryLayout.structLayout;

/**
 * <pre>
 * C definition:
 * struct VkImageBlit {
 * 	VkImageSubresourceLayers srcSubresource;
 * 	VkOffset3D[2] srcOffsets;
 * 	VkImageSubresourceLayers dstSubresource;
 * 	VkOffset3D[2] dstOffsets;
 * };
 * </pre>
 **/
@AutoGenerated
public final class VkImageBlit extends CStruct {

	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkImageSubresourceLayers.MEMORY_LAYOUT,
			sequenceLayout(2, VkOffset3D.MEMORY_LAYOUT),
			VkImageSubresourceLayers.MEMORY_LAYOUT,
			sequenceLayout(2, VkOffset3D.MEMORY_LAYOUT)
	);

	public VkImageBlit() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}

	public VkImageBlit(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}

	public VkImageBlit(MemorySegment segment, long offset) {
		super(segment, offset);
	}


	@NativeType("VkImageSubresourceLayers")
	public VkImageSubresourceLayers srcSubresource() {
		return new VkImageSubresourceLayers(this.segment, this.offset + SRC_SUBRESOURCE_OFFSET);
	}

	@NativeType("VkOffset3D[2]")
	public VkOffset3D srcOffsets(int i) {
		return new VkOffset3D(this.segment, this.offset + SRC_OFFSETS_OFFSET + VkOffset3D.MEMORY_LAYOUT.byteSize() * i);
	}

	@NativeType("VkOffset3D[2]")
	public Array srcOffsets() {
		return new Array(this.segment, this.offset + SRC_OFFSETS_OFFSET);
	}

	@NativeType("VkImageSubresourceLayers")
	public VkImageSubresourceLayers dstSubresource() {
		return new VkImageSubresourceLayers(this.segment, this.offset + DST_SUBRESOURCE_OFFSET);
	}

	@NativeType("VkOffset3D[2]")
	public VkOffset3D dstOffsets(int i) {
		return new VkOffset3D(this.segment, this.offset + DST_OFFSETS_OFFSET + VkOffset3D.MEMORY_LAYOUT.byteSize() * i);
	}

	@NativeType("VkOffset3D[2]")
	public Array dstOffsets() {
		return new Array(this.segment, this.offset + DST_OFFSETS_OFFSET);
	}


	@AutoGenerated
	public static final class Array extends VkStructArray<VkImageBlit> {

		public Array(int size) {
			super(Arena.ofAuto(), new VkImageBlit[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}

		public Array(Arena arena, int size) {
			super(arena, new VkImageBlit[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}

		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkImageBlit[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}

	}

	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}

	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}

}