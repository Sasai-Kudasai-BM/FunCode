package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPipelineRasterizationStateCreateInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkPipelineRasterizationStateCreateFlags flags;
* 	VkBool32 depthClampEnable;
* 	VkBool32 rasterizerDiscardEnable;
* 	VkPolygonMode polygonMode;
* 	VkCullModeFlags cullMode;
* 	VkFrontFace frontFace;
* 	VkBool32 depthBiasEnable;
* 	float depthBiasConstantFactor;
* 	float depthBiasClamp;
* 	float depthBiasSlopeFactor;
* 	float lineWidth;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPipelineRasterizationStateCreateInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int DEPTH_CLAMP_ENABLE_OFFSET = 20;
	private static final int RASTERIZER_DISCARD_ENABLE_OFFSET = 24;
	private static final int POLYGON_MODE_OFFSET = 28;
	private static final int CULL_MODE_OFFSET = 32;
	private static final int FRONT_FACE_OFFSET = 36;
	private static final int DEPTH_BIAS_ENABLE_OFFSET = 40;
	private static final int DEPTH_BIAS_CONSTANT_FACTOR_OFFSET = 44;
	private static final int DEPTH_BIAS_CLAMP_OFFSET = 48;
	private static final int DEPTH_BIAS_SLOPE_FACTOR_OFFSET = 52;
	private static final int LINE_WIDTH_OFFSET = 56;
	
	public VkPipelineRasterizationStateCreateInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineRasterizationStateCreateInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineRasterizationStateCreateInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineRasterizationStateCreateInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineRasterizationStateCreateInfo sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 23);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPipelineRasterizationStateCreateInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineRasterizationStateCreateFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineRasterizationStateCreateFlags")
	public VkPipelineRasterizationStateCreateInfo flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean depthClampEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_CLAMP_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineRasterizationStateCreateInfo depthClampEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_CLAMP_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean rasterizerDiscardEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RASTERIZER_DISCARD_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineRasterizationStateCreateInfo rasterizerDiscardEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + RASTERIZER_DISCARD_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkPolygonMode")
	public int polygonMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + POLYGON_MODE_OFFSET);
	}
	
	@NativeType("VkPolygonMode")
	public VkPipelineRasterizationStateCreateInfo polygonMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + POLYGON_MODE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkCullModeFlags")
	public int cullMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CULL_MODE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkCullModeFlags")
	public VkPipelineRasterizationStateCreateInfo cullMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + CULL_MODE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkFrontFace")
	public int frontFace() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRONT_FACE_OFFSET);
	}
	
	@NativeType("VkFrontFace")
	public VkPipelineRasterizationStateCreateInfo frontFace(int value) {
		INT_HANDLE.set(this.segment, this.offset + FRONT_FACE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean depthBiasEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_BIAS_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineRasterizationStateCreateInfo depthBiasEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_BIAS_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("float")
	public float depthBiasConstantFactor() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + DEPTH_BIAS_CONSTANT_FACTOR_OFFSET);
	}
	
	@NativeType("float")
	public VkPipelineRasterizationStateCreateInfo depthBiasConstantFactor(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + DEPTH_BIAS_CONSTANT_FACTOR_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float depthBiasClamp() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + DEPTH_BIAS_CLAMP_OFFSET);
	}
	
	@NativeType("float")
	public VkPipelineRasterizationStateCreateInfo depthBiasClamp(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + DEPTH_BIAS_CLAMP_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float depthBiasSlopeFactor() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + DEPTH_BIAS_SLOPE_FACTOR_OFFSET);
	}
	
	@NativeType("float")
	public VkPipelineRasterizationStateCreateInfo depthBiasSlopeFactor(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + DEPTH_BIAS_SLOPE_FACTOR_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float lineWidth() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + LINE_WIDTH_OFFSET);
	}
	
	@NativeType("float")
	public VkPipelineRasterizationStateCreateInfo lineWidth(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + LINE_WIDTH_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPipelineRasterizationStateCreateInfo> {
		
		private static final StructConstructor<VkPipelineRasterizationStateCreateInfo> CONSTRUCTOR = VkPipelineRasterizationStateCreateInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPipelineRasterizationStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPipelineRasterizationStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPipelineRasterizationStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}