package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceOpticalFlowPropertiesNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
* 	VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
* 	VkBool32 hintSupported;
* 	VkBool32 costSupported;
* 	VkBool32 bidirectionalFlowSupported;
* 	VkBool32 globalFlowSupported;
* 	uint32_t minWidth;
* 	uint32_t minHeight;
* 	uint32_t maxWidth;
* 	uint32_t maxHeight;
* 	uint32_t maxNumRegionsOfInterest;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceOpticalFlowPropertiesNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int SUPPORTED_OUTPUT_GRID_SIZES_OFFSET = 16;
	private static final int SUPPORTED_HINT_GRID_SIZES_OFFSET = 20;
	private static final int HINT_SUPPORTED_OFFSET = 24;
	private static final int COST_SUPPORTED_OFFSET = 28;
	private static final int BIDIRECTIONAL_FLOW_SUPPORTED_OFFSET = 32;
	private static final int GLOBAL_FLOW_SUPPORTED_OFFSET = 36;
	private static final int MIN_WIDTH_OFFSET = 40;
	private static final int MIN_HEIGHT_OFFSET = 44;
	private static final int MAX_WIDTH_OFFSET = 48;
	private static final int MAX_HEIGHT_OFFSET = 52;
	private static final int MAX_NUM_REGIONS_OF_INTEREST_OFFSET = 56;
	
	public VkPhysicalDeviceOpticalFlowPropertiesNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceOpticalFlowPropertiesNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceOpticalFlowPropertiesNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceOpticalFlowPropertiesNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceOpticalFlowPropertiesNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000464001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceOpticalFlowPropertiesNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkOpticalFlowGridSizeFlagsNV")
	public int supportedOutputGridSizes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_OUTPUT_GRID_SIZES_OFFSET);
	}
	
	@NativeType("VkOpticalFlowGridSizeFlagsNV")
	public VkPhysicalDeviceOpticalFlowPropertiesNV supportedOutputGridSizes(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_OUTPUT_GRID_SIZES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkOpticalFlowGridSizeFlagsNV")
	public int supportedHintGridSizes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_HINT_GRID_SIZES_OFFSET);
	}
	
	@NativeType("VkOpticalFlowGridSizeFlagsNV")
	public VkPhysicalDeviceOpticalFlowPropertiesNV supportedHintGridSizes(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_HINT_GRID_SIZES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean hintSupported() {
		return (int) INT_HANDLE.get(this.segment, this.offset + HINT_SUPPORTED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceOpticalFlowPropertiesNV hintSupported(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + HINT_SUPPORTED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean costSupported() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COST_SUPPORTED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceOpticalFlowPropertiesNV costSupported(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + COST_SUPPORTED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean bidirectionalFlowSupported() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BIDIRECTIONAL_FLOW_SUPPORTED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceOpticalFlowPropertiesNV bidirectionalFlowSupported(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + BIDIRECTIONAL_FLOW_SUPPORTED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean globalFlowSupported() {
		return (int) INT_HANDLE.get(this.segment, this.offset + GLOBAL_FLOW_SUPPORTED_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceOpticalFlowPropertiesNV globalFlowSupported(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + GLOBAL_FLOW_SUPPORTED_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("uint32_t")
	public int minWidth() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIN_WIDTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceOpticalFlowPropertiesNV minWidth(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIN_WIDTH_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int minHeight() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIN_HEIGHT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceOpticalFlowPropertiesNV minHeight(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIN_HEIGHT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxWidth() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_WIDTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceOpticalFlowPropertiesNV maxWidth(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_WIDTH_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxHeight() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_HEIGHT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceOpticalFlowPropertiesNV maxHeight(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_HEIGHT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxNumRegionsOfInterest() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_NUM_REGIONS_OF_INTEREST_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceOpticalFlowPropertiesNV maxNumRegionsOfInterest(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_NUM_REGIONS_OF_INTEREST_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceOpticalFlowPropertiesNV> {
		
		private static final StructConstructor<VkPhysicalDeviceOpticalFlowPropertiesNV> CONSTRUCTOR = VkPhysicalDeviceOpticalFlowPropertiesNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceOpticalFlowPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceOpticalFlowPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceOpticalFlowPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}