package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceMaintenance5Properties {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
* 	VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
* 	VkBool32 depthStencilSwizzleOneSupport;
* 	VkBool32 polygonModePointSize;
* 	VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
* 	VkBool32 nonStrictWideLinesUseParallelogram;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceMaintenance5PropertiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int EARLY_FRAGMENT_MULTISAMPLE_COVERAGE_AFTER_SAMPLE_COUNTING_OFFSET = 16;
	private static final int EARLY_FRAGMENT_SAMPLE_MASK_TEST_BEFORE_SAMPLE_COUNTING_OFFSET = 20;
	private static final int DEPTH_STENCIL_SWIZZLE_ONE_SUPPORT_OFFSET = 24;
	private static final int POLYGON_MODE_POINT_SIZE_OFFSET = 28;
	private static final int NON_STRICT_SINGLE_PIXEL_WIDE_LINES_USE_PARALLELOGRAM_OFFSET = 32;
	private static final int NON_STRICT_WIDE_LINES_USE_PARALLELOGRAM_OFFSET = 36;
	
	public VkPhysicalDeviceMaintenance5PropertiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMaintenance5PropertiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMaintenance5PropertiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceMaintenance5PropertiesKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceMaintenance5PropertiesKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000470001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceMaintenance5PropertiesKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean earlyFragmentMultisampleCoverageAfterSampleCounting() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EARLY_FRAGMENT_MULTISAMPLE_COVERAGE_AFTER_SAMPLE_COUNTING_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMaintenance5PropertiesKHR earlyFragmentMultisampleCoverageAfterSampleCounting(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EARLY_FRAGMENT_MULTISAMPLE_COVERAGE_AFTER_SAMPLE_COUNTING_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean earlyFragmentSampleMaskTestBeforeSampleCounting() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EARLY_FRAGMENT_SAMPLE_MASK_TEST_BEFORE_SAMPLE_COUNTING_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMaintenance5PropertiesKHR earlyFragmentSampleMaskTestBeforeSampleCounting(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EARLY_FRAGMENT_SAMPLE_MASK_TEST_BEFORE_SAMPLE_COUNTING_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean depthStencilSwizzleOneSupport() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_STENCIL_SWIZZLE_ONE_SUPPORT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMaintenance5PropertiesKHR depthStencilSwizzleOneSupport(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_STENCIL_SWIZZLE_ONE_SUPPORT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean polygonModePointSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + POLYGON_MODE_POINT_SIZE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMaintenance5PropertiesKHR polygonModePointSize(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + POLYGON_MODE_POINT_SIZE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean nonStrictSinglePixelWideLinesUseParallelogram() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NON_STRICT_SINGLE_PIXEL_WIDE_LINES_USE_PARALLELOGRAM_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMaintenance5PropertiesKHR nonStrictSinglePixelWideLinesUseParallelogram(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + NON_STRICT_SINGLE_PIXEL_WIDE_LINES_USE_PARALLELOGRAM_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean nonStrictWideLinesUseParallelogram() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NON_STRICT_WIDE_LINES_USE_PARALLELOGRAM_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceMaintenance5PropertiesKHR nonStrictWideLinesUseParallelogram(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + NON_STRICT_WIDE_LINES_USE_PARALLELOGRAM_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceMaintenance5PropertiesKHR> {
		
		private static final StructConstructor<VkPhysicalDeviceMaintenance5PropertiesKHR> CONSTRUCTOR = VkPhysicalDeviceMaintenance5PropertiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceMaintenance5PropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceMaintenance5PropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceMaintenance5PropertiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}