package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceMeshShaderPropertiesNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t maxDrawMeshTasksCount;
* 	uint32_t maxTaskWorkGroupInvocations;
* 	uint32_t[3] maxTaskWorkGroupSize;
* 	uint32_t maxTaskTotalMemorySize;
* 	uint32_t maxTaskOutputCount;
* 	uint32_t maxMeshWorkGroupInvocations;
* 	uint32_t[3] maxMeshWorkGroupSize;
* 	uint32_t maxMeshTotalMemorySize;
* 	uint32_t maxMeshOutputVertices;
* 	uint32_t maxMeshOutputPrimitives;
* 	uint32_t maxMeshMultiviewViewCount;
* 	uint32_t meshOutputPerVertexGranularity;
* 	uint32_t meshOutputPerPrimitiveGranularity;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceMeshShaderPropertiesNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MAX_DRAW_MESH_TASKS_COUNT_OFFSET = 16;
	private static final int MAX_TASK_WORK_GROUP_INVOCATIONS_OFFSET = 20;
	private static final int MAX_TASK_WORK_GROUP_SIZE_OFFSET = 24;
	private static final int MAX_TASK_TOTAL_MEMORY_SIZE_OFFSET = 36;
	private static final int MAX_TASK_OUTPUT_COUNT_OFFSET = 40;
	private static final int MAX_MESH_WORK_GROUP_INVOCATIONS_OFFSET = 44;
	private static final int MAX_MESH_WORK_GROUP_SIZE_OFFSET = 48;
	private static final int MAX_MESH_TOTAL_MEMORY_SIZE_OFFSET = 60;
	private static final int MAX_MESH_OUTPUT_VERTICES_OFFSET = 64;
	private static final int MAX_MESH_OUTPUT_PRIMITIVES_OFFSET = 68;
	private static final int MAX_MESH_MULTIVIEW_VIEW_COUNT_OFFSET = 72;
	private static final int MESH_OUTPUT_PER_VERTEX_GRANULARITY_OFFSET = 76;
	private static final int MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_OFFSET = 80;
	
	public VkPhysicalDeviceMeshShaderPropertiesNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMeshShaderPropertiesNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceMeshShaderPropertiesNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceMeshShaderPropertiesNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceMeshShaderPropertiesNV sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 1);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceMeshShaderPropertiesNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDrawMeshTasksCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DRAW_MESH_TASKS_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxDrawMeshTasksCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DRAW_MESH_TASKS_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskWorkGroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_WORK_GROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxTaskWorkGroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_WORK_GROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxTaskWorkGroupSize(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxTaskWorkGroupSize(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskTotalMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_TOTAL_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxTaskTotalMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_TOTAL_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTaskOutputCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TASK_OUTPUT_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxTaskOutputCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TASK_OUTPUT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshWorkGroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_WORK_GROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxMeshWorkGroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_WORK_GROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxMeshWorkGroupSize(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxMeshWorkGroupSize(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshTotalMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_TOTAL_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxMeshTotalMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_TOTAL_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshOutputVertices() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_OUTPUT_VERTICES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxMeshOutputVertices(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_OUTPUT_VERTICES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshOutputPrimitives() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_OUTPUT_PRIMITIVES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxMeshOutputPrimitives(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_OUTPUT_PRIMITIVES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMeshMultiviewViewCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MESH_MULTIVIEW_VIEW_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV maxMeshMultiviewViewCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MESH_MULTIVIEW_VIEW_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int meshOutputPerVertexGranularity() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MESH_OUTPUT_PER_VERTEX_GRANULARITY_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV meshOutputPerVertexGranularity(int value) {
		INT_HANDLE.set(this.segment, this.offset + MESH_OUTPUT_PER_VERTEX_GRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int meshOutputPerPrimitiveGranularity() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceMeshShaderPropertiesNV meshOutputPerPrimitiveGranularity(int value) {
		INT_HANDLE.set(this.segment, this.offset + MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceMeshShaderPropertiesNV> {
		
		private static final StructConstructor<VkPhysicalDeviceMeshShaderPropertiesNV> CONSTRUCTOR = VkPhysicalDeviceMeshShaderPropertiesNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceMeshShaderPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceMeshShaderPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceMeshShaderPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}