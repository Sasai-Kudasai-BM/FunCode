package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.jvk.generated.unions.VkDeviceOrHostAddressConstKHR;
import net.skds.jvk.generated.unions.VkDeviceOrHostAddressKHR;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkConvertCooperativeVectorMatrixInfoNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	size_t srcSize;
* 	VkDeviceOrHostAddressConstKHR srcData;
* 	size_t* pDstSize;
* 	VkDeviceOrHostAddressKHR dstData;
* 	VkComponentTypeKHR srcComponentType;
* 	VkComponentTypeKHR dstComponentType;
* 	uint32_t numRows;
* 	uint32_t numColumns;
* 	VkCooperativeVectorMatrixLayoutNV srcLayout;
* 	// pad (4)
* 	size_t srcStride;
* 	VkCooperativeVectorMatrixLayoutNV dstLayout;
* 	// pad (4)
* 	size_t dstStride;
* };
*</pre>
**/
@AutoGenerated
public final class VkConvertCooperativeVectorMatrixInfoNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			VkDeviceOrHostAddressConstKHR.MEMORY_LAYOUT,
			JAVA_LONG,
			VkDeviceOrHostAddressKHR.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int SRC_SIZE_OFFSET = 16;
	private static final int SRC_DATA_OFFSET = 24;
	private static final int P_DST_SIZE_OFFSET = 32;
	private static final int DST_DATA_OFFSET = 40;
	private static final int SRC_COMPONENT_TYPE_OFFSET = 48;
	private static final int DST_COMPONENT_TYPE_OFFSET = 52;
	private static final int NUM_ROWS_OFFSET = 56;
	private static final int NUM_COLUMNS_OFFSET = 60;
	private static final int SRC_LAYOUT_OFFSET = 64;
	private static final int SRC_STRIDE_OFFSET = 72;
	private static final int DST_LAYOUT_OFFSET = 80;
	private static final int DST_STRIDE_OFFSET = 88;
	
	public VkConvertCooperativeVectorMatrixInfoNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkConvertCooperativeVectorMatrixInfoNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkConvertCooperativeVectorMatrixInfoNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV **/
	@NativeType("VkStructureType")
	public VkConvertCooperativeVectorMatrixInfoNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV **/
	@NativeType("VkStructureType")
	public VkConvertCooperativeVectorMatrixInfoNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000491004);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkConvertCooperativeVectorMatrixInfoNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long srcSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SRC_SIZE_OFFSET);
	}
	
	@NativeType("size_t")
	public VkConvertCooperativeVectorMatrixInfoNV srcSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SRC_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceOrHostAddressConstKHR")
	public VkDeviceOrHostAddressConstKHR srcData() {
		return new VkDeviceOrHostAddressConstKHR(this.segment, this.offset + SRC_DATA_OFFSET);
	}
	
	/** optional **/
	@NativeType("size_t*")
	public long pDstSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_DST_SIZE_OFFSET);
	}
	
	/** optional **/
	@NativeType("size_t*")
	public VkConvertCooperativeVectorMatrixInfoNV pDstSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_DST_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceOrHostAddressKHR")
	public VkDeviceOrHostAddressKHR dstData() {
		return new VkDeviceOrHostAddressKHR(this.segment, this.offset + DST_DATA_OFFSET);
	}
	
	@NativeType("VkComponentTypeKHR")
	public int srcComponentType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SRC_COMPONENT_TYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeKHR")
	public VkConvertCooperativeVectorMatrixInfoNV srcComponentType(int value) {
		INT_HANDLE.set(this.segment, this.offset + SRC_COMPONENT_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeKHR")
	public int dstComponentType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_COMPONENT_TYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeKHR")
	public VkConvertCooperativeVectorMatrixInfoNV dstComponentType(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_COMPONENT_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int numRows() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_ROWS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkConvertCooperativeVectorMatrixInfoNV numRows(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_ROWS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int numColumns() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NUM_COLUMNS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkConvertCooperativeVectorMatrixInfoNV numColumns(int value) {
		INT_HANDLE.set(this.segment, this.offset + NUM_COLUMNS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkCooperativeVectorMatrixLayoutNV")
	public int srcLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SRC_LAYOUT_OFFSET);
	}
	
	@NativeType("VkCooperativeVectorMatrixLayoutNV")
	public VkConvertCooperativeVectorMatrixInfoNV srcLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + SRC_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long srcStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SRC_STRIDE_OFFSET);
	}
	
	@NativeType("size_t")
	public VkConvertCooperativeVectorMatrixInfoNV srcStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SRC_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkCooperativeVectorMatrixLayoutNV")
	public int dstLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_LAYOUT_OFFSET);
	}
	
	@NativeType("VkCooperativeVectorMatrixLayoutNV")
	public VkConvertCooperativeVectorMatrixInfoNV dstLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long dstStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DST_STRIDE_OFFSET);
	}
	
	@NativeType("size_t")
	public VkConvertCooperativeVectorMatrixInfoNV dstStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DST_STRIDE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkConvertCooperativeVectorMatrixInfoNV> {
		
		private static final StructConstructor<VkConvertCooperativeVectorMatrixInfoNV> CONSTRUCTOR = VkConvertCooperativeVectorMatrixInfoNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkConvertCooperativeVectorMatrixInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkConvertCooperativeVectorMatrixInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkConvertCooperativeVectorMatrixInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}