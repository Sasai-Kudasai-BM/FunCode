package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceLimits {
* 	uint32_t maxImageDimension1D;
* 	uint32_t maxImageDimension2D;
* 	uint32_t maxImageDimension3D;
* 	uint32_t maxImageDimensionCube;
* 	uint32_t maxImageArrayLayers;
* 	uint32_t maxTexelBufferElements;
* 	uint32_t maxUniformBufferRange;
* 	uint32_t maxStorageBufferRange;
* 	uint32_t maxPushConstantsSize;
* 	uint32_t maxMemoryAllocationCount;
* 	uint32_t maxSamplerAllocationCount;
* 	// pad (4)
* 	VkDeviceSize bufferImageGranularity;
* 	VkDeviceSize sparseAddressSpaceSize;
* 	uint32_t maxBoundDescriptorSets;
* 	uint32_t maxPerStageDescriptorSamplers;
* 	uint32_t maxPerStageDescriptorUniformBuffers;
* 	uint32_t maxPerStageDescriptorStorageBuffers;
* 	uint32_t maxPerStageDescriptorSampledImages;
* 	uint32_t maxPerStageDescriptorStorageImages;
* 	uint32_t maxPerStageDescriptorInputAttachments;
* 	uint32_t maxPerStageResources;
* 	uint32_t maxDescriptorSetSamplers;
* 	uint32_t maxDescriptorSetUniformBuffers;
* 	uint32_t maxDescriptorSetUniformBuffersDynamic;
* 	uint32_t maxDescriptorSetStorageBuffers;
* 	uint32_t maxDescriptorSetStorageBuffersDynamic;
* 	uint32_t maxDescriptorSetSampledImages;
* 	uint32_t maxDescriptorSetStorageImages;
* 	uint32_t maxDescriptorSetInputAttachments;
* 	uint32_t maxVertexInputAttributes;
* 	uint32_t maxVertexInputBindings;
* 	uint32_t maxVertexInputAttributeOffset;
* 	uint32_t maxVertexInputBindingStride;
* 	uint32_t maxVertexOutputComponents;
* 	uint32_t maxTessellationGenerationLevel;
* 	uint32_t maxTessellationPatchSize;
* 	uint32_t maxTessellationControlPerVertexInputComponents;
* 	uint32_t maxTessellationControlPerVertexOutputComponents;
* 	uint32_t maxTessellationControlPerPatchOutputComponents;
* 	uint32_t maxTessellationControlTotalOutputComponents;
* 	uint32_t maxTessellationEvaluationInputComponents;
* 	uint32_t maxTessellationEvaluationOutputComponents;
* 	uint32_t maxGeometryShaderInvocations;
* 	uint32_t maxGeometryInputComponents;
* 	uint32_t maxGeometryOutputComponents;
* 	uint32_t maxGeometryOutputVertices;
* 	uint32_t maxGeometryTotalOutputComponents;
* 	uint32_t maxFragmentInputComponents;
* 	uint32_t maxFragmentOutputAttachments;
* 	uint32_t maxFragmentDualSrcAttachments;
* 	uint32_t maxFragmentCombinedOutputResources;
* 	uint32_t maxComputeSharedMemorySize;
* 	uint32_t[3] maxComputeWorkGroupCount;
* 	uint32_t maxComputeWorkGroupInvocations;
* 	uint32_t[3] maxComputeWorkGroupSize;
* 	uint32_t subPixelPrecisionBits;
* 	uint32_t subTexelPrecisionBits;
* 	uint32_t mipmapPrecisionBits;
* 	uint32_t maxDrawIndexedIndexValue;
* 	uint32_t maxDrawIndirectCount;
* 	float maxSamplerLodBias;
* 	float maxSamplerAnisotropy;
* 	uint32_t maxViewports;
* 	uint32_t[2] maxViewportDimensions;
* 	float[2] viewportBoundsRange;
* 	uint32_t viewportSubPixelBits;
* 	// pad (4)
* 	size_t minMemoryMapAlignment;
* 	VkDeviceSize minTexelBufferOffsetAlignment;
* 	VkDeviceSize minUniformBufferOffsetAlignment;
* 	VkDeviceSize minStorageBufferOffsetAlignment;
* 	int32_t minTexelOffset;
* 	uint32_t maxTexelOffset;
* 	int32_t minTexelGatherOffset;
* 	uint32_t maxTexelGatherOffset;
* 	float minInterpolationOffset;
* 	float maxInterpolationOffset;
* 	uint32_t subPixelInterpolationOffsetBits;
* 	uint32_t maxFramebufferWidth;
* 	uint32_t maxFramebufferHeight;
* 	uint32_t maxFramebufferLayers;
* 	VkSampleCountFlags framebufferColorSampleCounts;
* 	VkSampleCountFlags framebufferDepthSampleCounts;
* 	VkSampleCountFlags framebufferStencilSampleCounts;
* 	VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
* 	uint32_t maxColorAttachments;
* 	VkSampleCountFlags sampledImageColorSampleCounts;
* 	VkSampleCountFlags sampledImageIntegerSampleCounts;
* 	VkSampleCountFlags sampledImageDepthSampleCounts;
* 	VkSampleCountFlags sampledImageStencilSampleCounts;
* 	VkSampleCountFlags storageImageSampleCounts;
* 	uint32_t maxSampleMaskWords;
* 	VkBool32 timestampComputeAndGraphics;
* 	float timestampPeriod;
* 	uint32_t maxClipDistances;
* 	uint32_t maxCullDistances;
* 	uint32_t maxCombinedClipAndCullDistances;
* 	uint32_t discreteQueuePriorities;
* 	float[2] pointSizeRange;
* 	float[2] lineWidthRange;
* 	float pointSizeGranularity;
* 	float lineWidthGranularity;
* 	VkBool32 strictLines;
* 	VkBool32 standardSampleLocations;
* 	// pad (4)
* 	VkDeviceSize optimalBufferCopyOffsetAlignment;
* 	VkDeviceSize optimalBufferCopyRowPitchAlignment;
* 	VkDeviceSize nonCoherentAtomSize;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceLimits extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			sequenceLayout(3, JAVA_INT),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_INT,
			sequenceLayout(2, JAVA_INT),
			sequenceLayout(2, JAVA_FLOAT),
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_FLOAT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(2, JAVA_FLOAT),
			sequenceLayout(2, JAVA_FLOAT),
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int MAX_IMAGE_DIMENSION1_D_OFFSET = 0;
	private static final int MAX_IMAGE_DIMENSION2_D_OFFSET = 4;
	private static final int MAX_IMAGE_DIMENSION3_D_OFFSET = 8;
	private static final int MAX_IMAGE_DIMENSION_CUBE_OFFSET = 12;
	private static final int MAX_IMAGE_ARRAY_LAYERS_OFFSET = 16;
	private static final int MAX_TEXEL_BUFFER_ELEMENTS_OFFSET = 20;
	private static final int MAX_UNIFORM_BUFFER_RANGE_OFFSET = 24;
	private static final int MAX_STORAGE_BUFFER_RANGE_OFFSET = 28;
	private static final int MAX_PUSH_CONSTANTS_SIZE_OFFSET = 32;
	private static final int MAX_MEMORY_ALLOCATION_COUNT_OFFSET = 36;
	private static final int MAX_SAMPLER_ALLOCATION_COUNT_OFFSET = 40;
	private static final int BUFFER_IMAGE_GRANULARITY_OFFSET = 48;
	private static final int SPARSE_ADDRESS_SPACE_SIZE_OFFSET = 56;
	private static final int MAX_BOUND_DESCRIPTOR_SETS_OFFSET = 64;
	private static final int MAX_PER_STAGE_DESCRIPTOR_SAMPLERS_OFFSET = 68;
	private static final int MAX_PER_STAGE_DESCRIPTOR_UNIFORM_BUFFERS_OFFSET = 72;
	private static final int MAX_PER_STAGE_DESCRIPTOR_STORAGE_BUFFERS_OFFSET = 76;
	private static final int MAX_PER_STAGE_DESCRIPTOR_SAMPLED_IMAGES_OFFSET = 80;
	private static final int MAX_PER_STAGE_DESCRIPTOR_STORAGE_IMAGES_OFFSET = 84;
	private static final int MAX_PER_STAGE_DESCRIPTOR_INPUT_ATTACHMENTS_OFFSET = 88;
	private static final int MAX_PER_STAGE_RESOURCES_OFFSET = 92;
	private static final int MAX_DESCRIPTOR_SET_SAMPLERS_OFFSET = 96;
	private static final int MAX_DESCRIPTOR_SET_UNIFORM_BUFFERS_OFFSET = 100;
	private static final int MAX_DESCRIPTOR_SET_UNIFORM_BUFFERS_DYNAMIC_OFFSET = 104;
	private static final int MAX_DESCRIPTOR_SET_STORAGE_BUFFERS_OFFSET = 108;
	private static final int MAX_DESCRIPTOR_SET_STORAGE_BUFFERS_DYNAMIC_OFFSET = 112;
	private static final int MAX_DESCRIPTOR_SET_SAMPLED_IMAGES_OFFSET = 116;
	private static final int MAX_DESCRIPTOR_SET_STORAGE_IMAGES_OFFSET = 120;
	private static final int MAX_DESCRIPTOR_SET_INPUT_ATTACHMENTS_OFFSET = 124;
	private static final int MAX_VERTEX_INPUT_ATTRIBUTES_OFFSET = 128;
	private static final int MAX_VERTEX_INPUT_BINDINGS_OFFSET = 132;
	private static final int MAX_VERTEX_INPUT_ATTRIBUTE_OFFSET_OFFSET = 136;
	private static final int MAX_VERTEX_INPUT_BINDING_STRIDE_OFFSET = 140;
	private static final int MAX_VERTEX_OUTPUT_COMPONENTS_OFFSET = 144;
	private static final int MAX_TESSELLATION_GENERATION_LEVEL_OFFSET = 148;
	private static final int MAX_TESSELLATION_PATCH_SIZE_OFFSET = 152;
	private static final int MAX_TESSELLATION_CONTROL_PER_VERTEX_INPUT_COMPONENTS_OFFSET = 156;
	private static final int MAX_TESSELLATION_CONTROL_PER_VERTEX_OUTPUT_COMPONENTS_OFFSET = 160;
	private static final int MAX_TESSELLATION_CONTROL_PER_PATCH_OUTPUT_COMPONENTS_OFFSET = 164;
	private static final int MAX_TESSELLATION_CONTROL_TOTAL_OUTPUT_COMPONENTS_OFFSET = 168;
	private static final int MAX_TESSELLATION_EVALUATION_INPUT_COMPONENTS_OFFSET = 172;
	private static final int MAX_TESSELLATION_EVALUATION_OUTPUT_COMPONENTS_OFFSET = 176;
	private static final int MAX_GEOMETRY_SHADER_INVOCATIONS_OFFSET = 180;
	private static final int MAX_GEOMETRY_INPUT_COMPONENTS_OFFSET = 184;
	private static final int MAX_GEOMETRY_OUTPUT_COMPONENTS_OFFSET = 188;
	private static final int MAX_GEOMETRY_OUTPUT_VERTICES_OFFSET = 192;
	private static final int MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OFFSET = 196;
	private static final int MAX_FRAGMENT_INPUT_COMPONENTS_OFFSET = 200;
	private static final int MAX_FRAGMENT_OUTPUT_ATTACHMENTS_OFFSET = 204;
	private static final int MAX_FRAGMENT_DUAL_SRC_ATTACHMENTS_OFFSET = 208;
	private static final int MAX_FRAGMENT_COMBINED_OUTPUT_RESOURCES_OFFSET = 212;
	private static final int MAX_COMPUTE_SHARED_MEMORY_SIZE_OFFSET = 216;
	private static final int MAX_COMPUTE_WORK_GROUP_COUNT_OFFSET = 220;
	private static final int MAX_COMPUTE_WORK_GROUP_INVOCATIONS_OFFSET = 232;
	private static final int MAX_COMPUTE_WORK_GROUP_SIZE_OFFSET = 236;
	private static final int SUB_PIXEL_PRECISION_BITS_OFFSET = 248;
	private static final int SUB_TEXEL_PRECISION_BITS_OFFSET = 252;
	private static final int MIPMAP_PRECISION_BITS_OFFSET = 256;
	private static final int MAX_DRAW_INDEXED_INDEX_VALUE_OFFSET = 260;
	private static final int MAX_DRAW_INDIRECT_COUNT_OFFSET = 264;
	private static final int MAX_SAMPLER_LOD_BIAS_OFFSET = 268;
	private static final int MAX_SAMPLER_ANISOTROPY_OFFSET = 272;
	private static final int MAX_VIEWPORTS_OFFSET = 276;
	private static final int MAX_VIEWPORT_DIMENSIONS_OFFSET = 280;
	private static final int VIEWPORT_BOUNDS_RANGE_OFFSET = 288;
	private static final int VIEWPORT_SUB_PIXEL_BITS_OFFSET = 296;
	private static final int MIN_MEMORY_MAP_ALIGNMENT_OFFSET = 304;
	private static final int MIN_TEXEL_BUFFER_OFFSET_ALIGNMENT_OFFSET = 312;
	private static final int MIN_UNIFORM_BUFFER_OFFSET_ALIGNMENT_OFFSET = 320;
	private static final int MIN_STORAGE_BUFFER_OFFSET_ALIGNMENT_OFFSET = 328;
	private static final int MIN_TEXEL_OFFSET_OFFSET = 336;
	private static final int MAX_TEXEL_OFFSET_OFFSET = 340;
	private static final int MIN_TEXEL_GATHER_OFFSET_OFFSET = 344;
	private static final int MAX_TEXEL_GATHER_OFFSET_OFFSET = 348;
	private static final int MIN_INTERPOLATION_OFFSET_OFFSET = 352;
	private static final int MAX_INTERPOLATION_OFFSET_OFFSET = 356;
	private static final int SUB_PIXEL_INTERPOLATION_OFFSET_BITS_OFFSET = 360;
	private static final int MAX_FRAMEBUFFER_WIDTH_OFFSET = 364;
	private static final int MAX_FRAMEBUFFER_HEIGHT_OFFSET = 368;
	private static final int MAX_FRAMEBUFFER_LAYERS_OFFSET = 372;
	private static final int FRAMEBUFFER_COLOR_SAMPLE_COUNTS_OFFSET = 376;
	private static final int FRAMEBUFFER_DEPTH_SAMPLE_COUNTS_OFFSET = 380;
	private static final int FRAMEBUFFER_STENCIL_SAMPLE_COUNTS_OFFSET = 384;
	private static final int FRAMEBUFFER_NO_ATTACHMENTS_SAMPLE_COUNTS_OFFSET = 388;
	private static final int MAX_COLOR_ATTACHMENTS_OFFSET = 392;
	private static final int SAMPLED_IMAGE_COLOR_SAMPLE_COUNTS_OFFSET = 396;
	private static final int SAMPLED_IMAGE_INTEGER_SAMPLE_COUNTS_OFFSET = 400;
	private static final int SAMPLED_IMAGE_DEPTH_SAMPLE_COUNTS_OFFSET = 404;
	private static final int SAMPLED_IMAGE_STENCIL_SAMPLE_COUNTS_OFFSET = 408;
	private static final int STORAGE_IMAGE_SAMPLE_COUNTS_OFFSET = 412;
	private static final int MAX_SAMPLE_MASK_WORDS_OFFSET = 416;
	private static final int TIMESTAMP_COMPUTE_AND_GRAPHICS_OFFSET = 420;
	private static final int TIMESTAMP_PERIOD_OFFSET = 424;
	private static final int MAX_CLIP_DISTANCES_OFFSET = 428;
	private static final int MAX_CULL_DISTANCES_OFFSET = 432;
	private static final int MAX_COMBINED_CLIP_AND_CULL_DISTANCES_OFFSET = 436;
	private static final int DISCRETE_QUEUE_PRIORITIES_OFFSET = 440;
	private static final int POINT_SIZE_RANGE_OFFSET = 444;
	private static final int LINE_WIDTH_RANGE_OFFSET = 452;
	private static final int POINT_SIZE_GRANULARITY_OFFSET = 460;
	private static final int LINE_WIDTH_GRANULARITY_OFFSET = 464;
	private static final int STRICT_LINES_OFFSET = 468;
	private static final int STANDARD_SAMPLE_LOCATIONS_OFFSET = 472;
	private static final int OPTIMAL_BUFFER_COPY_OFFSET_ALIGNMENT_OFFSET = 480;
	private static final int OPTIMAL_BUFFER_COPY_ROW_PITCH_ALIGNMENT_OFFSET = 488;
	private static final int NON_COHERENT_ATOM_SIZE_OFFSET = 496;
	
	public VkPhysicalDeviceLimits() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceLimits(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceLimits(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int maxImageDimension1D() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_DIMENSION1_D_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxImageDimension1D(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_DIMENSION1_D_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImageDimension2D() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_DIMENSION2_D_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxImageDimension2D(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_DIMENSION2_D_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImageDimension3D() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_DIMENSION3_D_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxImageDimension3D(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_DIMENSION3_D_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImageDimensionCube() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_DIMENSION_CUBE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxImageDimensionCube(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_DIMENSION_CUBE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImageArrayLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_ARRAY_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxImageArrayLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_ARRAY_LAYERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTexelBufferElements() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TEXEL_BUFFER_ELEMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTexelBufferElements(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TEXEL_BUFFER_ELEMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxUniformBufferRange() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_UNIFORM_BUFFER_RANGE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxUniformBufferRange(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_UNIFORM_BUFFER_RANGE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxStorageBufferRange() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_STORAGE_BUFFER_RANGE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxStorageBufferRange(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_STORAGE_BUFFER_RANGE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPushConstantsSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PUSH_CONSTANTS_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPushConstantsSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PUSH_CONSTANTS_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxMemoryAllocationCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MEMORY_ALLOCATION_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxMemoryAllocationCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MEMORY_ALLOCATION_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxSamplerAllocationCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_SAMPLER_ALLOCATION_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxSamplerAllocationCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_SAMPLER_ALLOCATION_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long bufferImageGranularity() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + BUFFER_IMAGE_GRANULARITY_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits bufferImageGranularity(long value) {
		LONG_HANDLE.set(this.segment, this.offset + BUFFER_IMAGE_GRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long sparseAddressSpaceSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SPARSE_ADDRESS_SPACE_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits sparseAddressSpaceSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SPARSE_ADDRESS_SPACE_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxBoundDescriptorSets() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_BOUND_DESCRIPTOR_SETS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxBoundDescriptorSets(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_BOUND_DESCRIPTOR_SETS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerStageDescriptorSamplers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_SAMPLERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPerStageDescriptorSamplers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_SAMPLERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerStageDescriptorUniformBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_UNIFORM_BUFFERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPerStageDescriptorUniformBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_UNIFORM_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerStageDescriptorStorageBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_STORAGE_BUFFERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPerStageDescriptorStorageBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_STORAGE_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerStageDescriptorSampledImages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_SAMPLED_IMAGES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPerStageDescriptorSampledImages(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_SAMPLED_IMAGES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerStageDescriptorStorageImages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_STORAGE_IMAGES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPerStageDescriptorStorageImages(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_STORAGE_IMAGES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerStageDescriptorInputAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_INPUT_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPerStageDescriptorInputAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_STAGE_DESCRIPTOR_INPUT_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPerStageResources() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PER_STAGE_RESOURCES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxPerStageResources(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PER_STAGE_RESOURCES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetSamplers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_SAMPLERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetSamplers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_SAMPLERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetUniformBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_UNIFORM_BUFFERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetUniformBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_UNIFORM_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetUniformBuffersDynamic() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_UNIFORM_BUFFERS_DYNAMIC_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetUniformBuffersDynamic(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_UNIFORM_BUFFERS_DYNAMIC_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetStorageBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_STORAGE_BUFFERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetStorageBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_STORAGE_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetStorageBuffersDynamic() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_STORAGE_BUFFERS_DYNAMIC_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetStorageBuffersDynamic(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_STORAGE_BUFFERS_DYNAMIC_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetSampledImages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_SAMPLED_IMAGES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetSampledImages(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_SAMPLED_IMAGES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetStorageImages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_STORAGE_IMAGES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetStorageImages(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_STORAGE_IMAGES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDescriptorSetInputAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DESCRIPTOR_SET_INPUT_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDescriptorSetInputAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DESCRIPTOR_SET_INPUT_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxVertexInputAttributes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VERTEX_INPUT_ATTRIBUTES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxVertexInputAttributes(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VERTEX_INPUT_ATTRIBUTES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxVertexInputBindings() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VERTEX_INPUT_BINDINGS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxVertexInputBindings(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VERTEX_INPUT_BINDINGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxVertexInputAttributeOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VERTEX_INPUT_ATTRIBUTE_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxVertexInputAttributeOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VERTEX_INPUT_ATTRIBUTE_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxVertexInputBindingStride() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VERTEX_INPUT_BINDING_STRIDE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxVertexInputBindingStride(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VERTEX_INPUT_BINDING_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxVertexOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VERTEX_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxVertexOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VERTEX_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationGenerationLevel() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_GENERATION_LEVEL_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationGenerationLevel(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_GENERATION_LEVEL_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationPatchSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_PATCH_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationPatchSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_PATCH_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationControlPerVertexInputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_CONTROL_PER_VERTEX_INPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationControlPerVertexInputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_CONTROL_PER_VERTEX_INPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationControlPerVertexOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_CONTROL_PER_VERTEX_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationControlPerVertexOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_CONTROL_PER_VERTEX_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationControlPerPatchOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_CONTROL_PER_PATCH_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationControlPerPatchOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_CONTROL_PER_PATCH_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationControlTotalOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_CONTROL_TOTAL_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationControlTotalOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_CONTROL_TOTAL_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationEvaluationInputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_EVALUATION_INPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationEvaluationInputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_EVALUATION_INPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTessellationEvaluationOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TESSELLATION_EVALUATION_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTessellationEvaluationOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TESSELLATION_EVALUATION_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxGeometryShaderInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_GEOMETRY_SHADER_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxGeometryShaderInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_GEOMETRY_SHADER_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxGeometryInputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_GEOMETRY_INPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxGeometryInputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_GEOMETRY_INPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxGeometryOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_GEOMETRY_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxGeometryOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_GEOMETRY_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxGeometryOutputVertices() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_GEOMETRY_OUTPUT_VERTICES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxGeometryOutputVertices(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_GEOMETRY_OUTPUT_VERTICES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxGeometryTotalOutputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxGeometryTotalOutputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFragmentInputComponents() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_INPUT_COMPONENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxFragmentInputComponents(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_INPUT_COMPONENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFragmentOutputAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_OUTPUT_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxFragmentOutputAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_OUTPUT_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFragmentDualSrcAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_DUAL_SRC_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxFragmentDualSrcAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_DUAL_SRC_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFragmentCombinedOutputResources() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAGMENT_COMBINED_OUTPUT_RESOURCES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxFragmentCombinedOutputResources(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAGMENT_COMBINED_OUTPUT_RESOURCES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxComputeSharedMemorySize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COMPUTE_SHARED_MEMORY_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxComputeSharedMemorySize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COMPUTE_SHARED_MEMORY_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxComputeWorkGroupCount(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COMPUTE_WORK_GROUP_COUNT_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceLimits maxComputeWorkGroupCount(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COMPUTE_WORK_GROUP_COUNT_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxComputeWorkGroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COMPUTE_WORK_GROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxComputeWorkGroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COMPUTE_WORK_GROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[3]")
	public int maxComputeWorkGroupSize(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COMPUTE_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[3]")
	public VkPhysicalDeviceLimits maxComputeWorkGroupSize(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COMPUTE_WORK_GROUP_SIZE_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int subPixelPrecisionBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUB_PIXEL_PRECISION_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits subPixelPrecisionBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUB_PIXEL_PRECISION_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int subTexelPrecisionBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUB_TEXEL_PRECISION_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits subTexelPrecisionBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUB_TEXEL_PRECISION_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int mipmapPrecisionBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIPMAP_PRECISION_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits mipmapPrecisionBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIPMAP_PRECISION_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDrawIndexedIndexValue() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DRAW_INDEXED_INDEX_VALUE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDrawIndexedIndexValue(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DRAW_INDEXED_INDEX_VALUE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxDrawIndirectCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_DRAW_INDIRECT_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxDrawIndirectCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_DRAW_INDIRECT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float maxSamplerLodBias() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_SAMPLER_LOD_BIAS_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceLimits maxSamplerLodBias(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_SAMPLER_LOD_BIAS_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float maxSamplerAnisotropy() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_SAMPLER_ANISOTROPY_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceLimits maxSamplerAnisotropy(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_SAMPLER_ANISOTROPY_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxViewports() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VIEWPORTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxViewports(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VIEWPORTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t[2]")
	public int maxViewportDimensions(int i) {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VIEWPORT_DIMENSIONS_OFFSET + JAVA_INT.byteSize() * i);
	}
	
	@NativeType("uint32_t[2]")
	public VkPhysicalDeviceLimits maxViewportDimensions(int i, int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VIEWPORT_DIMENSIONS_OFFSET + JAVA_INT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("float[2]")
	public float viewportBoundsRange(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + VIEWPORT_BOUNDS_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[2]")
	public VkPhysicalDeviceLimits viewportBoundsRange(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + VIEWPORT_BOUNDS_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int viewportSubPixelBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VIEWPORT_SUB_PIXEL_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits viewportSubPixelBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + VIEWPORT_SUB_PIXEL_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("size_t")
	public long minMemoryMapAlignment() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MIN_MEMORY_MAP_ALIGNMENT_OFFSET);
	}
	
	@NativeType("size_t")
	public VkPhysicalDeviceLimits minMemoryMapAlignment(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MIN_MEMORY_MAP_ALIGNMENT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long minTexelBufferOffsetAlignment() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MIN_TEXEL_BUFFER_OFFSET_ALIGNMENT_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits minTexelBufferOffsetAlignment(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MIN_TEXEL_BUFFER_OFFSET_ALIGNMENT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long minUniformBufferOffsetAlignment() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MIN_UNIFORM_BUFFER_OFFSET_ALIGNMENT_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits minUniformBufferOffsetAlignment(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MIN_UNIFORM_BUFFER_OFFSET_ALIGNMENT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long minStorageBufferOffsetAlignment() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MIN_STORAGE_BUFFER_OFFSET_ALIGNMENT_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits minStorageBufferOffsetAlignment(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MIN_STORAGE_BUFFER_OFFSET_ALIGNMENT_OFFSET, value);
		return this;
	}
	
	@NativeType("int32_t")
	public int minTexelOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIN_TEXEL_OFFSET_OFFSET);
	}
	
	@NativeType("int32_t")
	public VkPhysicalDeviceLimits minTexelOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIN_TEXEL_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTexelOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TEXEL_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTexelOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TEXEL_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("int32_t")
	public int minTexelGatherOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIN_TEXEL_GATHER_OFFSET_OFFSET);
	}
	
	@NativeType("int32_t")
	public VkPhysicalDeviceLimits minTexelGatherOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIN_TEXEL_GATHER_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTexelGatherOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TEXEL_GATHER_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxTexelGatherOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TEXEL_GATHER_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float minInterpolationOffset() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MIN_INTERPOLATION_OFFSET_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceLimits minInterpolationOffset(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MIN_INTERPOLATION_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float maxInterpolationOffset() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_INTERPOLATION_OFFSET_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceLimits maxInterpolationOffset(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_INTERPOLATION_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int subPixelInterpolationOffsetBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUB_PIXEL_INTERPOLATION_OFFSET_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits subPixelInterpolationOffsetBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUB_PIXEL_INTERPOLATION_OFFSET_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFramebufferWidth() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAMEBUFFER_WIDTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxFramebufferWidth(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAMEBUFFER_WIDTH_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFramebufferHeight() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAMEBUFFER_HEIGHT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxFramebufferHeight(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAMEBUFFER_HEIGHT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxFramebufferLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_FRAMEBUFFER_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxFramebufferLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_FRAMEBUFFER_LAYERS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int framebufferColorSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAMEBUFFER_COLOR_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits framebufferColorSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + FRAMEBUFFER_COLOR_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int framebufferDepthSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAMEBUFFER_DEPTH_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits framebufferDepthSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + FRAMEBUFFER_DEPTH_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int framebufferStencilSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAMEBUFFER_STENCIL_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits framebufferStencilSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + FRAMEBUFFER_STENCIL_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int framebufferNoAttachmentsSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAMEBUFFER_NO_ATTACHMENTS_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits framebufferNoAttachmentsSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + FRAMEBUFFER_NO_ATTACHMENTS_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxColorAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COLOR_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxColorAttachments(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COLOR_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int sampledImageColorSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLED_IMAGE_COLOR_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits sampledImageColorSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLED_IMAGE_COLOR_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int sampledImageIntegerSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLED_IMAGE_INTEGER_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits sampledImageIntegerSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLED_IMAGE_INTEGER_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int sampledImageDepthSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLED_IMAGE_DEPTH_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits sampledImageDepthSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLED_IMAGE_DEPTH_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int sampledImageStencilSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLED_IMAGE_STENCIL_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits sampledImageStencilSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLED_IMAGE_STENCIL_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int storageImageSampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORAGE_IMAGE_SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkPhysicalDeviceLimits storageImageSampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + STORAGE_IMAGE_SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxSampleMaskWords() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_SAMPLE_MASK_WORDS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxSampleMaskWords(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_SAMPLE_MASK_WORDS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int timestampComputeAndGraphics() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TIMESTAMP_COMPUTE_AND_GRAPHICS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceLimits timestampComputeAndGraphics(int value) {
		INT_HANDLE.set(this.segment, this.offset + TIMESTAMP_COMPUTE_AND_GRAPHICS_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float timestampPeriod() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + TIMESTAMP_PERIOD_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceLimits timestampPeriod(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + TIMESTAMP_PERIOD_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxClipDistances() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_CLIP_DISTANCES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxClipDistances(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_CLIP_DISTANCES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxCullDistances() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_CULL_DISTANCES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxCullDistances(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_CULL_DISTANCES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxCombinedClipAndCullDistances() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COMBINED_CLIP_AND_CULL_DISTANCES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits maxCombinedClipAndCullDistances(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COMBINED_CLIP_AND_CULL_DISTANCES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int discreteQueuePriorities() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DISCRETE_QUEUE_PRIORITIES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceLimits discreteQueuePriorities(int value) {
		INT_HANDLE.set(this.segment, this.offset + DISCRETE_QUEUE_PRIORITIES_OFFSET, value);
		return this;
	}
	
	@NativeType("float[2]")
	public float pointSizeRange(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + POINT_SIZE_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[2]")
	public VkPhysicalDeviceLimits pointSizeRange(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + POINT_SIZE_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("float[2]")
	public float lineWidthRange(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + LINE_WIDTH_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[2]")
	public VkPhysicalDeviceLimits lineWidthRange(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + LINE_WIDTH_RANGE_OFFSET + JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("float")
	public float pointSizeGranularity() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + POINT_SIZE_GRANULARITY_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceLimits pointSizeGranularity(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + POINT_SIZE_GRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float lineWidthGranularity() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + LINE_WIDTH_GRANULARITY_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceLimits lineWidthGranularity(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + LINE_WIDTH_GRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int strictLines() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STRICT_LINES_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceLimits strictLines(int value) {
		INT_HANDLE.set(this.segment, this.offset + STRICT_LINES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int standardSampleLocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STANDARD_SAMPLE_LOCATIONS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceLimits standardSampleLocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + STANDARD_SAMPLE_LOCATIONS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long optimalBufferCopyOffsetAlignment() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OPTIMAL_BUFFER_COPY_OFFSET_ALIGNMENT_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits optimalBufferCopyOffsetAlignment(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OPTIMAL_BUFFER_COPY_OFFSET_ALIGNMENT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long optimalBufferCopyRowPitchAlignment() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OPTIMAL_BUFFER_COPY_ROW_PITCH_ALIGNMENT_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits optimalBufferCopyRowPitchAlignment(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OPTIMAL_BUFFER_COPY_ROW_PITCH_ALIGNMENT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long nonCoherentAtomSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + NON_COHERENT_ATOM_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceLimits nonCoherentAtomSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + NON_COHERENT_ATOM_SIZE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceLimits> {
		
		private static final StructConstructor<VkPhysicalDeviceLimits> CONSTRUCTOR = VkPhysicalDeviceLimits::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceLimits[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceLimits[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceLimits[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}