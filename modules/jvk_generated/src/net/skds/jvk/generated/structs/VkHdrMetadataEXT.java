package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkHdrMetadataEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkXYColorEXT displayPrimaryRed;
* 	VkXYColorEXT displayPrimaryGreen;
* 	VkXYColorEXT displayPrimaryBlue;
* 	VkXYColorEXT whitePoint;
* 	float maxLuminance;
* 	float minLuminance;
* 	float maxContentLightLevel;
* 	float maxFrameAverageLightLevel;
* };
*</pre>
**/
@AutoGenerated
public final class VkHdrMetadataEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			VkXYColorEXT.MEMORY_LAYOUT,
			VkXYColorEXT.MEMORY_LAYOUT,
			VkXYColorEXT.MEMORY_LAYOUT,
			VkXYColorEXT.MEMORY_LAYOUT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_FLOAT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int DISPLAY_PRIMARY_RED_OFFSET = 16;
	private static final int DISPLAY_PRIMARY_GREEN_OFFSET = 24;
	private static final int DISPLAY_PRIMARY_BLUE_OFFSET = 32;
	private static final int WHITE_POINT_OFFSET = 40;
	private static final int MAX_LUMINANCE_OFFSET = 48;
	private static final int MIN_LUMINANCE_OFFSET = 52;
	private static final int MAX_CONTENT_LIGHT_LEVEL_OFFSET = 56;
	private static final int MAX_FRAME_AVERAGE_LIGHT_LEVEL_OFFSET = 60;
	
	public VkHdrMetadataEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkHdrMetadataEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkHdrMetadataEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_HDR_METADATA_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_HDR_METADATA_EXT **/
	@NativeType("VkStructureType")
	public VkHdrMetadataEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_HDR_METADATA_EXT **/
	@NativeType("VkStructureType")
	public VkHdrMetadataEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000105000);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkHdrMetadataEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkXYColorEXT")
	public VkXYColorEXT displayPrimaryRed() {
		return new VkXYColorEXT(this.segment, this.offset + DISPLAY_PRIMARY_RED_OFFSET);
	}
	
	@NativeType("VkXYColorEXT")
	public VkXYColorEXT displayPrimaryGreen() {
		return new VkXYColorEXT(this.segment, this.offset + DISPLAY_PRIMARY_GREEN_OFFSET);
	}
	
	@NativeType("VkXYColorEXT")
	public VkXYColorEXT displayPrimaryBlue() {
		return new VkXYColorEXT(this.segment, this.offset + DISPLAY_PRIMARY_BLUE_OFFSET);
	}
	
	@NativeType("VkXYColorEXT")
	public VkXYColorEXT whitePoint() {
		return new VkXYColorEXT(this.segment, this.offset + WHITE_POINT_OFFSET);
	}
	
	@NativeType("float")
	public float maxLuminance() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_LUMINANCE_OFFSET);
	}
	
	@NativeType("float")
	public VkHdrMetadataEXT maxLuminance(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_LUMINANCE_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float minLuminance() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MIN_LUMINANCE_OFFSET);
	}
	
	@NativeType("float")
	public VkHdrMetadataEXT minLuminance(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MIN_LUMINANCE_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float maxContentLightLevel() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_CONTENT_LIGHT_LEVEL_OFFSET);
	}
	
	@NativeType("float")
	public VkHdrMetadataEXT maxContentLightLevel(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_CONTENT_LIGHT_LEVEL_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float maxFrameAverageLightLevel() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_FRAME_AVERAGE_LIGHT_LEVEL_OFFSET);
	}
	
	@NativeType("float")
	public VkHdrMetadataEXT maxFrameAverageLightLevel(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_FRAME_AVERAGE_LIGHT_LEVEL_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkHdrMetadataEXT> {
		
		private static final StructConstructor<VkHdrMetadataEXT> CONSTRUCTOR = VkHdrMetadataEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkHdrMetadataEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkHdrMetadataEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkHdrMetadataEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}