package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t maxTransformFeedbackStreams;
* 	uint32_t maxTransformFeedbackBuffers;
* 	VkDeviceSize maxTransformFeedbackBufferSize;
* 	uint32_t maxTransformFeedbackStreamDataSize;
* 	uint32_t maxTransformFeedbackBufferDataSize;
* 	uint32_t maxTransformFeedbackBufferDataStride;
* 	VkBool32 transformFeedbackQueries;
* 	VkBool32 transformFeedbackStreamsLinesTriangles;
* 	VkBool32 transformFeedbackRasterizationStreamSelect;
* 	VkBool32 transformFeedbackDraw;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceTransformFeedbackPropertiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MAX_TRANSFORM_FEEDBACK_STREAMS_OFFSET = 16;
	private static final int MAX_TRANSFORM_FEEDBACK_BUFFERS_OFFSET = 20;
	private static final int MAX_TRANSFORM_FEEDBACK_BUFFER_SIZE_OFFSET = 24;
	private static final int MAX_TRANSFORM_FEEDBACK_STREAM_DATA_SIZE_OFFSET = 32;
	private static final int MAX_TRANSFORM_FEEDBACK_BUFFER_DATA_SIZE_OFFSET = 36;
	private static final int MAX_TRANSFORM_FEEDBACK_BUFFER_DATA_STRIDE_OFFSET = 40;
	private static final int TRANSFORM_FEEDBACK_QUERIES_OFFSET = 44;
	private static final int TRANSFORM_FEEDBACK_STREAMS_LINES_TRIANGLES_OFFSET = 48;
	private static final int TRANSFORM_FEEDBACK_RASTERIZATION_STREAM_SELECT_OFFSET = 52;
	private static final int TRANSFORM_FEEDBACK_DRAW_OFFSET = 56;
	
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000028001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTransformFeedbackStreams() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_STREAMS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT maxTransformFeedbackStreams(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_STREAMS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTransformFeedbackBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT maxTransformFeedbackBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long maxTransformFeedbackBufferSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFER_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT maxTransformFeedbackBufferSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFER_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTransformFeedbackStreamDataSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_STREAM_DATA_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT maxTransformFeedbackStreamDataSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_STREAM_DATA_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTransformFeedbackBufferDataSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFER_DATA_SIZE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT maxTransformFeedbackBufferDataSize(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFER_DATA_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxTransformFeedbackBufferDataStride() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFER_DATA_STRIDE_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT maxTransformFeedbackBufferDataStride(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_TRANSFORM_FEEDBACK_BUFFER_DATA_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean transformFeedbackQueries() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TRANSFORM_FEEDBACK_QUERIES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT transformFeedbackQueries(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + TRANSFORM_FEEDBACK_QUERIES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean transformFeedbackStreamsLinesTriangles() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TRANSFORM_FEEDBACK_STREAMS_LINES_TRIANGLES_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT transformFeedbackStreamsLinesTriangles(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + TRANSFORM_FEEDBACK_STREAMS_LINES_TRIANGLES_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean transformFeedbackRasterizationStreamSelect() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TRANSFORM_FEEDBACK_RASTERIZATION_STREAM_SELECT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT transformFeedbackRasterizationStreamSelect(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + TRANSFORM_FEEDBACK_RASTERIZATION_STREAM_SELECT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean transformFeedbackDraw() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TRANSFORM_FEEDBACK_DRAW_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT transformFeedbackDraw(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + TRANSFORM_FEEDBACK_DRAW_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceTransformFeedbackPropertiesEXT> {
		
		private static final StructConstructor<VkPhysicalDeviceTransformFeedbackPropertiesEXT> CONSTRUCTOR = VkPhysicalDeviceTransformFeedbackPropertiesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceTransformFeedbackPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceTransformFeedbackPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceTransformFeedbackPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}