package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPartitionedAccelerationStructureWritePartitionTranslationDataNV {
* 	uint32_t partitionIndex;
* 	float[3] partitionTranslation;
* };
*</pre>
**/
@AutoGenerated
public final class VkPartitionedAccelerationStructureWritePartitionTranslationDataNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			sequenceLayout(3, JAVA_FLOAT)
	);
	private static final int PARTITION_INDEX_OFFSET = 0;
	private static final int PARTITION_TRANSLATION_OFFSET = 4;
	
	public VkPartitionedAccelerationStructureWritePartitionTranslationDataNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPartitionedAccelerationStructureWritePartitionTranslationDataNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPartitionedAccelerationStructureWritePartitionTranslationDataNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int partitionIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PARTITION_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPartitionedAccelerationStructureWritePartitionTranslationDataNV partitionIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + PARTITION_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("float[3]")
	public float partitionTranslation(int i) {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + PARTITION_TRANSLATION_OFFSET + JAVA_FLOAT.byteSize() * i);
	}
	
	@NativeType("float[3]")
	public float[] partitionTranslationArray() {
		var array = new float[3];
		MemorySegment.copy(this.segment, FLOAT, this.offset + PARTITION_TRANSLATION_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("float[3]")
	public VkPartitionedAccelerationStructureWritePartitionTranslationDataNV partitionTranslation(int i, float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + PARTITION_TRANSLATION_OFFSET + JAVA_FLOAT.byteSize() * i, value);
		return this;
	}
	
	@NativeType("float[3]")
	public VkPartitionedAccelerationStructureWritePartitionTranslationDataNV partitionTranslation(float[] value) {
		MemorySegment.copy(value, 0, this.segment, FLOAT, this.offset + PARTITION_TRANSLATION_OFFSET, value.length);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPartitionedAccelerationStructureWritePartitionTranslationDataNV> {
		
		private static final StructConstructor<VkPartitionedAccelerationStructureWritePartitionTranslationDataNV> CONSTRUCTOR = VkPartitionedAccelerationStructureWritePartitionTranslationDataNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPartitionedAccelerationStructureWritePartitionTranslationDataNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPartitionedAccelerationStructureWritePartitionTranslationDataNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPartitionedAccelerationStructureWritePartitionTranslationDataNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}