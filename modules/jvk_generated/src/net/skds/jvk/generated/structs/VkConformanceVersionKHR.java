package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkConformanceVersion {
* 	uint8_t major;
* 	uint8_t minor;
* 	uint8_t subminor;
* 	uint8_t patch;
* };
*</pre>
**/
@AutoGenerated
public final class VkConformanceVersionKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE
	);
	private static final int MAJOR_OFFSET = 0;
	private static final int MINOR_OFFSET = 1;
	private static final int SUBMINOR_OFFSET = 2;
	private static final int PATCH_OFFSET = 3;
	
	public VkConformanceVersionKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkConformanceVersionKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkConformanceVersionKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint8_t")
	public byte major() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAJOR_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkConformanceVersionKHR major(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAJOR_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte minor() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MINOR_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkConformanceVersionKHR minor(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MINOR_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte subminor() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + SUBMINOR_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkConformanceVersionKHR subminor(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + SUBMINOR_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte patch() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + PATCH_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkConformanceVersionKHR patch(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + PATCH_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkConformanceVersionKHR> {
		
		private static final StructConstructor<VkConformanceVersionKHR> CONSTRUCTOR = VkConformanceVersionKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkConformanceVersionKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkConformanceVersionKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkConformanceVersionKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}