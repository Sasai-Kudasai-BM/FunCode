package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkCooperativeMatrixFlexibleDimensionsPropertiesNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t MGranularity;
* 	uint32_t NGranularity;
* 	uint32_t KGranularity;
* 	VkComponentTypeKHR AType;
* 	VkComponentTypeKHR BType;
* 	VkComponentTypeKHR CType;
* 	VkComponentTypeKHR ResultType;
* 	VkBool32 saturatingAccumulation;
* 	VkScopeKHR scope;
* 	uint32_t workgroupInvocations;
* };
*</pre>
**/
@AutoGenerated
public final class VkCooperativeMatrixFlexibleDimensionsPropertiesNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MGRANULARITY_OFFSET = 16;
	private static final int NGRANULARITY_OFFSET = 20;
	private static final int KGRANULARITY_OFFSET = 24;
	private static final int ATYPE_OFFSET = 28;
	private static final int BTYPE_OFFSET = 32;
	private static final int CTYPE_OFFSET = 36;
	private static final int RESULT_TYPE_OFFSET = 40;
	private static final int SATURATING_ACCUMULATION_OFFSET = 44;
	private static final int SCOPE_OFFSET = 48;
	private static final int WORKGROUP_INVOCATIONS_OFFSET = 52;
	
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV **/
	@NativeType("VkStructureType")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000593001);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int MGranularity() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MGRANULARITY_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV MGranularity(int value) {
		INT_HANDLE.set(this.segment, this.offset + MGRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int NGranularity() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NGRANULARITY_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV NGranularity(int value) {
		INT_HANDLE.set(this.segment, this.offset + NGRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int KGranularity() {
		return (int) INT_HANDLE.get(this.segment, this.offset + KGRANULARITY_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV KGranularity(int value) {
		INT_HANDLE.set(this.segment, this.offset + KGRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeKHR")
	public int AType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ATYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeKHR")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV AType(int value) {
		INT_HANDLE.set(this.segment, this.offset + ATYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeKHR")
	public int BType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BTYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeKHR")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV BType(int value) {
		INT_HANDLE.set(this.segment, this.offset + BTYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeKHR")
	public int CType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CTYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeKHR")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV CType(int value) {
		INT_HANDLE.set(this.segment, this.offset + CTYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkComponentTypeKHR")
	public int ResultType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESULT_TYPE_OFFSET);
	}
	
	@NativeType("VkComponentTypeKHR")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV ResultType(int value) {
		INT_HANDLE.set(this.segment, this.offset + RESULT_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean saturatingAccumulation() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SATURATING_ACCUMULATION_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV saturatingAccumulation(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SATURATING_ACCUMULATION_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkScopeKHR")
	public int scope() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SCOPE_OFFSET);
	}
	
	@NativeType("VkScopeKHR")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV scope(int value) {
		INT_HANDLE.set(this.segment, this.offset + SCOPE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int workgroupInvocations() {
		return (int) INT_HANDLE.get(this.segment, this.offset + WORKGROUP_INVOCATIONS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV workgroupInvocations(int value) {
		INT_HANDLE.set(this.segment, this.offset + WORKGROUP_INVOCATIONS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkCooperativeMatrixFlexibleDimensionsPropertiesNV> {
		
		private static final StructConstructor<VkCooperativeMatrixFlexibleDimensionsPropertiesNV> CONSTRUCTOR = VkCooperativeMatrixFlexibleDimensionsPropertiesNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkCooperativeMatrixFlexibleDimensionsPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkCooperativeMatrixFlexibleDimensionsPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkCooperativeMatrixFlexibleDimensionsPropertiesNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}