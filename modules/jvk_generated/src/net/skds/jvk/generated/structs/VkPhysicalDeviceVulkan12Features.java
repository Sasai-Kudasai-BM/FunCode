package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceVulkan12Features {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkBool32 samplerMirrorClampToEdge;
* 	VkBool32 drawIndirectCount;
* 	VkBool32 storageBuffer8BitAccess;
* 	VkBool32 uniformAndStorageBuffer8BitAccess;
* 	VkBool32 storagePushConstant8;
* 	VkBool32 shaderBufferInt64Atomics;
* 	VkBool32 shaderSharedInt64Atomics;
* 	VkBool32 shaderFloat16;
* 	VkBool32 shaderInt8;
* 	VkBool32 descriptorIndexing;
* 	VkBool32 shaderInputAttachmentArrayDynamicIndexing;
* 	VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
* 	VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
* 	VkBool32 shaderUniformBufferArrayNonUniformIndexing;
* 	VkBool32 shaderSampledImageArrayNonUniformIndexing;
* 	VkBool32 shaderStorageBufferArrayNonUniformIndexing;
* 	VkBool32 shaderStorageImageArrayNonUniformIndexing;
* 	VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
* 	VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
* 	VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
* 	VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
* 	VkBool32 descriptorBindingSampledImageUpdateAfterBind;
* 	VkBool32 descriptorBindingStorageImageUpdateAfterBind;
* 	VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
* 	VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
* 	VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
* 	VkBool32 descriptorBindingUpdateUnusedWhilePending;
* 	VkBool32 descriptorBindingPartiallyBound;
* 	VkBool32 descriptorBindingVariableDescriptorCount;
* 	VkBool32 runtimeDescriptorArray;
* 	VkBool32 samplerFilterMinmax;
* 	VkBool32 scalarBlockLayout;
* 	VkBool32 imagelessFramebuffer;
* 	VkBool32 uniformBufferStandardLayout;
* 	VkBool32 shaderSubgroupExtendedTypes;
* 	VkBool32 separateDepthStencilLayouts;
* 	VkBool32 hostQueryReset;
* 	VkBool32 timelineSemaphore;
* 	VkBool32 bufferDeviceAddress;
* 	VkBool32 bufferDeviceAddressCaptureReplay;
* 	VkBool32 bufferDeviceAddressMultiDevice;
* 	VkBool32 vulkanMemoryModel;
* 	VkBool32 vulkanMemoryModelDeviceScope;
* 	VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
* 	VkBool32 shaderOutputViewportIndex;
* 	VkBool32 shaderOutputLayer;
* 	VkBool32 subgroupBroadcastDynamicId;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceVulkan12Features extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int SAMPLER_MIRROR_CLAMP_TO_EDGE_OFFSET = 16;
	private static final int DRAW_INDIRECT_COUNT_OFFSET = 20;
	private static final int STORAGE_BUFFER8_BIT_ACCESS_OFFSET = 24;
	private static final int UNIFORM_AND_STORAGE_BUFFER8_BIT_ACCESS_OFFSET = 28;
	private static final int STORAGE_PUSH_CONSTANT8_OFFSET = 32;
	private static final int SHADER_BUFFER_INT64_ATOMICS_OFFSET = 36;
	private static final int SHADER_SHARED_INT64_ATOMICS_OFFSET = 40;
	private static final int SHADER_FLOAT16_OFFSET = 44;
	private static final int SHADER_INT8_OFFSET = 48;
	private static final int DESCRIPTOR_INDEXING_OFFSET = 52;
	private static final int SHADER_INPUT_ATTACHMENT_ARRAY_DYNAMIC_INDEXING_OFFSET = 56;
	private static final int SHADER_UNIFORM_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_OFFSET = 60;
	private static final int SHADER_STORAGE_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_OFFSET = 64;
	private static final int SHADER_UNIFORM_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET = 68;
	private static final int SHADER_SAMPLED_IMAGE_ARRAY_NON_UNIFORM_INDEXING_OFFSET = 72;
	private static final int SHADER_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET = 76;
	private static final int SHADER_STORAGE_IMAGE_ARRAY_NON_UNIFORM_INDEXING_OFFSET = 80;
	private static final int SHADER_INPUT_ATTACHMENT_ARRAY_NON_UNIFORM_INDEXING_OFFSET = 84;
	private static final int SHADER_UNIFORM_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET = 88;
	private static final int SHADER_STORAGE_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET = 92;
	private static final int DESCRIPTOR_BINDING_UNIFORM_BUFFER_UPDATE_AFTER_BIND_OFFSET = 96;
	private static final int DESCRIPTOR_BINDING_SAMPLED_IMAGE_UPDATE_AFTER_BIND_OFFSET = 100;
	private static final int DESCRIPTOR_BINDING_STORAGE_IMAGE_UPDATE_AFTER_BIND_OFFSET = 104;
	private static final int DESCRIPTOR_BINDING_STORAGE_BUFFER_UPDATE_AFTER_BIND_OFFSET = 108;
	private static final int DESCRIPTOR_BINDING_UNIFORM_TEXEL_BUFFER_UPDATE_AFTER_BIND_OFFSET = 112;
	private static final int DESCRIPTOR_BINDING_STORAGE_TEXEL_BUFFER_UPDATE_AFTER_BIND_OFFSET = 116;
	private static final int DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_OFFSET = 120;
	private static final int DESCRIPTOR_BINDING_PARTIALLY_BOUND_OFFSET = 124;
	private static final int DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_OFFSET = 128;
	private static final int RUNTIME_DESCRIPTOR_ARRAY_OFFSET = 132;
	private static final int SAMPLER_FILTER_MINMAX_OFFSET = 136;
	private static final int SCALAR_BLOCK_LAYOUT_OFFSET = 140;
	private static final int IMAGELESS_FRAMEBUFFER_OFFSET = 144;
	private static final int UNIFORM_BUFFER_STANDARD_LAYOUT_OFFSET = 148;
	private static final int SHADER_SUBGROUP_EXTENDED_TYPES_OFFSET = 152;
	private static final int SEPARATE_DEPTH_STENCIL_LAYOUTS_OFFSET = 156;
	private static final int HOST_QUERY_RESET_OFFSET = 160;
	private static final int TIMELINE_SEMAPHORE_OFFSET = 164;
	private static final int BUFFER_DEVICE_ADDRESS_OFFSET = 168;
	private static final int BUFFER_DEVICE_ADDRESS_CAPTURE_REPLAY_OFFSET = 172;
	private static final int BUFFER_DEVICE_ADDRESS_MULTI_DEVICE_OFFSET = 176;
	private static final int VULKAN_MEMORY_MODEL_OFFSET = 180;
	private static final int VULKAN_MEMORY_MODEL_DEVICE_SCOPE_OFFSET = 184;
	private static final int VULKAN_MEMORY_MODEL_AVAILABILITY_VISIBILITY_CHAINS_OFFSET = 188;
	private static final int SHADER_OUTPUT_VIEWPORT_INDEX_OFFSET = 192;
	private static final int SHADER_OUTPUT_LAYER_OFFSET = 196;
	private static final int SUBGROUP_BROADCAST_DYNAMIC_ID_OFFSET = 200;
	
	public VkPhysicalDeviceVulkan12Features() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan12Features(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan12Features(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan12Features sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan12Features sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 51);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceVulkan12Features pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int samplerMirrorClampToEdge() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLER_MIRROR_CLAMP_TO_EDGE_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features samplerMirrorClampToEdge(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLER_MIRROR_CLAMP_TO_EDGE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int drawIndirectCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DRAW_INDIRECT_COUNT_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features drawIndirectCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DRAW_INDIRECT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int storageBuffer8BitAccess() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORAGE_BUFFER8_BIT_ACCESS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features storageBuffer8BitAccess(int value) {
		INT_HANDLE.set(this.segment, this.offset + STORAGE_BUFFER8_BIT_ACCESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int uniformAndStorageBuffer8BitAccess() {
		return (int) INT_HANDLE.get(this.segment, this.offset + UNIFORM_AND_STORAGE_BUFFER8_BIT_ACCESS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features uniformAndStorageBuffer8BitAccess(int value) {
		INT_HANDLE.set(this.segment, this.offset + UNIFORM_AND_STORAGE_BUFFER8_BIT_ACCESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int storagePushConstant8() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORAGE_PUSH_CONSTANT8_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features storagePushConstant8(int value) {
		INT_HANDLE.set(this.segment, this.offset + STORAGE_PUSH_CONSTANT8_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderBufferInt64Atomics() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_BUFFER_INT64_ATOMICS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderBufferInt64Atomics(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_BUFFER_INT64_ATOMICS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderSharedInt64Atomics() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SHARED_INT64_ATOMICS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderSharedInt64Atomics(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SHARED_INT64_ATOMICS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderFloat16() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_FLOAT16_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderFloat16(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_FLOAT16_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderInt8() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_INT8_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderInt8(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_INT8_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderInputAttachmentArrayDynamicIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_INPUT_ATTACHMENT_ARRAY_DYNAMIC_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderInputAttachmentArrayDynamicIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_INPUT_ATTACHMENT_ARRAY_DYNAMIC_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderUniformTexelBufferArrayDynamicIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_UNIFORM_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderUniformTexelBufferArrayDynamicIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_UNIFORM_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderStorageTexelBufferArrayDynamicIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_STORAGE_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderStorageTexelBufferArrayDynamicIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_STORAGE_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderUniformBufferArrayNonUniformIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_UNIFORM_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderUniformBufferArrayNonUniformIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_UNIFORM_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderSampledImageArrayNonUniformIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SAMPLED_IMAGE_ARRAY_NON_UNIFORM_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderSampledImageArrayNonUniformIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SAMPLED_IMAGE_ARRAY_NON_UNIFORM_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderStorageBufferArrayNonUniformIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderStorageBufferArrayNonUniformIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderStorageImageArrayNonUniformIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_STORAGE_IMAGE_ARRAY_NON_UNIFORM_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderStorageImageArrayNonUniformIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_STORAGE_IMAGE_ARRAY_NON_UNIFORM_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderInputAttachmentArrayNonUniformIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_INPUT_ATTACHMENT_ARRAY_NON_UNIFORM_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderInputAttachmentArrayNonUniformIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_INPUT_ATTACHMENT_ARRAY_NON_UNIFORM_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderUniformTexelBufferArrayNonUniformIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_UNIFORM_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderUniformTexelBufferArrayNonUniformIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_UNIFORM_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderStorageTexelBufferArrayNonUniformIndexing() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_STORAGE_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderStorageTexelBufferArrayNonUniformIndexing(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_STORAGE_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingUniformBufferUpdateAfterBind() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_UNIFORM_BUFFER_UPDATE_AFTER_BIND_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingUniformBufferUpdateAfterBind(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_UNIFORM_BUFFER_UPDATE_AFTER_BIND_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingSampledImageUpdateAfterBind() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_SAMPLED_IMAGE_UPDATE_AFTER_BIND_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingSampledImageUpdateAfterBind(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_SAMPLED_IMAGE_UPDATE_AFTER_BIND_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingStorageImageUpdateAfterBind() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_STORAGE_IMAGE_UPDATE_AFTER_BIND_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingStorageImageUpdateAfterBind(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_STORAGE_IMAGE_UPDATE_AFTER_BIND_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingStorageBufferUpdateAfterBind() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_STORAGE_BUFFER_UPDATE_AFTER_BIND_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingStorageBufferUpdateAfterBind(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_STORAGE_BUFFER_UPDATE_AFTER_BIND_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingUniformTexelBufferUpdateAfterBind() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_UNIFORM_TEXEL_BUFFER_UPDATE_AFTER_BIND_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingUniformTexelBufferUpdateAfterBind(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_UNIFORM_TEXEL_BUFFER_UPDATE_AFTER_BIND_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingStorageTexelBufferUpdateAfterBind() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_STORAGE_TEXEL_BUFFER_UPDATE_AFTER_BIND_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingStorageTexelBufferUpdateAfterBind(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_STORAGE_TEXEL_BUFFER_UPDATE_AFTER_BIND_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingUpdateUnusedWhilePending() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingUpdateUnusedWhilePending(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingPartiallyBound() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_PARTIALLY_BOUND_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingPartiallyBound(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_PARTIALLY_BOUND_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int descriptorBindingVariableDescriptorCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features descriptorBindingVariableDescriptorCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int runtimeDescriptorArray() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RUNTIME_DESCRIPTOR_ARRAY_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features runtimeDescriptorArray(int value) {
		INT_HANDLE.set(this.segment, this.offset + RUNTIME_DESCRIPTOR_ARRAY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int samplerFilterMinmax() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLER_FILTER_MINMAX_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features samplerFilterMinmax(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLER_FILTER_MINMAX_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int scalarBlockLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SCALAR_BLOCK_LAYOUT_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features scalarBlockLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + SCALAR_BLOCK_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int imagelessFramebuffer() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGELESS_FRAMEBUFFER_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features imagelessFramebuffer(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGELESS_FRAMEBUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int uniformBufferStandardLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + UNIFORM_BUFFER_STANDARD_LAYOUT_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features uniformBufferStandardLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + UNIFORM_BUFFER_STANDARD_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderSubgroupExtendedTypes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_SUBGROUP_EXTENDED_TYPES_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderSubgroupExtendedTypes(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_SUBGROUP_EXTENDED_TYPES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int separateDepthStencilLayouts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SEPARATE_DEPTH_STENCIL_LAYOUTS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features separateDepthStencilLayouts(int value) {
		INT_HANDLE.set(this.segment, this.offset + SEPARATE_DEPTH_STENCIL_LAYOUTS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int hostQueryReset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + HOST_QUERY_RESET_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features hostQueryReset(int value) {
		INT_HANDLE.set(this.segment, this.offset + HOST_QUERY_RESET_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int timelineSemaphore() {
		return (int) INT_HANDLE.get(this.segment, this.offset + TIMELINE_SEMAPHORE_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features timelineSemaphore(int value) {
		INT_HANDLE.set(this.segment, this.offset + TIMELINE_SEMAPHORE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int bufferDeviceAddress() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_DEVICE_ADDRESS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features bufferDeviceAddress(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_DEVICE_ADDRESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int bufferDeviceAddressCaptureReplay() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_DEVICE_ADDRESS_CAPTURE_REPLAY_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features bufferDeviceAddressCaptureReplay(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_DEVICE_ADDRESS_CAPTURE_REPLAY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int bufferDeviceAddressMultiDevice() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BUFFER_DEVICE_ADDRESS_MULTI_DEVICE_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features bufferDeviceAddressMultiDevice(int value) {
		INT_HANDLE.set(this.segment, this.offset + BUFFER_DEVICE_ADDRESS_MULTI_DEVICE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int vulkanMemoryModel() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VULKAN_MEMORY_MODEL_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features vulkanMemoryModel(int value) {
		INT_HANDLE.set(this.segment, this.offset + VULKAN_MEMORY_MODEL_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int vulkanMemoryModelDeviceScope() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VULKAN_MEMORY_MODEL_DEVICE_SCOPE_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features vulkanMemoryModelDeviceScope(int value) {
		INT_HANDLE.set(this.segment, this.offset + VULKAN_MEMORY_MODEL_DEVICE_SCOPE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int vulkanMemoryModelAvailabilityVisibilityChains() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VULKAN_MEMORY_MODEL_AVAILABILITY_VISIBILITY_CHAINS_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features vulkanMemoryModelAvailabilityVisibilityChains(int value) {
		INT_HANDLE.set(this.segment, this.offset + VULKAN_MEMORY_MODEL_AVAILABILITY_VISIBILITY_CHAINS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderOutputViewportIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_OUTPUT_VIEWPORT_INDEX_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderOutputViewportIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_OUTPUT_VIEWPORT_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int shaderOutputLayer() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SHADER_OUTPUT_LAYER_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features shaderOutputLayer(int value) {
		INT_HANDLE.set(this.segment, this.offset + SHADER_OUTPUT_LAYER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int subgroupBroadcastDynamicId() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBGROUP_BROADCAST_DYNAMIC_ID_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan12Features subgroupBroadcastDynamicId(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUBGROUP_BROADCAST_DYNAMIC_ID_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceVulkan12Features> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceVulkan12Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceVulkan12Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceVulkan12Features[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}