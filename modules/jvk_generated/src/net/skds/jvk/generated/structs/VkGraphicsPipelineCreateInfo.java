package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkGraphicsPipelineCreateInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkPipelineCreateFlags flags;
* 	uint32_t stageCount;
* 	VkPipelineShaderStageCreateInfo* pStages;
* 	VkPipelineVertexInputStateCreateInfo* pVertexInputState;
* 	VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
* 	VkPipelineTessellationStateCreateInfo* pTessellationState;
* 	VkPipelineViewportStateCreateInfo* pViewportState;
* 	VkPipelineRasterizationStateCreateInfo* pRasterizationState;
* 	VkPipelineMultisampleStateCreateInfo* pMultisampleState;
* 	VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
* 	VkPipelineColorBlendStateCreateInfo* pColorBlendState;
* 	VkPipelineDynamicStateCreateInfo* pDynamicState;
* 	VkPipelineLayout* layout;
* 	VkRenderPass* renderPass;
* 	uint32_t subpass;
* 	// pad (4)
* 	VkPipeline* basePipelineHandle;
* 	int32_t basePipelineIndex;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkGraphicsPipelineCreateInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int STAGE_COUNT_OFFSET = 20;
	private static final int P_STAGES_OFFSET = 24;
	private static final int P_VERTEX_INPUT_STATE_OFFSET = 32;
	private static final int P_INPUT_ASSEMBLY_STATE_OFFSET = 40;
	private static final int P_TESSELLATION_STATE_OFFSET = 48;
	private static final int P_VIEWPORT_STATE_OFFSET = 56;
	private static final int P_RASTERIZATION_STATE_OFFSET = 64;
	private static final int P_MULTISAMPLE_STATE_OFFSET = 72;
	private static final int P_DEPTH_STENCIL_STATE_OFFSET = 80;
	private static final int P_COLOR_BLEND_STATE_OFFSET = 88;
	private static final int P_DYNAMIC_STATE_OFFSET = 96;
	private static final int LAYOUT_OFFSET = 104;
	private static final int RENDER_PASS_OFFSET = 112;
	private static final int SUBPASS_OFFSET = 120;
	private static final int BASE_PIPELINE_HANDLE_OFFSET = 128;
	private static final int BASE_PIPELINE_INDEX_OFFSET = 136;
	
	public VkGraphicsPipelineCreateInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkGraphicsPipelineCreateInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkGraphicsPipelineCreateInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkGraphicsPipelineCreateInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkGraphicsPipelineCreateInfo sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 28);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkGraphicsPipelineCreateInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineCreateFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineCreateFlags")
	public VkGraphicsPipelineCreateInfo flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int stageCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STAGE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkGraphicsPipelineCreateInfo stageCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + STAGE_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineShaderStageCreateInfo*")
	public long pStages() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_STAGES_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineShaderStageCreateInfo*")
	public VkGraphicsPipelineCreateInfo pStages(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_STAGES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineVertexInputStateCreateInfo*")
	public long pVertexInputState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_VERTEX_INPUT_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineVertexInputStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pVertexInputState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_VERTEX_INPUT_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineInputAssemblyStateCreateInfo*")
	public long pInputAssemblyState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_INPUT_ASSEMBLY_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineInputAssemblyStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pInputAssemblyState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_INPUT_ASSEMBLY_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineTessellationStateCreateInfo*")
	public long pTessellationState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_TESSELLATION_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineTessellationStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pTessellationState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_TESSELLATION_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineViewportStateCreateInfo*")
	public long pViewportState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_VIEWPORT_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineViewportStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pViewportState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_VIEWPORT_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineRasterizationStateCreateInfo*")
	public long pRasterizationState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_RASTERIZATION_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineRasterizationStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pRasterizationState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_RASTERIZATION_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineMultisampleStateCreateInfo*")
	public long pMultisampleState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_MULTISAMPLE_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineMultisampleStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pMultisampleState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_MULTISAMPLE_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineDepthStencilStateCreateInfo*")
	public long pDepthStencilState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_DEPTH_STENCIL_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineDepthStencilStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pDepthStencilState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_DEPTH_STENCIL_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineColorBlendStateCreateInfo*")
	public long pColorBlendState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_COLOR_BLEND_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineColorBlendStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pColorBlendState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_COLOR_BLEND_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineDynamicStateCreateInfo*")
	public long pDynamicState() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_DYNAMIC_STATE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineDynamicStateCreateInfo*")
	public VkGraphicsPipelineCreateInfo pDynamicState(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_DYNAMIC_STATE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineLayout*")
	public long layout() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + LAYOUT_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineLayout*")
	public VkGraphicsPipelineCreateInfo layout(long value) {
		LONG_HANDLE.set(this.segment, this.offset + LAYOUT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkRenderPass*")
	public long renderPass() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + RENDER_PASS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkRenderPass*")
	public VkGraphicsPipelineCreateInfo renderPass(long value) {
		LONG_HANDLE.set(this.segment, this.offset + RENDER_PASS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int subpass() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBPASS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkGraphicsPipelineCreateInfo subpass(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUBPASS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipeline*")
	public long basePipelineHandle() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + BASE_PIPELINE_HANDLE_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipeline*")
	public VkGraphicsPipelineCreateInfo basePipelineHandle(long value) {
		LONG_HANDLE.set(this.segment, this.offset + BASE_PIPELINE_HANDLE_OFFSET, value);
		return this;
	}
	
	@NativeType("int32_t")
	public int basePipelineIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BASE_PIPELINE_INDEX_OFFSET);
	}
	
	@NativeType("int32_t")
	public VkGraphicsPipelineCreateInfo basePipelineIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + BASE_PIPELINE_INDEX_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkGraphicsPipelineCreateInfo> {
		
		private static final StructConstructor<VkGraphicsPipelineCreateInfo> CONSTRUCTOR = VkGraphicsPipelineCreateInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkGraphicsPipelineCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkGraphicsPipelineCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkGraphicsPipelineCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}