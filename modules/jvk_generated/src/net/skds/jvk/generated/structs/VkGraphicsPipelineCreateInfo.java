package net.skds.jvk.generated.structs;
import net.skds.ninvoker.struct.NativeStructureWrapper;
import net.skds.lib2.utils.annotations.AutoGenerated;
import net.skds.jvk.annotation.NativeType;
import net.skds.ninvoker.struct.AbstractNativeStructure;

@AutoGenerated
@SuppressWarnings("unused")
public final class VkGraphicsPipelineCreateInfo extends AbstractNativeStructure {


	public static final NativeStructureWrapper WRAPPER = new NativeStructureWrapper(VkGraphicsPipelineCreateInfo.class);

	/**
	* values = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO
	*/
	@NativeType("VkStructureType")
	public int sType = 28;

	/**
	* optional
	*/
	@NativeType("void*")
	public long pNext;

	/**
	* optional
	*/
	@NativeType("VkPipelineCreateFlags")
	public int flags;

	/**
	* optional
	*/
	@NativeType("uint32_t")
	public int stageCount;

	/**
	* optional
	*/
	@NativeType("VkPipelineShaderStageCreateInfo*")
	public long pStages;

	/**
	* optional
	*/
	@NativeType("VkPipelineVertexInputStateCreateInfo*")
	public long pVertexInputState;

	/**
	* optional
	*/
	@NativeType("VkPipelineInputAssemblyStateCreateInfo*")
	public long pInputAssemblyState;

	/**
	* optional
	*/
	@NativeType("VkPipelineTessellationStateCreateInfo*")
	public long pTessellationState;

	/**
	* optional
	*/
	@NativeType("VkPipelineViewportStateCreateInfo*")
	public long pViewportState;

	/**
	* optional
	*/
	@NativeType("VkPipelineRasterizationStateCreateInfo*")
	public long pRasterizationState;

	/**
	* optional
	*/
	@NativeType("VkPipelineMultisampleStateCreateInfo*")
	public long pMultisampleState;

	/**
	* optional
	*/
	@NativeType("VkPipelineDepthStencilStateCreateInfo*")
	public long pDepthStencilState;

	/**
	* optional
	*/
	@NativeType("VkPipelineColorBlendStateCreateInfo*")
	public long pColorBlendState;

	/**
	* optional
	*/
	@NativeType("VkPipelineDynamicStateCreateInfo*")
	public long pDynamicState;

	/**
	* optional
	*/
	@NativeType("VkPipelineLayout*")
	public long layout;

	/**
	* optional
	*/
	@NativeType("VkRenderPass*")
	public long renderPass;

	@NativeType("uint32_t")
	public int subpass;

	/**
	* optional
	*/
	@NativeType("VkPipeline*")
	public long basePipelineHandle;

	@NativeType("int32_t")
	public int basePipelineIndex;


	@Override
	protected NativeStructureWrapper getWrapper() {
		return WRAPPER;
	}
}