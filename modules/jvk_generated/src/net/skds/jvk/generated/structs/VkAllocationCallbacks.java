package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkAllocationCallbacks {
* 	void* pUserData;
* 	PFN_vkAllocationFunction* pfnAllocation;
* 	PFN_vkReallocationFunction* pfnReallocation;
* 	PFN_vkFreeFunction* pfnFree;
* 	PFN_vkInternalAllocationNotification* pfnInternalAllocation;
* 	PFN_vkInternalFreeNotification* pfnInternalFree;
* };
*</pre>
**/
@AutoGenerated
public final class VkAllocationCallbacks extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int P_USER_DATA_OFFSET = 0;
	private static final int PFN_ALLOCATION_OFFSET = 8;
	private static final int PFN_REALLOCATION_OFFSET = 16;
	private static final int PFN_FREE_OFFSET = 24;
	private static final int PFN_INTERNAL_ALLOCATION_OFFSET = 32;
	private static final int PFN_INTERNAL_FREE_OFFSET = 40;
	
	public VkAllocationCallbacks() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAllocationCallbacks(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAllocationCallbacks(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** optional **/
	@NativeType("void*")
	public long pUserData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_USER_DATA_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkAllocationCallbacks pUserData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_USER_DATA_OFFSET, value);
		return this;
	}
	
	@NativeType("PFN_vkAllocationFunction*")
	public long pfnAllocation() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PFN_ALLOCATION_OFFSET);
	}
	
	@NativeType("PFN_vkAllocationFunction*")
	public VkAllocationCallbacks pfnAllocation(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PFN_ALLOCATION_OFFSET, value);
		return this;
	}
	
	@NativeType("PFN_vkReallocationFunction*")
	public long pfnReallocation() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PFN_REALLOCATION_OFFSET);
	}
	
	@NativeType("PFN_vkReallocationFunction*")
	public VkAllocationCallbacks pfnReallocation(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PFN_REALLOCATION_OFFSET, value);
		return this;
	}
	
	@NativeType("PFN_vkFreeFunction*")
	public long pfnFree() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PFN_FREE_OFFSET);
	}
	
	@NativeType("PFN_vkFreeFunction*")
	public VkAllocationCallbacks pfnFree(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PFN_FREE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("PFN_vkInternalAllocationNotification*")
	public long pfnInternalAllocation() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PFN_INTERNAL_ALLOCATION_OFFSET);
	}
	
	/** optional **/
	@NativeType("PFN_vkInternalAllocationNotification*")
	public VkAllocationCallbacks pfnInternalAllocation(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PFN_INTERNAL_ALLOCATION_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("PFN_vkInternalFreeNotification*")
	public long pfnInternalFree() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PFN_INTERNAL_FREE_OFFSET);
	}
	
	/** optional **/
	@NativeType("PFN_vkInternalFreeNotification*")
	public VkAllocationCallbacks pfnInternalFree(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PFN_INTERNAL_FREE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkAllocationCallbacks> {
		
		private static final StructConstructor<VkAllocationCallbacks> CONSTRUCTOR = VkAllocationCallbacks::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkAllocationCallbacks[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkAllocationCallbacks[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkAllocationCallbacks[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}