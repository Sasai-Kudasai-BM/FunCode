package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkLayerProperties {
* 	char[256] layerName;
* 	uint32_t specVersion;
* 	uint32_t implementationVersion;
* 	char[256] description;
* };
*</pre>
**/
@AutoGenerated
public final class VkLayerProperties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			sequenceLayout(256, JAVA_BYTE),
			JAVA_INT,
			JAVA_INT,
			sequenceLayout(256, JAVA_BYTE)
	);
	private static final int LAYER_NAME_OFFSET = 0;
	private static final int SPEC_VERSION_OFFSET = 256;
	private static final int IMPLEMENTATION_VERSION_OFFSET = 260;
	private static final int DESCRIPTION_OFFSET = 264;
	
	public VkLayerProperties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkLayerProperties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkLayerProperties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("char[256]")
	public byte layerName(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + LAYER_NAME_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[256]")
	public VkLayerProperties layerName(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + LAYER_NAME_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int specVersion() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SPEC_VERSION_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkLayerProperties specVersion(int value) {
		INT_HANDLE.set(this.segment, this.offset + SPEC_VERSION_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int implementationVersion() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMPLEMENTATION_VERSION_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkLayerProperties implementationVersion(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMPLEMENTATION_VERSION_OFFSET, value);
		return this;
	}
	
	@NativeType("char[256]")
	public byte description(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + DESCRIPTION_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[256]")
	public VkLayerProperties description(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + DESCRIPTION_OFFSET + ValueLayout.JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkLayerProperties> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkLayerProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkLayerProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkLayerProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}