package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkRenderPassCreateInfo2 {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkRenderPassCreateFlags flags;
* 	uint32_t attachmentCount;
* 	VkAttachmentDescription2* pAttachments;
* 	uint32_t subpassCount;
* 	// pad (4)
* 	VkSubpassDescription2* pSubpasses;
* 	uint32_t dependencyCount;
* 	// pad (4)
* 	VkSubpassDependency2* pDependencies;
* 	uint32_t correlatedViewMaskCount;
* 	// pad (4)
* 	uint32_t* pCorrelatedViewMasks;
* };
*</pre>
**/
@AutoGenerated
public final class VkRenderPassCreateInfo2 extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int ATTACHMENT_COUNT_OFFSET = 20;
	private static final int P_ATTACHMENTS_OFFSET = 24;
	private static final int SUBPASS_COUNT_OFFSET = 32;
	private static final int P_SUBPASSES_OFFSET = 40;
	private static final int DEPENDENCY_COUNT_OFFSET = 48;
	private static final int P_DEPENDENCIES_OFFSET = 56;
	private static final int CORRELATED_VIEW_MASK_COUNT_OFFSET = 64;
	private static final int P_CORRELATED_VIEW_MASKS_OFFSET = 72;
	
	public VkRenderPassCreateInfo2() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkRenderPassCreateInfo2(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkRenderPassCreateInfo2(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 **/
	@NativeType("VkStructureType")
	public VkRenderPassCreateInfo2 sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 **/
	@NativeType("VkStructureType")
	public VkRenderPassCreateInfo2 sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 4);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkRenderPassCreateInfo2 pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkRenderPassCreateFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkRenderPassCreateFlags")
	public VkRenderPassCreateInfo2 flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int attachmentCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ATTACHMENT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkRenderPassCreateInfo2 attachmentCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + ATTACHMENT_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentDescription2*")
	public long pAttachments() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_ATTACHMENTS_OFFSET);
	}
	
	@NativeType("VkAttachmentDescription2*")
	public VkRenderPassCreateInfo2 pAttachments(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_ATTACHMENTS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int subpassCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUBPASS_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkRenderPassCreateInfo2 subpassCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUBPASS_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSubpassDescription2*")
	public long pSubpasses() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_SUBPASSES_OFFSET);
	}
	
	@NativeType("VkSubpassDescription2*")
	public VkRenderPassCreateInfo2 pSubpasses(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_SUBPASSES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int dependencyCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPENDENCY_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkRenderPassCreateInfo2 dependencyCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEPENDENCY_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSubpassDependency2*")
	public long pDependencies() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_DEPENDENCIES_OFFSET);
	}
	
	@NativeType("VkSubpassDependency2*")
	public VkRenderPassCreateInfo2 pDependencies(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_DEPENDENCIES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int correlatedViewMaskCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CORRELATED_VIEW_MASK_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkRenderPassCreateInfo2 correlatedViewMaskCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + CORRELATED_VIEW_MASK_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t*")
	public long pCorrelatedViewMasks() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_CORRELATED_VIEW_MASKS_OFFSET);
	}
	
	@NativeType("uint32_t*")
	public VkRenderPassCreateInfo2 pCorrelatedViewMasks(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_CORRELATED_VIEW_MASKS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkRenderPassCreateInfo2> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkRenderPassCreateInfo2[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkRenderPassCreateInfo2[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkRenderPassCreateInfo2[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}