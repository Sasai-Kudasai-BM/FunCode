package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceDataGraphOperationSupportARM {
* 	VkPhysicalDeviceDataGraphOperationTypeARM operationType;
* 	char[128] name;
* 	uint32_t version;
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceDataGraphOperationSupportARM extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			sequenceLayout(128, JAVA_BYTE),
			JAVA_INT
	);
	private static final int OPERATION_TYPE_OFFSET = 0;
	private static final int NAME_OFFSET = 4;
	private static final int VERSION_OFFSET = 132;
	
	public VkPhysicalDeviceDataGraphOperationSupportARM() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDataGraphOperationSupportARM(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceDataGraphOperationSupportARM(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkPhysicalDeviceDataGraphOperationTypeARM")
	public int operationType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + OPERATION_TYPE_OFFSET);
	}
	
	@NativeType("VkPhysicalDeviceDataGraphOperationTypeARM")
	public VkPhysicalDeviceDataGraphOperationSupportARM operationType(int value) {
		INT_HANDLE.set(this.segment, this.offset + OPERATION_TYPE_OFFSET, value);
		return this;
	}
	
	@NativeType("char[128]")
	public byte name(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + NAME_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	@NativeType("char[128]")
	public byte[] nameArray() {
		var array = new byte[128];
		MemorySegment.copy(this.segment, BYTE, this.offset + NAME_OFFSET, array, 0, array.length);
		return array;
	}
	
	@NativeType("char[128]")
	public String name() {
		return this.segment.getString(this.offset + NAME_OFFSET);
	}
	
	@NativeType("char[128]")
	public VkPhysicalDeviceDataGraphOperationSupportARM name(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + NAME_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	@NativeType("char[128]")
	public VkPhysicalDeviceDataGraphOperationSupportARM name(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + NAME_OFFSET, value.length);
		return this;
	}
	
	@NativeType("char[128]")
	public VkPhysicalDeviceDataGraphOperationSupportARM name(String value) {
		this.segment.setString(this.offset + NAME_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int version() {
		return (int) INT_HANDLE.get(this.segment, this.offset + VERSION_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceDataGraphOperationSupportARM version(int value) {
		INT_HANDLE.set(this.segment, this.offset + VERSION_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceDataGraphOperationSupportARM> {
		
		private static final StructConstructor<VkPhysicalDeviceDataGraphOperationSupportARM> CONSTRUCTOR = VkPhysicalDeviceDataGraphOperationSupportARM::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceDataGraphOperationSupportARM[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceDataGraphOperationSupportARM[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceDataGraphOperationSupportARM[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}