package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t acquireCount;
* 	// pad (4)
* 	VkDeviceMemory** pAcquireSyncs;
* 	uint64_t* pAcquireKeys;
* 	uint32_t* pAcquireTimeouts;
* 	uint32_t releaseCount;
* 	// pad (4)
* 	VkDeviceMemory** pReleaseSyncs;
* 	uint64_t* pReleaseKeys;
* };
*</pre>
**/
@AutoGenerated
public final class VkWin32KeyedMutexAcquireReleaseInfoKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int ACQUIRE_COUNT_OFFSET = 16;
	private static final int P_ACQUIRE_SYNCS_OFFSET = 24;
	private static final int P_ACQUIRE_KEYS_OFFSET = 32;
	private static final int P_ACQUIRE_TIMEOUTS_OFFSET = 40;
	private static final int RELEASE_COUNT_OFFSET = 48;
	private static final int P_RELEASE_SYNCS_OFFSET = 56;
	private static final int P_RELEASE_KEYS_OFFSET = 64;
	
	public VkWin32KeyedMutexAcquireReleaseInfoKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkWin32KeyedMutexAcquireReleaseInfoKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkWin32KeyedMutexAcquireReleaseInfoKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000075000);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int acquireCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ACQUIRE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR acquireCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + ACQUIRE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceMemory**")
	public long pAcquireSyncs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_ACQUIRE_SYNCS_OFFSET);
	}
	
	@NativeType("VkDeviceMemory**")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR pAcquireSyncs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_ACQUIRE_SYNCS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t*")
	public long pAcquireKeys() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_ACQUIRE_KEYS_OFFSET);
	}
	
	@NativeType("uint64_t*")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR pAcquireKeys(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_ACQUIRE_KEYS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t*")
	public long pAcquireTimeouts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_ACQUIRE_TIMEOUTS_OFFSET);
	}
	
	@NativeType("uint32_t*")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR pAcquireTimeouts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_ACQUIRE_TIMEOUTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int releaseCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RELEASE_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR releaseCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + RELEASE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceMemory**")
	public long pReleaseSyncs() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_RELEASE_SYNCS_OFFSET);
	}
	
	@NativeType("VkDeviceMemory**")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR pReleaseSyncs(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_RELEASE_SYNCS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t*")
	public long pReleaseKeys() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_RELEASE_KEYS_OFFSET);
	}
	
	@NativeType("uint64_t*")
	public VkWin32KeyedMutexAcquireReleaseInfoKHR pReleaseKeys(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_RELEASE_KEYS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkWin32KeyedMutexAcquireReleaseInfoKHR> {
		
		private static final StructConstructor<VkWin32KeyedMutexAcquireReleaseInfoKHR> CONSTRUCTOR = VkWin32KeyedMutexAcquireReleaseInfoKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkWin32KeyedMutexAcquireReleaseInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkWin32KeyedMutexAcquireReleaseInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkWin32KeyedMutexAcquireReleaseInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}