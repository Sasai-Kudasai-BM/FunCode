package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSurfaceCapabilities2EXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t minImageCount;
* 	uint32_t maxImageCount;
* 	VkExtent2D currentExtent;
* 	VkExtent2D minImageExtent;
* 	VkExtent2D maxImageExtent;
* 	uint32_t maxImageArrayLayers;
* 	VkSurfaceTransformFlagsKHR supportedTransforms;
* 	VkSurfaceTransformFlagBitsKHR currentTransform;
* 	VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
* 	VkImageUsageFlags supportedUsageFlags;
* 	VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
* };
*</pre>
**/
@AutoGenerated
public final class VkSurfaceCapabilities2EXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			VkExtent2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT,
			VkExtent2D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int MIN_IMAGE_COUNT_OFFSET = 16;
	private static final int MAX_IMAGE_COUNT_OFFSET = 20;
	private static final int CURRENT_EXTENT_OFFSET = 24;
	private static final int MIN_IMAGE_EXTENT_OFFSET = 32;
	private static final int MAX_IMAGE_EXTENT_OFFSET = 40;
	private static final int MAX_IMAGE_ARRAY_LAYERS_OFFSET = 48;
	private static final int SUPPORTED_TRANSFORMS_OFFSET = 52;
	private static final int CURRENT_TRANSFORM_OFFSET = 56;
	private static final int SUPPORTED_COMPOSITE_ALPHA_OFFSET = 60;
	private static final int SUPPORTED_USAGE_FLAGS_OFFSET = 64;
	private static final int SUPPORTED_SURFACE_COUNTERS_OFFSET = 68;
	
	public VkSurfaceCapabilities2EXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSurfaceCapabilities2EXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSurfaceCapabilities2EXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT **/
	@NativeType("VkStructureType")
	public VkSurfaceCapabilities2EXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT **/
	@NativeType("VkStructureType")
	public VkSurfaceCapabilities2EXT sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 0);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkSurfaceCapabilities2EXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int minImageCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIN_IMAGE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSurfaceCapabilities2EXT minImageCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIN_IMAGE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxImageCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSurfaceCapabilities2EXT maxImageCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D currentExtent() {
		return new VkExtent2D(this.segment, this.offset + CURRENT_EXTENT_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D minImageExtent() {
		return new VkExtent2D(this.segment, this.offset + MIN_IMAGE_EXTENT_OFFSET);
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D maxImageExtent() {
		return new VkExtent2D(this.segment, this.offset + MAX_IMAGE_EXTENT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int maxImageArrayLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_IMAGE_ARRAY_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSurfaceCapabilities2EXT maxImageArrayLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_IMAGE_ARRAY_LAYERS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSurfaceTransformFlagsKHR")
	public int supportedTransforms() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_TRANSFORMS_OFFSET);
	}
	
	@NativeType("VkSurfaceTransformFlagsKHR")
	public VkSurfaceCapabilities2EXT supportedTransforms(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_TRANSFORMS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSurfaceTransformFlagBitsKHR")
	public int currentTransform() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CURRENT_TRANSFORM_OFFSET);
	}
	
	@NativeType("VkSurfaceTransformFlagBitsKHR")
	public VkSurfaceCapabilities2EXT currentTransform(int value) {
		INT_HANDLE.set(this.segment, this.offset + CURRENT_TRANSFORM_OFFSET, value);
		return this;
	}
	
	@NativeType("VkCompositeAlphaFlagsKHR")
	public int supportedCompositeAlpha() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_COMPOSITE_ALPHA_OFFSET);
	}
	
	@NativeType("VkCompositeAlphaFlagsKHR")
	public VkSurfaceCapabilities2EXT supportedCompositeAlpha(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_COMPOSITE_ALPHA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageUsageFlags")
	public int supportedUsageFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_USAGE_FLAGS_OFFSET);
	}
	
	@NativeType("VkImageUsageFlags")
	public VkSurfaceCapabilities2EXT supportedUsageFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_USAGE_FLAGS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSurfaceCounterFlagsEXT")
	public int supportedSurfaceCounters() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTED_SURFACE_COUNTERS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSurfaceCounterFlagsEXT")
	public VkSurfaceCapabilities2EXT supportedSurfaceCounters(int value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTED_SURFACE_COUNTERS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSurfaceCapabilities2EXT> {
		
		private static final StructConstructor<VkSurfaceCapabilities2EXT> CONSTRUCTOR = VkSurfaceCapabilities2EXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSurfaceCapabilities2EXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSurfaceCapabilities2EXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSurfaceCapabilities2EXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}