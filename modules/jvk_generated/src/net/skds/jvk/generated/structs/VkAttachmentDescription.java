package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkAttachmentDescription {
* 	VkAttachmentDescriptionFlags flags;
* 	VkFormat format;
* 	VkSampleCountFlagBits samples;
* 	VkAttachmentLoadOp loadOp;
* 	VkAttachmentStoreOp storeOp;
* 	VkAttachmentLoadOp stencilLoadOp;
* 	VkAttachmentStoreOp stencilStoreOp;
* 	VkImageLayout initialLayout;
* 	VkImageLayout finalLayout;
* };
*</pre>
**/
@AutoGenerated
public final class VkAttachmentDescription extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT
	);
	private static final int FLAGS_OFFSET = 0;
	private static final int FORMAT_OFFSET = 4;
	private static final int SAMPLES_OFFSET = 8;
	private static final int LOAD_OP_OFFSET = 12;
	private static final int STORE_OP_OFFSET = 16;
	private static final int STENCIL_LOAD_OP_OFFSET = 20;
	private static final int STENCIL_STORE_OP_OFFSET = 24;
	private static final int INITIAL_LAYOUT_OFFSET = 28;
	private static final int FINAL_LAYOUT_OFFSET = 32;
	
	public VkAttachmentDescription() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAttachmentDescription(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAttachmentDescription(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** optional **/
	@NativeType("VkAttachmentDescriptionFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAttachmentDescriptionFlags")
	public VkAttachmentDescription flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkFormat")
	public int format() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FORMAT_OFFSET);
	}
	
	@NativeType("VkFormat")
	public VkAttachmentDescription format(int value) {
		INT_HANDLE.set(this.segment, this.offset + FORMAT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSampleCountFlagBits")
	public int samples() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLES_OFFSET);
	}
	
	@NativeType("VkSampleCountFlagBits")
	public VkAttachmentDescription samples(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentLoadOp")
	public int loadOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LOAD_OP_OFFSET);
	}
	
	@NativeType("VkAttachmentLoadOp")
	public VkAttachmentDescription loadOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + LOAD_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentStoreOp")
	public int storeOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STORE_OP_OFFSET);
	}
	
	@NativeType("VkAttachmentStoreOp")
	public VkAttachmentDescription storeOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + STORE_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentLoadOp")
	public int stencilLoadOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STENCIL_LOAD_OP_OFFSET);
	}
	
	@NativeType("VkAttachmentLoadOp")
	public VkAttachmentDescription stencilLoadOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + STENCIL_LOAD_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkAttachmentStoreOp")
	public int stencilStoreOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STENCIL_STORE_OP_OFFSET);
	}
	
	@NativeType("VkAttachmentStoreOp")
	public VkAttachmentDescription stencilStoreOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + STENCIL_STORE_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageLayout")
	public int initialLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INITIAL_LAYOUT_OFFSET);
	}
	
	@NativeType("VkImageLayout")
	public VkAttachmentDescription initialLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + INITIAL_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageLayout")
	public int finalLayout() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FINAL_LAYOUT_OFFSET);
	}
	
	@NativeType("VkImageLayout")
	public VkAttachmentDescription finalLayout(int value) {
		INT_HANDLE.set(this.segment, this.offset + FINAL_LAYOUT_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkAttachmentDescription> {
		
		private static final StructConstructor<VkAttachmentDescription> CONSTRUCTOR = VkAttachmentDescription::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkAttachmentDescription[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkAttachmentDescription[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkAttachmentDescription[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}