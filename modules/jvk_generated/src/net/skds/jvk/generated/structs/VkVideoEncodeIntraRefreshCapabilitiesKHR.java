package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVideoEncodeIntraRefreshCapabilitiesKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkVideoEncodeIntraRefreshModeFlagsKHR intraRefreshModes;
* 	uint32_t maxIntraRefreshCycleDuration;
* 	uint32_t maxIntraRefreshActiveReferencePictures;
* 	VkBool32 partitionIndependentIntraRefreshRegions;
* 	VkBool32 nonRectangularIntraRefreshRegions;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkVideoEncodeIntraRefreshCapabilitiesKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int INTRA_REFRESH_MODES_OFFSET = 16;
	private static final int MAX_INTRA_REFRESH_CYCLE_DURATION_OFFSET = 20;
	private static final int MAX_INTRA_REFRESH_ACTIVE_REFERENCE_PICTURES_OFFSET = 24;
	private static final int PARTITION_INDEPENDENT_INTRA_REFRESH_REGIONS_OFFSET = 28;
	private static final int NON_RECTANGULAR_INTRA_REFRESH_REGIONS_OFFSET = 32;
	
	public VkVideoEncodeIntraRefreshCapabilitiesKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeIntraRefreshCapabilitiesKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeIntraRefreshCapabilitiesKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_INTRA_REFRESH_CAPABILITIES_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_INTRA_REFRESH_CAPABILITIES_KHR **/
	@NativeType("VkStructureType")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_INTRA_REFRESH_CAPABILITIES_KHR **/
	@NativeType("VkStructureType")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 1000552000);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkVideoEncodeIntraRefreshModeFlagsKHR")
	public int intraRefreshModes() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INTRA_REFRESH_MODES_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkVideoEncodeIntraRefreshModeFlagsKHR")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR intraRefreshModes(int value) {
		INT_HANDLE.set(this.segment, this.offset + INTRA_REFRESH_MODES_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIntraRefreshCycleDuration() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INTRA_REFRESH_CYCLE_DURATION_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR maxIntraRefreshCycleDuration(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INTRA_REFRESH_CYCLE_DURATION_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxIntraRefreshActiveReferencePictures() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_INTRA_REFRESH_ACTIVE_REFERENCE_PICTURES_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR maxIntraRefreshActiveReferencePictures(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_INTRA_REFRESH_ACTIVE_REFERENCE_PICTURES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean partitionIndependentIntraRefreshRegions() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PARTITION_INDEPENDENT_INTRA_REFRESH_REGIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR partitionIndependentIntraRefreshRegions(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + PARTITION_INDEPENDENT_INTRA_REFRESH_REGIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean nonRectangularIntraRefreshRegions() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NON_RECTANGULAR_INTRA_REFRESH_REGIONS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkVideoEncodeIntraRefreshCapabilitiesKHR nonRectangularIntraRefreshRegions(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + NON_RECTANGULAR_INTRA_REFRESH_REGIONS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVideoEncodeIntraRefreshCapabilitiesKHR> {
		
		private static final StructConstructor<VkVideoEncodeIntraRefreshCapabilitiesKHR> CONSTRUCTOR = VkVideoEncodeIntraRefreshCapabilitiesKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVideoEncodeIntraRefreshCapabilitiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVideoEncodeIntraRefreshCapabilitiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVideoEncodeIntraRefreshCapabilitiesKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}