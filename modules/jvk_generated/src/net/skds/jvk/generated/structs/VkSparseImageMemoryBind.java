package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSparseImageMemoryBind {
* 	VkImageSubresource subresource;
* 	VkOffset3D offset;
* 	VkExtent3D extent;
* 	// pad (4)
* 	VkDeviceMemory* memory;
* 	VkDeviceSize memoryOffset;
* 	VkSparseMemoryBindFlags flags;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkSparseImageMemoryBind extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkImageSubresource.MEMORY_LAYOUT,
			VkOffset3D.MEMORY_LAYOUT,
			VkExtent3D.MEMORY_LAYOUT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int SUBRESOURCE_OFFSET = 0;
	private static final int OFFSET_OFFSET = 12;
	private static final int EXTENT_OFFSET = 24;
	private static final int MEMORY_OFFSET = 40;
	private static final int MEMORY_OFFSET_OFFSET = 48;
	private static final int FLAGS_OFFSET = 56;
	
	public VkSparseImageMemoryBind() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSparseImageMemoryBind(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSparseImageMemoryBind(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkImageSubresource")
	public VkImageSubresource subresource() {
		return new VkImageSubresource(this.segment, this.offset + SUBRESOURCE_OFFSET);
	}
	
	@NativeType("VkOffset3D")
	public VkOffset3D offset() {
		return new VkOffset3D(this.segment, this.offset + OFFSET_OFFSET);
	}
	
	@NativeType("VkExtent3D")
	public VkExtent3D extent() {
		return new VkExtent3D(this.segment, this.offset + EXTENT_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkDeviceMemory*")
	public long memory() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MEMORY_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkDeviceMemory*")
	public VkSparseImageMemoryBind memory(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MEMORY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long memoryOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MEMORY_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkSparseImageMemoryBind memoryOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MEMORY_OFFSET_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSparseMemoryBindFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSparseMemoryBindFlags")
	public VkSparseImageMemoryBind flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSparseImageMemoryBind> {
		
		private static final StructConstructor<VkSparseImageMemoryBind> CONSTRUCTOR = VkSparseImageMemoryBind::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSparseImageMemoryBind[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSparseImageMemoryBind[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSparseImageMemoryBind[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}