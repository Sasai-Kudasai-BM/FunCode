package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkGeneratedCommandsInfoNV {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkPipelineBindPoint pipelineBindPoint;
* 	// pad (4)
* 	VkPipeline* pipeline;
* 	VkIndirectCommandsLayoutNV* indirectCommandsLayout;
* 	uint32_t streamCount;
* 	// pad (4)
* 	VkIndirectCommandsStreamNV* pStreams;
* 	uint32_t sequencesCount;
* 	// pad (4)
* 	VkBuffer* preprocessBuffer;
* 	VkDeviceSize preprocessOffset;
* 	VkDeviceSize preprocessSize;
* 	VkBuffer* sequencesCountBuffer;
* 	VkDeviceSize sequencesCountOffset;
* 	VkBuffer* sequencesIndexBuffer;
* 	VkDeviceSize sequencesIndexOffset;
* };
*</pre>
**/
@AutoGenerated
public final class VkGeneratedCommandsInfoNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int PIPELINE_BIND_POINT_OFFSET = 16;
	private static final int PIPELINE_OFFSET = 24;
	private static final int INDIRECT_COMMANDS_LAYOUT_OFFSET = 32;
	private static final int STREAM_COUNT_OFFSET = 40;
	private static final int P_STREAMS_OFFSET = 48;
	private static final int SEQUENCES_COUNT_OFFSET = 56;
	private static final int PREPROCESS_BUFFER_OFFSET = 64;
	private static final int PREPROCESS_OFFSET_OFFSET = 72;
	private static final int PREPROCESS_SIZE_OFFSET = 80;
	private static final int SEQUENCES_COUNT_BUFFER_OFFSET = 88;
	private static final int SEQUENCES_COUNT_OFFSET_OFFSET = 96;
	private static final int SEQUENCES_INDEX_BUFFER_OFFSET = 104;
	private static final int SEQUENCES_INDEX_OFFSET_OFFSET = 112;
	
	public VkGeneratedCommandsInfoNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkGeneratedCommandsInfoNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkGeneratedCommandsInfoNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV **/
	@NativeType("VkStructureType")
	public VkGeneratedCommandsInfoNV sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV **/
	@NativeType("VkStructureType")
	public VkGeneratedCommandsInfoNV sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 5);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkGeneratedCommandsInfoNV pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelineBindPoint")
	public int pipelineBindPoint() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PIPELINE_BIND_POINT_OFFSET);
	}
	
	@NativeType("VkPipelineBindPoint")
	public VkGeneratedCommandsInfoNV pipelineBindPoint(int value) {
		INT_HANDLE.set(this.segment, this.offset + PIPELINE_BIND_POINT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipeline*")
	public long pipeline() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PIPELINE_OFFSET);
	}
	
	@NativeType("VkPipeline*")
	public VkGeneratedCommandsInfoNV pipeline(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PIPELINE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndirectCommandsLayoutNV*")
	public long indirectCommandsLayout() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + INDIRECT_COMMANDS_LAYOUT_OFFSET);
	}
	
	@NativeType("VkIndirectCommandsLayoutNV*")
	public VkGeneratedCommandsInfoNV indirectCommandsLayout(long value) {
		LONG_HANDLE.set(this.segment, this.offset + INDIRECT_COMMANDS_LAYOUT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int streamCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STREAM_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkGeneratedCommandsInfoNV streamCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + STREAM_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkIndirectCommandsStreamNV*")
	public long pStreams() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_STREAMS_OFFSET);
	}
	
	@NativeType("VkIndirectCommandsStreamNV*")
	public VkGeneratedCommandsInfoNV pStreams(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_STREAMS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int sequencesCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SEQUENCES_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkGeneratedCommandsInfoNV sequencesCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + SEQUENCES_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBuffer*")
	public long preprocessBuffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PREPROCESS_BUFFER_OFFSET);
	}
	
	@NativeType("VkBuffer*")
	public VkGeneratedCommandsInfoNV preprocessBuffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PREPROCESS_BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long preprocessOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PREPROCESS_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeneratedCommandsInfoNV preprocessOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PREPROCESS_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long preprocessSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PREPROCESS_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeneratedCommandsInfoNV preprocessSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PREPROCESS_SIZE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public long sequencesCountBuffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SEQUENCES_COUNT_BUFFER_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public VkGeneratedCommandsInfoNV sequencesCountBuffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SEQUENCES_COUNT_BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long sequencesCountOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SEQUENCES_COUNT_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeneratedCommandsInfoNV sequencesCountOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SEQUENCES_COUNT_OFFSET_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public long sequencesIndexBuffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SEQUENCES_INDEX_BUFFER_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkBuffer*")
	public VkGeneratedCommandsInfoNV sequencesIndexBuffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SEQUENCES_INDEX_BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long sequencesIndexOffset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SEQUENCES_INDEX_OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkGeneratedCommandsInfoNV sequencesIndexOffset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SEQUENCES_INDEX_OFFSET_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkGeneratedCommandsInfoNV> {
		
		private static final StructConstructor<VkGeneratedCommandsInfoNV> CONSTRUCTOR = VkGeneratedCommandsInfoNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkGeneratedCommandsInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkGeneratedCommandsInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkGeneratedCommandsInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}