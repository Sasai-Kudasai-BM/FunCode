package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkIndirectCommandsPushConstantTokenEXT {
* 	VkPushConstantRange updateRange;
* };
*</pre>
**/
@AutoGenerated
public final class VkIndirectCommandsPushConstantTokenEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(VkPushConstantRange.MEMORY_LAYOUT);
	private static final int UPDATE_RANGE_OFFSET = 0;
	
	public VkIndirectCommandsPushConstantTokenEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsPushConstantTokenEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkIndirectCommandsPushConstantTokenEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkPushConstantRange")
	public VkPushConstantRange updateRange() {
		return new VkPushConstantRange(this.segment, this.offset + UPDATE_RANGE_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkIndirectCommandsPushConstantTokenEXT> {
		
		private static final StructConstructor<VkIndirectCommandsPushConstantTokenEXT> CONSTRUCTOR = VkIndirectCommandsPushConstantTokenEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkIndirectCommandsPushConstantTokenEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkIndirectCommandsPushConstantTokenEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkIndirectCommandsPushConstantTokenEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}