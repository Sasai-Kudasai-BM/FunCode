package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkTraceRaysIndirectCommand2KHR {
* 	VkDeviceAddress raygenShaderRecordAddress;
* 	VkDeviceSize raygenShaderRecordSize;
* 	VkDeviceAddress missShaderBindingTableAddress;
* 	VkDeviceSize missShaderBindingTableSize;
* 	VkDeviceSize missShaderBindingTableStride;
* 	VkDeviceAddress hitShaderBindingTableAddress;
* 	VkDeviceSize hitShaderBindingTableSize;
* 	VkDeviceSize hitShaderBindingTableStride;
* 	VkDeviceAddress callableShaderBindingTableAddress;
* 	VkDeviceSize callableShaderBindingTableSize;
* 	VkDeviceSize callableShaderBindingTableStride;
* 	uint32_t width;
* 	uint32_t height;
* 	uint32_t depth;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkTraceRaysIndirectCommand2KHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int RAYGEN_SHADER_RECORD_ADDRESS_OFFSET = 0;
	private static final int RAYGEN_SHADER_RECORD_SIZE_OFFSET = 8;
	private static final int MISS_SHADER_BINDING_TABLE_ADDRESS_OFFSET = 16;
	private static final int MISS_SHADER_BINDING_TABLE_SIZE_OFFSET = 24;
	private static final int MISS_SHADER_BINDING_TABLE_STRIDE_OFFSET = 32;
	private static final int HIT_SHADER_BINDING_TABLE_ADDRESS_OFFSET = 40;
	private static final int HIT_SHADER_BINDING_TABLE_SIZE_OFFSET = 48;
	private static final int HIT_SHADER_BINDING_TABLE_STRIDE_OFFSET = 56;
	private static final int CALLABLE_SHADER_BINDING_TABLE_ADDRESS_OFFSET = 64;
	private static final int CALLABLE_SHADER_BINDING_TABLE_SIZE_OFFSET = 72;
	private static final int CALLABLE_SHADER_BINDING_TABLE_STRIDE_OFFSET = 80;
	private static final int WIDTH_OFFSET = 88;
	private static final int HEIGHT_OFFSET = 92;
	private static final int DEPTH_OFFSET = 96;
	
	public VkTraceRaysIndirectCommand2KHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkTraceRaysIndirectCommand2KHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkTraceRaysIndirectCommand2KHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkDeviceAddress")
	public long raygenShaderRecordAddress() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + RAYGEN_SHADER_RECORD_ADDRESS_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkTraceRaysIndirectCommand2KHR raygenShaderRecordAddress(long value) {
		LONG_HANDLE.set(this.segment, this.offset + RAYGEN_SHADER_RECORD_ADDRESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long raygenShaderRecordSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + RAYGEN_SHADER_RECORD_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkTraceRaysIndirectCommand2KHR raygenShaderRecordSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + RAYGEN_SHADER_RECORD_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long missShaderBindingTableAddress() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MISS_SHADER_BINDING_TABLE_ADDRESS_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkTraceRaysIndirectCommand2KHR missShaderBindingTableAddress(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MISS_SHADER_BINDING_TABLE_ADDRESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long missShaderBindingTableSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MISS_SHADER_BINDING_TABLE_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkTraceRaysIndirectCommand2KHR missShaderBindingTableSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MISS_SHADER_BINDING_TABLE_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long missShaderBindingTableStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MISS_SHADER_BINDING_TABLE_STRIDE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkTraceRaysIndirectCommand2KHR missShaderBindingTableStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MISS_SHADER_BINDING_TABLE_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long hitShaderBindingTableAddress() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + HIT_SHADER_BINDING_TABLE_ADDRESS_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkTraceRaysIndirectCommand2KHR hitShaderBindingTableAddress(long value) {
		LONG_HANDLE.set(this.segment, this.offset + HIT_SHADER_BINDING_TABLE_ADDRESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long hitShaderBindingTableSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + HIT_SHADER_BINDING_TABLE_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkTraceRaysIndirectCommand2KHR hitShaderBindingTableSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + HIT_SHADER_BINDING_TABLE_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long hitShaderBindingTableStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + HIT_SHADER_BINDING_TABLE_STRIDE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkTraceRaysIndirectCommand2KHR hitShaderBindingTableStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + HIT_SHADER_BINDING_TABLE_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long callableShaderBindingTableAddress() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + CALLABLE_SHADER_BINDING_TABLE_ADDRESS_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkTraceRaysIndirectCommand2KHR callableShaderBindingTableAddress(long value) {
		LONG_HANDLE.set(this.segment, this.offset + CALLABLE_SHADER_BINDING_TABLE_ADDRESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long callableShaderBindingTableSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + CALLABLE_SHADER_BINDING_TABLE_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkTraceRaysIndirectCommand2KHR callableShaderBindingTableSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + CALLABLE_SHADER_BINDING_TABLE_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long callableShaderBindingTableStride() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + CALLABLE_SHADER_BINDING_TABLE_STRIDE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkTraceRaysIndirectCommand2KHR callableShaderBindingTableStride(long value) {
		LONG_HANDLE.set(this.segment, this.offset + CALLABLE_SHADER_BINDING_TABLE_STRIDE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int width() {
		return (int) INT_HANDLE.get(this.segment, this.offset + WIDTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkTraceRaysIndirectCommand2KHR width(int value) {
		INT_HANDLE.set(this.segment, this.offset + WIDTH_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int height() {
		return (int) INT_HANDLE.get(this.segment, this.offset + HEIGHT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkTraceRaysIndirectCommand2KHR height(int value) {
		INT_HANDLE.set(this.segment, this.offset + HEIGHT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int depth() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkTraceRaysIndirectCommand2KHR depth(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkTraceRaysIndirectCommand2KHR> {
		
		private static final StructConstructor<VkTraceRaysIndirectCommand2KHR> CONSTRUCTOR = VkTraceRaysIndirectCommand2KHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkTraceRaysIndirectCommand2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkTraceRaysIndirectCommand2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkTraceRaysIndirectCommand2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}