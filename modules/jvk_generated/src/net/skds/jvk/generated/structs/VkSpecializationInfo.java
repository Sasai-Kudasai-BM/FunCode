package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSpecializationInfo {
* 	uint32_t mapEntryCount;
* 	// pad (4)
* 	VkSpecializationMapEntry* pMapEntries;
* 	size_t dataSize;
* 	void* pData;
* };
*</pre>
**/
@AutoGenerated
public final class VkSpecializationInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int MAP_ENTRY_COUNT_OFFSET = 0;
	private static final int P_MAP_ENTRIES_OFFSET = 8;
	private static final int DATA_SIZE_OFFSET = 16;
	private static final int P_DATA_OFFSET = 24;
	
	public VkSpecializationInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSpecializationInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSpecializationInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** optional **/
	@NativeType("uint32_t")
	public int mapEntryCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAP_ENTRY_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkSpecializationInfo mapEntryCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAP_ENTRY_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSpecializationMapEntry*")
	public long pMapEntries() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_MAP_ENTRIES_OFFSET);
	}
	
	@NativeType("VkSpecializationMapEntry*")
	public VkSpecializationInfo pMapEntries(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_MAP_ENTRIES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("size_t")
	public long dataSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DATA_SIZE_OFFSET);
	}
	
	/** optional **/
	@NativeType("size_t")
	public VkSpecializationInfo dataSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DATA_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("void*")
	public long pData() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_DATA_OFFSET);
	}
	
	@NativeType("void*")
	public VkSpecializationInfo pData(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_DATA_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSpecializationInfo> {
		
		private static final StructConstructor<VkSpecializationInfo> CONSTRUCTOR = VkSpecializationInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSpecializationInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSpecializationInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSpecializationInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}