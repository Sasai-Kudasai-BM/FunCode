package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkVideoEncodeH264CapabilitiesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkVideoEncodeH264CapabilityFlagsEXT flags;
* 	VkVideoEncodeH264InputModeFlagsEXT inputModeFlags;
* 	VkVideoEncodeH264OutputModeFlagsEXT outputModeFlags;
* 	uint8_t maxPPictureL0ReferenceCount;
* 	uint8_t maxBPictureL0ReferenceCount;
* 	uint8_t maxL1ReferenceCount;
* 	// pad (1)
* 	VkBool32 motionVectorsOverPicBoundariesFlag;
* 	uint32_t maxBytesPerPicDenom;
* 	uint32_t maxBitsPerMbDenom;
* 	uint32_t log2MaxMvLengthHorizontal;
* 	uint32_t log2MaxMvLengthVertical;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkVideoEncodeH264CapabilitiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_BYTE,
			JAVA_BYTE,
			JAVA_BYTE,
			paddingLayout(1),
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int INPUT_MODE_FLAGS_OFFSET = 20;
	private static final int OUTPUT_MODE_FLAGS_OFFSET = 24;
	private static final int MAX_PPICTURE_L0_REFERENCE_COUNT_OFFSET = 28;
	private static final int MAX_BPICTURE_L0_REFERENCE_COUNT_OFFSET = 29;
	private static final int MAX_L1_REFERENCE_COUNT_OFFSET = 30;
	private static final int MOTION_VECTORS_OVER_PIC_BOUNDARIES_FLAG_OFFSET = 32;
	private static final int MAX_BYTES_PER_PIC_DENOM_OFFSET = 36;
	private static final int MAX_BITS_PER_MB_DENOM_OFFSET = 40;
	private static final int LOG2_MAX_MV_LENGTH_HORIZONTAL_OFFSET = 44;
	private static final int LOG2_MAX_MV_LENGTH_VERTICAL_OFFSET = 48;
	
	public VkVideoEncodeH264CapabilitiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeH264CapabilitiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkVideoEncodeH264CapabilitiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT **/
	@NativeType("VkStructureType")
	public VkVideoEncodeH264CapabilitiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT **/
	@NativeType("VkStructureType")
	public VkVideoEncodeH264CapabilitiesEXT sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 0);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkVideoEncodeH264CapabilitiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH264CapabilityFlagsEXT")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH264CapabilityFlagsEXT")
	public VkVideoEncodeH264CapabilitiesEXT flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH264InputModeFlagsEXT")
	public int inputModeFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INPUT_MODE_FLAGS_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH264InputModeFlagsEXT")
	public VkVideoEncodeH264CapabilitiesEXT inputModeFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + INPUT_MODE_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkVideoEncodeH264OutputModeFlagsEXT")
	public int outputModeFlags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + OUTPUT_MODE_FLAGS_OFFSET);
	}
	
	@NativeType("VkVideoEncodeH264OutputModeFlagsEXT")
	public VkVideoEncodeH264CapabilitiesEXT outputModeFlags(int value) {
		INT_HANDLE.set(this.segment, this.offset + OUTPUT_MODE_FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxPPictureL0ReferenceCount() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_PPICTURE_L0_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH264CapabilitiesEXT maxPPictureL0ReferenceCount(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_PPICTURE_L0_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxBPictureL0ReferenceCount() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_BPICTURE_L0_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH264CapabilitiesEXT maxBPictureL0ReferenceCount(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_BPICTURE_L0_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint8_t")
	public byte maxL1ReferenceCount() {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + MAX_L1_REFERENCE_COUNT_OFFSET);
	}
	
	@NativeType("uint8_t")
	public VkVideoEncodeH264CapabilitiesEXT maxL1ReferenceCount(byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + MAX_L1_REFERENCE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int motionVectorsOverPicBoundariesFlag() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MOTION_VECTORS_OVER_PIC_BOUNDARIES_FLAG_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkVideoEncodeH264CapabilitiesEXT motionVectorsOverPicBoundariesFlag(int value) {
		INT_HANDLE.set(this.segment, this.offset + MOTION_VECTORS_OVER_PIC_BOUNDARIES_FLAG_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxBytesPerPicDenom() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_BYTES_PER_PIC_DENOM_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeH264CapabilitiesEXT maxBytesPerPicDenom(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_BYTES_PER_PIC_DENOM_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxBitsPerMbDenom() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_BITS_PER_MB_DENOM_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeH264CapabilitiesEXT maxBitsPerMbDenom(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_BITS_PER_MB_DENOM_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int log2MaxMvLengthHorizontal() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LOG2_MAX_MV_LENGTH_HORIZONTAL_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeH264CapabilitiesEXT log2MaxMvLengthHorizontal(int value) {
		INT_HANDLE.set(this.segment, this.offset + LOG2_MAX_MV_LENGTH_HORIZONTAL_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int log2MaxMvLengthVertical() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LOG2_MAX_MV_LENGTH_VERTICAL_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkVideoEncodeH264CapabilitiesEXT log2MaxMvLengthVertical(int value) {
		INT_HANDLE.set(this.segment, this.offset + LOG2_MAX_MV_LENGTH_VERTICAL_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkVideoEncodeH264CapabilitiesEXT> {
		
		private static final StructConstructor<VkVideoEncodeH264CapabilitiesEXT> CONSTRUCTOR = VkVideoEncodeH264CapabilitiesEXT::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkVideoEncodeH264CapabilitiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkVideoEncodeH264CapabilitiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkVideoEncodeH264CapabilitiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}