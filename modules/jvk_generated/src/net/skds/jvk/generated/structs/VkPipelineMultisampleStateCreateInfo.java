package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPipelineMultisampleStateCreateInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkPipelineMultisampleStateCreateFlags flags;
* 	VkSampleCountFlagBits rasterizationSamples;
* 	VkBool32 sampleShadingEnable;
* 	float minSampleShading;
* 	VkSampleMask* pSampleMask;
* 	VkBool32 alphaToCoverageEnable;
* 	VkBool32 alphaToOneEnable;
* };
*</pre>
**/
@AutoGenerated
public final class VkPipelineMultisampleStateCreateInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_FLOAT,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int RASTERIZATION_SAMPLES_OFFSET = 20;
	private static final int SAMPLE_SHADING_ENABLE_OFFSET = 24;
	private static final int MIN_SAMPLE_SHADING_OFFSET = 28;
	private static final int P_SAMPLE_MASK_OFFSET = 32;
	private static final int ALPHA_TO_COVERAGE_ENABLE_OFFSET = 40;
	private static final int ALPHA_TO_ONE_ENABLE_OFFSET = 44;
	
	public VkPipelineMultisampleStateCreateInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineMultisampleStateCreateInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineMultisampleStateCreateInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineMultisampleStateCreateInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineMultisampleStateCreateInfo sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 24);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPipelineMultisampleStateCreateInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineMultisampleStateCreateFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineMultisampleStateCreateFlags")
	public VkPipelineMultisampleStateCreateInfo flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSampleCountFlagBits")
	public int rasterizationSamples() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RASTERIZATION_SAMPLES_OFFSET);
	}
	
	@NativeType("VkSampleCountFlagBits")
	public VkPipelineMultisampleStateCreateInfo rasterizationSamples(int value) {
		INT_HANDLE.set(this.segment, this.offset + RASTERIZATION_SAMPLES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean sampleShadingEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLE_SHADING_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineMultisampleStateCreateInfo sampleShadingEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLE_SHADING_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("float")
	public float minSampleShading() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MIN_SAMPLE_SHADING_OFFSET);
	}
	
	@NativeType("float")
	public VkPipelineMultisampleStateCreateInfo minSampleShading(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MIN_SAMPLE_SHADING_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleMask*")
	public long pSampleMask() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_SAMPLE_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleMask*")
	public VkPipelineMultisampleStateCreateInfo pSampleMask(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_SAMPLE_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean alphaToCoverageEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ALPHA_TO_COVERAGE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineMultisampleStateCreateInfo alphaToCoverageEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + ALPHA_TO_COVERAGE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean alphaToOneEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + ALPHA_TO_ONE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineMultisampleStateCreateInfo alphaToOneEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + ALPHA_TO_ONE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPipelineMultisampleStateCreateInfo> {
		
		private static final StructConstructor<VkPipelineMultisampleStateCreateInfo> CONSTRUCTOR = VkPipelineMultisampleStateCreateInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPipelineMultisampleStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPipelineMultisampleStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPipelineMultisampleStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}