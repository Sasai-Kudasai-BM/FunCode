package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPastPresentationTimingGOOGLE {
* 	uint32_t presentID;
* 	// pad (4)
* 	uint64_t desiredPresentTime;
* 	uint64_t actualPresentTime;
* 	uint64_t earliestPresentTime;
* 	uint64_t presentMargin;
* };
*</pre>
**/
@AutoGenerated
public final class VkPastPresentationTimingGOOGLE extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int PRESENT_ID_OFFSET = 0;
	private static final int DESIRED_PRESENT_TIME_OFFSET = 8;
	private static final int ACTUAL_PRESENT_TIME_OFFSET = 16;
	private static final int EARLIEST_PRESENT_TIME_OFFSET = 24;
	private static final int PRESENT_MARGIN_OFFSET = 32;
	
	public VkPastPresentationTimingGOOGLE() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPastPresentationTimingGOOGLE(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPastPresentationTimingGOOGLE(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int presentID() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PRESENT_ID_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPastPresentationTimingGOOGLE presentID(int value) {
		INT_HANDLE.set(this.segment, this.offset + PRESENT_ID_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long desiredPresentTime() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DESIRED_PRESENT_TIME_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkPastPresentationTimingGOOGLE desiredPresentTime(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DESIRED_PRESENT_TIME_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long actualPresentTime() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + ACTUAL_PRESENT_TIME_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkPastPresentationTimingGOOGLE actualPresentTime(long value) {
		LONG_HANDLE.set(this.segment, this.offset + ACTUAL_PRESENT_TIME_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long earliestPresentTime() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + EARLIEST_PRESENT_TIME_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkPastPresentationTimingGOOGLE earliestPresentTime(long value) {
		LONG_HANDLE.set(this.segment, this.offset + EARLIEST_PRESENT_TIME_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long presentMargin() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + PRESENT_MARGIN_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkPastPresentationTimingGOOGLE presentMargin(long value) {
		LONG_HANDLE.set(this.segment, this.offset + PRESENT_MARGIN_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPastPresentationTimingGOOGLE> {
		
		private static final StructConstructor<VkPastPresentationTimingGOOGLE> CONSTRUCTOR = VkPastPresentationTimingGOOGLE::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPastPresentationTimingGOOGLE[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPastPresentationTimingGOOGLE[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPastPresentationTimingGOOGLE[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}