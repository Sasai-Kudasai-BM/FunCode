package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	float primitiveOverestimationSize;
* 	float maxExtraPrimitiveOverestimationSize;
* 	float extraPrimitiveOverestimationSizeGranularity;
* 	VkBool32 primitiveUnderestimation;
* 	VkBool32 conservativePointAndLineRasterization;
* 	VkBool32 degenerateTrianglesRasterized;
* 	VkBool32 degenerateLinesRasterized;
* 	VkBool32 fullyCoveredFragmentShaderInputVariable;
* 	VkBool32 conservativeRasterizationPostDepthCoverage;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceConservativeRasterizationPropertiesEXT extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_FLOAT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int PRIMITIVE_OVERESTIMATION_SIZE_OFFSET = 16;
	private static final int MAX_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_OFFSET = 20;
	private static final int EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_GRANULARITY_OFFSET = 24;
	private static final int PRIMITIVE_UNDERESTIMATION_OFFSET = 28;
	private static final int CONSERVATIVE_POINT_AND_LINE_RASTERIZATION_OFFSET = 32;
	private static final int DEGENERATE_TRIANGLES_RASTERIZED_OFFSET = 36;
	private static final int DEGENERATE_LINES_RASTERIZED_OFFSET = 40;
	private static final int FULLY_COVERED_FRAGMENT_SHADER_INPUT_VARIABLE_OFFSET = 44;
	private static final int CONSERVATIVE_RASTERIZATION_POST_DEPTH_COVERAGE_OFFSET = 48;
	
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 0);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float primitiveOverestimationSize() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + PRIMITIVE_OVERESTIMATION_SIZE_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT primitiveOverestimationSize(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + PRIMITIVE_OVERESTIMATION_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float maxExtraPrimitiveOverestimationSize() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT maxExtraPrimitiveOverestimationSize(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float extraPrimitiveOverestimationSizeGranularity() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_GRANULARITY_OFFSET);
	}
	
	@NativeType("float")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT extraPrimitiveOverestimationSizeGranularity(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_GRANULARITY_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int primitiveUnderestimation() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PRIMITIVE_UNDERESTIMATION_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT primitiveUnderestimation(int value) {
		INT_HANDLE.set(this.segment, this.offset + PRIMITIVE_UNDERESTIMATION_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int conservativePointAndLineRasterization() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CONSERVATIVE_POINT_AND_LINE_RASTERIZATION_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT conservativePointAndLineRasterization(int value) {
		INT_HANDLE.set(this.segment, this.offset + CONSERVATIVE_POINT_AND_LINE_RASTERIZATION_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int degenerateTrianglesRasterized() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEGENERATE_TRIANGLES_RASTERIZED_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT degenerateTrianglesRasterized(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEGENERATE_TRIANGLES_RASTERIZED_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int degenerateLinesRasterized() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEGENERATE_LINES_RASTERIZED_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT degenerateLinesRasterized(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEGENERATE_LINES_RASTERIZED_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int fullyCoveredFragmentShaderInputVariable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FULLY_COVERED_FRAGMENT_SHADER_INPUT_VARIABLE_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT fullyCoveredFragmentShaderInputVariable(int value) {
		INT_HANDLE.set(this.segment, this.offset + FULLY_COVERED_FRAGMENT_SHADER_INPUT_VARIABLE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int conservativeRasterizationPostDepthCoverage() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CONSERVATIVE_RASTERIZATION_POST_DEPTH_COVERAGE_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT conservativeRasterizationPostDepthCoverage(int value) {
		INT_HANDLE.set(this.segment, this.offset + CONSERVATIVE_RASTERIZATION_POST_DEPTH_COVERAGE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceConservativeRasterizationPropertiesEXT> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceConservativeRasterizationPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceConservativeRasterizationPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceConservativeRasterizationPropertiesEXT[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}