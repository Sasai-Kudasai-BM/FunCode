package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPipelineDepthStencilStateCreateInfo {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkPipelineDepthStencilStateCreateFlags flags;
* 	VkBool32 depthTestEnable;
* 	VkBool32 depthWriteEnable;
* 	VkCompareOp depthCompareOp;
* 	VkBool32 depthBoundsTestEnable;
* 	VkBool32 stencilTestEnable;
* 	VkStencilOpState front;
* 	VkStencilOpState back;
* 	float minDepthBounds;
* 	float maxDepthBounds;
* };
*</pre>
**/
@AutoGenerated
public final class VkPipelineDepthStencilStateCreateInfo extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkStencilOpState.MEMORY_LAYOUT,
			VkStencilOpState.MEMORY_LAYOUT,
			JAVA_FLOAT,
			JAVA_FLOAT
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int DEPTH_TEST_ENABLE_OFFSET = 20;
	private static final int DEPTH_WRITE_ENABLE_OFFSET = 24;
	private static final int DEPTH_COMPARE_OP_OFFSET = 28;
	private static final int DEPTH_BOUNDS_TEST_ENABLE_OFFSET = 32;
	private static final int STENCIL_TEST_ENABLE_OFFSET = 36;
	private static final int FRONT_OFFSET = 40;
	private static final int BACK_OFFSET = 68;
	private static final int MIN_DEPTH_BOUNDS_OFFSET = 96;
	private static final int MAX_DEPTH_BOUNDS_OFFSET = 100;
	
	public VkPipelineDepthStencilStateCreateInfo() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineDepthStencilStateCreateInfo(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPipelineDepthStencilStateCreateInfo(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineDepthStencilStateCreateInfo sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO **/
	@NativeType("VkStructureType")
	public VkPipelineDepthStencilStateCreateInfo sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 25);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPipelineDepthStencilStateCreateInfo pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineDepthStencilStateCreateFlags")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineDepthStencilStateCreateFlags")
	public VkPipelineDepthStencilStateCreateInfo flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean depthTestEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_TEST_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineDepthStencilStateCreateInfo depthTestEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_TEST_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean depthWriteEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_WRITE_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineDepthStencilStateCreateInfo depthWriteEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_WRITE_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkCompareOp")
	public int depthCompareOp() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_COMPARE_OP_OFFSET);
	}
	
	@NativeType("VkCompareOp")
	public VkPipelineDepthStencilStateCreateInfo depthCompareOp(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_COMPARE_OP_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean depthBoundsTestEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_BOUNDS_TEST_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineDepthStencilStateCreateInfo depthBoundsTestEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_BOUNDS_TEST_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean stencilTestEnable() {
		return (int) INT_HANDLE.get(this.segment, this.offset + STENCIL_TEST_ENABLE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPipelineDepthStencilStateCreateInfo stencilTestEnable(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + STENCIL_TEST_ENABLE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkStencilOpState")
	public VkStencilOpState front() {
		return new VkStencilOpState(this.segment, this.offset + FRONT_OFFSET);
	}
	
	@NativeType("VkStencilOpState")
	public VkStencilOpState back() {
		return new VkStencilOpState(this.segment, this.offset + BACK_OFFSET);
	}
	
	@NativeType("float")
	public float minDepthBounds() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MIN_DEPTH_BOUNDS_OFFSET);
	}
	
	@NativeType("float")
	public VkPipelineDepthStencilStateCreateInfo minDepthBounds(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MIN_DEPTH_BOUNDS_OFFSET, value);
		return this;
	}
	
	@NativeType("float")
	public float maxDepthBounds() {
		return (float) FLOAT_HANDLE.get(this.segment, this.offset + MAX_DEPTH_BOUNDS_OFFSET);
	}
	
	@NativeType("float")
	public VkPipelineDepthStencilStateCreateInfo maxDepthBounds(float value) {
		FLOAT_HANDLE.set(this.segment, this.offset + MAX_DEPTH_BOUNDS_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPipelineDepthStencilStateCreateInfo> {
		
		private static final StructConstructor<VkPipelineDepthStencilStateCreateInfo> CONSTRUCTOR = VkPipelineDepthStencilStateCreateInfo::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPipelineDepthStencilStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPipelineDepthStencilStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPipelineDepthStencilStateCreateInfo[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}