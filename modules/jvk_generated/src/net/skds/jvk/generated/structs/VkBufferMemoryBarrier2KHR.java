package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkBufferMemoryBarrier2 {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkPipelineStageFlags2 srcStageMask;
* 	VkAccessFlags2 srcAccessMask;
* 	VkPipelineStageFlags2 dstStageMask;
* 	VkAccessFlags2 dstAccessMask;
* 	uint32_t srcQueueFamilyIndex;
* 	uint32_t dstQueueFamilyIndex;
* 	VkBuffer* buffer;
* 	VkDeviceSize offset;
* 	VkDeviceSize size;
* };
*</pre>
**/
@AutoGenerated
public final class VkBufferMemoryBarrier2KHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_LONG,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int SRC_STAGE_MASK_OFFSET = 16;
	private static final int SRC_ACCESS_MASK_OFFSET = 24;
	private static final int DST_STAGE_MASK_OFFSET = 32;
	private static final int DST_ACCESS_MASK_OFFSET = 40;
	private static final int SRC_QUEUE_FAMILY_INDEX_OFFSET = 48;
	private static final int DST_QUEUE_FAMILY_INDEX_OFFSET = 52;
	private static final int BUFFER_OFFSET = 56;
	private static final int OFFSET_OFFSET = 64;
	private static final int SIZE_OFFSET = 72;
	
	public VkBufferMemoryBarrier2KHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkBufferMemoryBarrier2KHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkBufferMemoryBarrier2KHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 **/
	@NativeType("VkStructureType")
	public VkBufferMemoryBarrier2KHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 **/
	@NativeType("VkStructureType")
	public VkBufferMemoryBarrier2KHR sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 1);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkBufferMemoryBarrier2KHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags2")
	public long srcStageMask() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SRC_STAGE_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags2")
	public VkBufferMemoryBarrier2KHR srcStageMask(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SRC_STAGE_MASK_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkAccessFlags2")
	public long srcAccessMask() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SRC_ACCESS_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAccessFlags2")
	public VkBufferMemoryBarrier2KHR srcAccessMask(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SRC_ACCESS_MASK_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags2")
	public long dstStageMask() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DST_STAGE_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkPipelineStageFlags2")
	public VkBufferMemoryBarrier2KHR dstStageMask(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DST_STAGE_MASK_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkAccessFlags2")
	public long dstAccessMask() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + DST_ACCESS_MASK_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkAccessFlags2")
	public VkBufferMemoryBarrier2KHR dstAccessMask(long value) {
		LONG_HANDLE.set(this.segment, this.offset + DST_ACCESS_MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int srcQueueFamilyIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SRC_QUEUE_FAMILY_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkBufferMemoryBarrier2KHR srcQueueFamilyIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + SRC_QUEUE_FAMILY_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int dstQueueFamilyIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DST_QUEUE_FAMILY_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkBufferMemoryBarrier2KHR dstQueueFamilyIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + DST_QUEUE_FAMILY_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBuffer*")
	public long buffer() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + BUFFER_OFFSET);
	}
	
	@NativeType("VkBuffer*")
	public VkBufferMemoryBarrier2KHR buffer(long value) {
		LONG_HANDLE.set(this.segment, this.offset + BUFFER_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long offset() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OFFSET_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkBufferMemoryBarrier2KHR offset(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long size() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkBufferMemoryBarrier2KHR size(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SIZE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkBufferMemoryBarrier2KHR> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkBufferMemoryBarrier2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkBufferMemoryBarrier2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkBufferMemoryBarrier2KHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}