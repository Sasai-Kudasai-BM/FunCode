package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkAccelerationStructureInstanceKHR {
* 	VkTransformMatrixKHR transform;
* 	uint32_t instanceCustomIndex;
* 	uint32_t mask;
* 	uint32_t instanceShaderBindingTableRecordOffset;
* 	VkGeometryInstanceFlagsKHR flags;
* 	uint64_t accelerationStructureReference;
* };
*</pre>
**/
@AutoGenerated
public final class VkAccelerationStructureInstanceKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkTransformMatrixKHR.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG
	);
	private static final int TRANSFORM_OFFSET = 0;
	private static final int INSTANCE_CUSTOM_INDEX_OFFSET = 48;
	private static final int MASK_OFFSET = 52;
	private static final int INSTANCE_SHADER_BINDING_TABLE_RECORD_OFFSET_OFFSET = 56;
	private static final int FLAGS_OFFSET = 60;
	private static final int ACCELERATION_STRUCTURE_REFERENCE_OFFSET = 64;
	
	public VkAccelerationStructureInstanceKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAccelerationStructureInstanceKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkAccelerationStructureInstanceKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkTransformMatrixKHR")
	public VkTransformMatrixKHR transform() {
		return new VkTransformMatrixKHR(this.segment, this.offset + TRANSFORM_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int instanceCustomIndex() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INSTANCE_CUSTOM_INDEX_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkAccelerationStructureInstanceKHR instanceCustomIndex(int value) {
		INT_HANDLE.set(this.segment, this.offset + INSTANCE_CUSTOM_INDEX_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int mask() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MASK_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkAccelerationStructureInstanceKHR mask(int value) {
		INT_HANDLE.set(this.segment, this.offset + MASK_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int instanceShaderBindingTableRecordOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + INSTANCE_SHADER_BINDING_TABLE_RECORD_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkAccelerationStructureInstanceKHR instanceShaderBindingTableRecordOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + INSTANCE_SHADER_BINDING_TABLE_RECORD_OFFSET_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkGeometryInstanceFlagsKHR")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkGeometryInstanceFlagsKHR")
	public VkAccelerationStructureInstanceKHR flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint64_t")
	public long accelerationStructureReference() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + ACCELERATION_STRUCTURE_REFERENCE_OFFSET);
	}
	
	@NativeType("uint64_t")
	public VkAccelerationStructureInstanceKHR accelerationStructureReference(long value) {
		LONG_HANDLE.set(this.segment, this.offset + ACCELERATION_STRUCTURE_REFERENCE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkAccelerationStructureInstanceKHR> {
		
		private static final StructConstructor<VkAccelerationStructureInstanceKHR> CONSTRUCTOR = VkAccelerationStructureInstanceKHR::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkAccelerationStructureInstanceKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkAccelerationStructureInstanceKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkAccelerationStructureInstanceKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}