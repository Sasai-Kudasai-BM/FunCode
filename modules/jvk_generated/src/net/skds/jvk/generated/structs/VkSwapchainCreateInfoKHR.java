package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkSwapchainCreateInfoKHR {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	VkSwapchainCreateFlagsKHR flags;
* 	// pad (4)
* 	VkSurfaceKHR* surface;
* 	uint32_t minImageCount;
* 	VkFormat imageFormat;
* 	VkColorSpaceKHR imageColorSpace;
* 	VkExtent2D imageExtent;
* 	uint32_t imageArrayLayers;
* 	VkImageUsageFlags imageUsage;
* 	VkSharingMode imageSharingMode;
* 	uint32_t queueFamilyIndexCount;
* 	// pad (4)
* 	uint32_t* pQueueFamilyIndices;
* 	VkSurfaceTransformFlagBitsKHR preTransform;
* 	VkCompositeAlphaFlagBitsKHR compositeAlpha;
* 	VkPresentModeKHR presentMode;
* 	VkBool32 clipped;
* 	VkSwapchainKHR* oldSwapchain;
* };
*</pre>
**/
@AutoGenerated
public final class VkSwapchainCreateInfoKHR extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			VkExtent2D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int FLAGS_OFFSET = 16;
	private static final int SURFACE_OFFSET = 24;
	private static final int MIN_IMAGE_COUNT_OFFSET = 32;
	private static final int IMAGE_FORMAT_OFFSET = 36;
	private static final int IMAGE_COLOR_SPACE_OFFSET = 40;
	private static final int IMAGE_ARRAY_LAYERS_OFFSET = 52;
	private static final int IMAGE_USAGE_OFFSET = 56;
	private static final int IMAGE_SHARING_MODE_OFFSET = 60;
	private static final int QUEUE_FAMILY_INDEX_COUNT_OFFSET = 64;
	private static final int P_QUEUE_FAMILY_INDICES_OFFSET = 72;
	private static final int PRE_TRANSFORM_OFFSET = 80;
	private static final int COMPOSITE_ALPHA_OFFSET = 84;
	private static final int PRESENT_MODE_OFFSET = 88;
	private static final int CLIPPED_OFFSET = 92;
	private static final int OLD_SWAPCHAIN_OFFSET = 96;
	
	public VkSwapchainCreateInfoKHR() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSwapchainCreateInfoKHR(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkSwapchainCreateInfoKHR(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkSwapchainCreateInfoKHR sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR **/
	@NativeType("VkStructureType")
	public VkSwapchainCreateInfoKHR sType$Default() {
		INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET, 0);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkSwapchainCreateInfoKHR pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSwapchainCreateFlagsKHR")
	public int flags() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FLAGS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSwapchainCreateFlagsKHR")
	public VkSwapchainCreateInfoKHR flags(int value) {
		INT_HANDLE.set(this.segment, this.offset + FLAGS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSurfaceKHR*")
	public long surface() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + SURFACE_OFFSET);
	}
	
	@NativeType("VkSurfaceKHR*")
	public VkSwapchainCreateInfoKHR surface(long value) {
		LONG_HANDLE.set(this.segment, this.offset + SURFACE_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int minImageCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MIN_IMAGE_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSwapchainCreateInfoKHR minImageCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MIN_IMAGE_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkFormat")
	public int imageFormat() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_FORMAT_OFFSET);
	}
	
	@NativeType("VkFormat")
	public VkSwapchainCreateInfoKHR imageFormat(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_FORMAT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkColorSpaceKHR")
	public int imageColorSpace() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_COLOR_SPACE_OFFSET);
	}
	
	@NativeType("VkColorSpaceKHR")
	public VkSwapchainCreateInfoKHR imageColorSpace(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_COLOR_SPACE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkExtent2D")
	public VkExtent2D imageExtent() {
		return new VkExtent2D(this.segment, this.offset + IMAGE_EXTENT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int imageArrayLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_ARRAY_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkSwapchainCreateInfoKHR imageArrayLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_ARRAY_LAYERS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkImageUsageFlags")
	public int imageUsage() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_USAGE_OFFSET);
	}
	
	@NativeType("VkImageUsageFlags")
	public VkSwapchainCreateInfoKHR imageUsage(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_USAGE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSharingMode")
	public int imageSharingMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IMAGE_SHARING_MODE_OFFSET);
	}
	
	@NativeType("VkSharingMode")
	public VkSwapchainCreateInfoKHR imageSharingMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + IMAGE_SHARING_MODE_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int queueFamilyIndexCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + QUEUE_FAMILY_INDEX_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkSwapchainCreateInfoKHR queueFamilyIndexCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + QUEUE_FAMILY_INDEX_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t*")
	public long pQueueFamilyIndices() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_QUEUE_FAMILY_INDICES_OFFSET);
	}
	
	@NativeType("uint32_t*")
	public VkSwapchainCreateInfoKHR pQueueFamilyIndices(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_QUEUE_FAMILY_INDICES_OFFSET, value);
		return this;
	}
	
	@NativeType("VkSurfaceTransformFlagBitsKHR")
	public int preTransform() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PRE_TRANSFORM_OFFSET);
	}
	
	@NativeType("VkSurfaceTransformFlagBitsKHR")
	public VkSwapchainCreateInfoKHR preTransform(int value) {
		INT_HANDLE.set(this.segment, this.offset + PRE_TRANSFORM_OFFSET, value);
		return this;
	}
	
	@NativeType("VkCompositeAlphaFlagBitsKHR")
	public int compositeAlpha() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COMPOSITE_ALPHA_OFFSET);
	}
	
	@NativeType("VkCompositeAlphaFlagBitsKHR")
	public VkSwapchainCreateInfoKHR compositeAlpha(int value) {
		INT_HANDLE.set(this.segment, this.offset + COMPOSITE_ALPHA_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPresentModeKHR")
	public int presentMode() {
		return (int) INT_HANDLE.get(this.segment, this.offset + PRESENT_MODE_OFFSET);
	}
	
	@NativeType("VkPresentModeKHR")
	public VkSwapchainCreateInfoKHR presentMode(int value) {
		INT_HANDLE.set(this.segment, this.offset + PRESENT_MODE_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public int clipped() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CLIPPED_OFFSET);
	}
	
	@NativeType("VkBool32")
	public VkSwapchainCreateInfoKHR clipped(int value) {
		INT_HANDLE.set(this.segment, this.offset + CLIPPED_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSwapchainKHR*")
	public long oldSwapchain() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + OLD_SWAPCHAIN_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSwapchainKHR*")
	public VkSwapchainCreateInfoKHR oldSwapchain(long value) {
		LONG_HANDLE.set(this.segment, this.offset + OLD_SWAPCHAIN_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkSwapchainCreateInfoKHR> {
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkSwapchainCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkSwapchainCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkSwapchainCreateInfoKHR[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}