package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkPhysicalDeviceVulkan14Properties {
* 	VkStructureType sType;
* 	// pad (4)
* 	void* pNext;
* 	uint32_t lineSubPixelPrecisionBits;
* 	uint32_t maxVertexAttribDivisor;
* 	VkBool32 supportsNonZeroFirstInstance;
* 	uint32_t maxPushDescriptors;
* 	VkBool32 dynamicRenderingLocalReadDepthStencilAttachments;
* 	VkBool32 dynamicRenderingLocalReadMultisampledAttachments;
* 	VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
* 	VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
* 	VkBool32 depthStencilSwizzleOneSupport;
* 	VkBool32 polygonModePointSize;
* 	VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
* 	VkBool32 nonStrictWideLinesUseParallelogram;
* 	VkBool32 blockTexelViewCompatibleMultipleLayers;
* 	uint32_t maxCombinedImageSamplerDescriptorCount;
* 	VkBool32 fragmentShadingRateClampCombinerInputs;
* 	VkPipelineRobustnessBufferBehavior defaultRobustnessStorageBuffers;
* 	VkPipelineRobustnessBufferBehavior defaultRobustnessUniformBuffers;
* 	VkPipelineRobustnessBufferBehavior defaultRobustnessVertexInputs;
* 	VkPipelineRobustnessImageBehavior defaultRobustnessImages;
* 	uint32_t copySrcLayoutCount;
* 	VkImageLayout* pCopySrcLayouts;
* 	uint32_t copyDstLayoutCount;
* 	// pad (4)
* 	VkImageLayout* pCopyDstLayouts;
* 	uint8_t[16] optimalTilingLayoutUUID;
* 	VkBool32 identicalMemoryTypeRequirements;
* 	// pad (4)
* };
*</pre>
**/
@AutoGenerated
public final class VkPhysicalDeviceVulkan14Properties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			sequenceLayout(16, JAVA_BYTE),
			JAVA_INT,
			paddingLayout(4)
	);
	private static final int S_TYPE_OFFSET = 0;
	private static final int P_NEXT_OFFSET = 8;
	private static final int LINE_SUB_PIXEL_PRECISION_BITS_OFFSET = 16;
	private static final int MAX_VERTEX_ATTRIB_DIVISOR_OFFSET = 20;
	private static final int SUPPORTS_NON_ZERO_FIRST_INSTANCE_OFFSET = 24;
	private static final int MAX_PUSH_DESCRIPTORS_OFFSET = 28;
	private static final int DYNAMIC_RENDERING_LOCAL_READ_DEPTH_STENCIL_ATTACHMENTS_OFFSET = 32;
	private static final int DYNAMIC_RENDERING_LOCAL_READ_MULTISAMPLED_ATTACHMENTS_OFFSET = 36;
	private static final int EARLY_FRAGMENT_MULTISAMPLE_COVERAGE_AFTER_SAMPLE_COUNTING_OFFSET = 40;
	private static final int EARLY_FRAGMENT_SAMPLE_MASK_TEST_BEFORE_SAMPLE_COUNTING_OFFSET = 44;
	private static final int DEPTH_STENCIL_SWIZZLE_ONE_SUPPORT_OFFSET = 48;
	private static final int POLYGON_MODE_POINT_SIZE_OFFSET = 52;
	private static final int NON_STRICT_SINGLE_PIXEL_WIDE_LINES_USE_PARALLELOGRAM_OFFSET = 56;
	private static final int NON_STRICT_WIDE_LINES_USE_PARALLELOGRAM_OFFSET = 60;
	private static final int BLOCK_TEXEL_VIEW_COMPATIBLE_MULTIPLE_LAYERS_OFFSET = 64;
	private static final int MAX_COMBINED_IMAGE_SAMPLER_DESCRIPTOR_COUNT_OFFSET = 68;
	private static final int FRAGMENT_SHADING_RATE_CLAMP_COMBINER_INPUTS_OFFSET = 72;
	private static final int DEFAULT_ROBUSTNESS_STORAGE_BUFFERS_OFFSET = 76;
	private static final int DEFAULT_ROBUSTNESS_UNIFORM_BUFFERS_OFFSET = 80;
	private static final int DEFAULT_ROBUSTNESS_VERTEX_INPUTS_OFFSET = 84;
	private static final int DEFAULT_ROBUSTNESS_IMAGES_OFFSET = 88;
	private static final int COPY_SRC_LAYOUT_COUNT_OFFSET = 92;
	private static final int P_COPY_SRC_LAYOUTS_OFFSET = 96;
	private static final int COPY_DST_LAYOUT_COUNT_OFFSET = 104;
	private static final int P_COPY_DST_LAYOUTS_OFFSET = 112;
	private static final int OPTIMAL_TILING_LAYOUT_UUID_OFFSET = 120;
	private static final int IDENTICAL_MEMORY_TYPE_REQUIREMENTS_OFFSET = 136;
	
	public VkPhysicalDeviceVulkan14Properties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan14Properties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkPhysicalDeviceVulkan14Properties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES **/
	@NativeType("VkStructureType")
	public int sType() {
		return (int) INT_HANDLE.get(this.segment, this.offset + S_TYPE_OFFSET);
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan14Properties sType(int value) {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, value);
		return this;
	}
	
	/** values = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES **/
	@NativeType("VkStructureType")
	public VkPhysicalDeviceVulkan14Properties sType$Default() {
		INT_HANDLE.set(this.segment, this.offset + S_TYPE_OFFSET, 56);
		return this;
	}
	
	/** optional **/
	@NativeType("void*")
	public long pNext() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_NEXT_OFFSET);
	}
	
	/** optional **/
	@NativeType("void*")
	public VkPhysicalDeviceVulkan14Properties pNext(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_NEXT_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int lineSubPixelPrecisionBits() {
		return (int) INT_HANDLE.get(this.segment, this.offset + LINE_SUB_PIXEL_PRECISION_BITS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan14Properties lineSubPixelPrecisionBits(int value) {
		INT_HANDLE.set(this.segment, this.offset + LINE_SUB_PIXEL_PRECISION_BITS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxVertexAttribDivisor() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_VERTEX_ATTRIB_DIVISOR_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan14Properties maxVertexAttribDivisor(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_VERTEX_ATTRIB_DIVISOR_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean supportsNonZeroFirstInstance() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SUPPORTS_NON_ZERO_FIRST_INSTANCE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties supportsNonZeroFirstInstance(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + SUPPORTS_NON_ZERO_FIRST_INSTANCE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxPushDescriptors() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_PUSH_DESCRIPTORS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan14Properties maxPushDescriptors(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_PUSH_DESCRIPTORS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean dynamicRenderingLocalReadDepthStencilAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DYNAMIC_RENDERING_LOCAL_READ_DEPTH_STENCIL_ATTACHMENTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties dynamicRenderingLocalReadDepthStencilAttachments(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DYNAMIC_RENDERING_LOCAL_READ_DEPTH_STENCIL_ATTACHMENTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean dynamicRenderingLocalReadMultisampledAttachments() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DYNAMIC_RENDERING_LOCAL_READ_MULTISAMPLED_ATTACHMENTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties dynamicRenderingLocalReadMultisampledAttachments(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DYNAMIC_RENDERING_LOCAL_READ_MULTISAMPLED_ATTACHMENTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean earlyFragmentMultisampleCoverageAfterSampleCounting() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EARLY_FRAGMENT_MULTISAMPLE_COVERAGE_AFTER_SAMPLE_COUNTING_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties earlyFragmentMultisampleCoverageAfterSampleCounting(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EARLY_FRAGMENT_MULTISAMPLE_COVERAGE_AFTER_SAMPLE_COUNTING_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean earlyFragmentSampleMaskTestBeforeSampleCounting() {
		return (int) INT_HANDLE.get(this.segment, this.offset + EARLY_FRAGMENT_SAMPLE_MASK_TEST_BEFORE_SAMPLE_COUNTING_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties earlyFragmentSampleMaskTestBeforeSampleCounting(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + EARLY_FRAGMENT_SAMPLE_MASK_TEST_BEFORE_SAMPLE_COUNTING_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean depthStencilSwizzleOneSupport() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEPTH_STENCIL_SWIZZLE_ONE_SUPPORT_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties depthStencilSwizzleOneSupport(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + DEPTH_STENCIL_SWIZZLE_ONE_SUPPORT_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean polygonModePointSize() {
		return (int) INT_HANDLE.get(this.segment, this.offset + POLYGON_MODE_POINT_SIZE_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties polygonModePointSize(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + POLYGON_MODE_POINT_SIZE_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean nonStrictSinglePixelWideLinesUseParallelogram() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NON_STRICT_SINGLE_PIXEL_WIDE_LINES_USE_PARALLELOGRAM_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties nonStrictSinglePixelWideLinesUseParallelogram(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + NON_STRICT_SINGLE_PIXEL_WIDE_LINES_USE_PARALLELOGRAM_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean nonStrictWideLinesUseParallelogram() {
		return (int) INT_HANDLE.get(this.segment, this.offset + NON_STRICT_WIDE_LINES_USE_PARALLELOGRAM_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties nonStrictWideLinesUseParallelogram(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + NON_STRICT_WIDE_LINES_USE_PARALLELOGRAM_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean blockTexelViewCompatibleMultipleLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + BLOCK_TEXEL_VIEW_COMPATIBLE_MULTIPLE_LAYERS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties blockTexelViewCompatibleMultipleLayers(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + BLOCK_TEXEL_VIEW_COMPATIBLE_MULTIPLE_LAYERS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxCombinedImageSamplerDescriptorCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_COMBINED_IMAGE_SAMPLER_DESCRIPTOR_COUNT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan14Properties maxCombinedImageSamplerDescriptorCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_COMBINED_IMAGE_SAMPLER_DESCRIPTOR_COUNT_OFFSET, value);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean fragmentShadingRateClampCombinerInputs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + FRAGMENT_SHADING_RATE_CLAMP_COMBINER_INPUTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties fragmentShadingRateClampCombinerInputs(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + FRAGMENT_SHADING_RATE_CLAMP_COMBINER_INPUTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	@NativeType("VkPipelineRobustnessBufferBehavior")
	public int defaultRobustnessStorageBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEFAULT_ROBUSTNESS_STORAGE_BUFFERS_OFFSET);
	}
	
	@NativeType("VkPipelineRobustnessBufferBehavior")
	public VkPhysicalDeviceVulkan14Properties defaultRobustnessStorageBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEFAULT_ROBUSTNESS_STORAGE_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelineRobustnessBufferBehavior")
	public int defaultRobustnessUniformBuffers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEFAULT_ROBUSTNESS_UNIFORM_BUFFERS_OFFSET);
	}
	
	@NativeType("VkPipelineRobustnessBufferBehavior")
	public VkPhysicalDeviceVulkan14Properties defaultRobustnessUniformBuffers(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEFAULT_ROBUSTNESS_UNIFORM_BUFFERS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelineRobustnessBufferBehavior")
	public int defaultRobustnessVertexInputs() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEFAULT_ROBUSTNESS_VERTEX_INPUTS_OFFSET);
	}
	
	@NativeType("VkPipelineRobustnessBufferBehavior")
	public VkPhysicalDeviceVulkan14Properties defaultRobustnessVertexInputs(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEFAULT_ROBUSTNESS_VERTEX_INPUTS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkPipelineRobustnessImageBehavior")
	public int defaultRobustnessImages() {
		return (int) INT_HANDLE.get(this.segment, this.offset + DEFAULT_ROBUSTNESS_IMAGES_OFFSET);
	}
	
	@NativeType("VkPipelineRobustnessImageBehavior")
	public VkPhysicalDeviceVulkan14Properties defaultRobustnessImages(int value) {
		INT_HANDLE.set(this.segment, this.offset + DEFAULT_ROBUSTNESS_IMAGES_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int copySrcLayoutCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COPY_SRC_LAYOUT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan14Properties copySrcLayoutCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COPY_SRC_LAYOUT_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public long pCopySrcLayouts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_COPY_SRC_LAYOUTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public VkPhysicalDeviceVulkan14Properties pCopySrcLayouts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_COPY_SRC_LAYOUTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public int copyDstLayoutCount() {
		return (int) INT_HANDLE.get(this.segment, this.offset + COPY_DST_LAYOUT_COUNT_OFFSET);
	}
	
	/** optional **/
	@NativeType("uint32_t")
	public VkPhysicalDeviceVulkan14Properties copyDstLayoutCount(int value) {
		INT_HANDLE.set(this.segment, this.offset + COPY_DST_LAYOUT_COUNT_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public long pCopyDstLayouts() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + P_COPY_DST_LAYOUTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkImageLayout*")
	public VkPhysicalDeviceVulkan14Properties pCopyDstLayouts(long value) {
		LONG_HANDLE.set(this.segment, this.offset + P_COPY_DST_LAYOUTS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public byte optimalTilingLayoutUUID(int i) {
		return (byte) BYTE_HANDLE.get(this.segment, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET + JAVA_BYTE.byteSize() * i);
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public byte[] optimalTilingLayoutUUIDArray() {
		var array = new byte[16];
		MemorySegment.copy(this.segment, BYTE, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET, array, 0, array.length);
		return array;
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceVulkan14Properties optimalTilingLayoutUUID(int i, byte value) {
		BYTE_HANDLE.set(this.segment, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET + JAVA_BYTE.byteSize() * i, value);
		return this;
	}
	
	/** optional **/
	@NativeType("uint8_t[16]")
	public VkPhysicalDeviceVulkan14Properties optimalTilingLayoutUUID(byte[] value) {
		MemorySegment.copy(value, 0, this.segment, BYTE, this.offset + OPTIMAL_TILING_LAYOUT_UUID_OFFSET, value.length);
		return this;
	}
	
	@NativeType("VkBool32")
	public boolean identicalMemoryTypeRequirements() {
		return (int) INT_HANDLE.get(this.segment, this.offset + IDENTICAL_MEMORY_TYPE_REQUIREMENTS_OFFSET) != 0;
	}
	
	@NativeType("VkBool32")
	public VkPhysicalDeviceVulkan14Properties identicalMemoryTypeRequirements(boolean value) {
		INT_HANDLE.set(this.segment, this.offset + IDENTICAL_MEMORY_TYPE_REQUIREMENTS_OFFSET, value ? (int) 1 : (int) 0);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkPhysicalDeviceVulkan14Properties> {
		
		private static final StructConstructor<VkPhysicalDeviceVulkan14Properties> CONSTRUCTOR = VkPhysicalDeviceVulkan14Properties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkPhysicalDeviceVulkan14Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkPhysicalDeviceVulkan14Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkPhysicalDeviceVulkan14Properties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}