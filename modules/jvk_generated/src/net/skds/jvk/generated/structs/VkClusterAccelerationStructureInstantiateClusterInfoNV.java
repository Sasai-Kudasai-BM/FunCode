package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.SafeLinker.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkClusterAccelerationStructureInstantiateClusterInfoNV {
* 	uint32_t clusterIdOffset;
* 	uint32_t geometryIndexOffset;
* 	uint32_t reserved;
* 	// pad (4)
* 	VkDeviceAddress clusterTemplateAddress;
* 	VkStridedDeviceAddressNV vertexBuffer;
* };
*</pre>
**/
@AutoGenerated
public final class VkClusterAccelerationStructureInstantiateClusterInfoNV extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			paddingLayout(4),
			JAVA_LONG,
			VkStridedDeviceAddressNV.MEMORY_LAYOUT
	);
	private static final int CLUSTER_ID_OFFSET_OFFSET = 0;
	private static final int GEOMETRY_INDEX_OFFSET_OFFSET = 4;
	private static final int RESERVED_OFFSET = 8;
	private static final int CLUSTER_TEMPLATE_ADDRESS_OFFSET = 16;
	private static final int VERTEX_BUFFER_OFFSET = 24;
	
	public VkClusterAccelerationStructureInstantiateClusterInfoNV() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClusterAccelerationStructureInstantiateClusterInfoNV(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkClusterAccelerationStructureInstantiateClusterInfoNV(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("uint32_t")
	public int clusterIdOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + CLUSTER_ID_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureInstantiateClusterInfoNV clusterIdOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + CLUSTER_ID_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int geometryIndexOffset() {
		return (int) INT_HANDLE.get(this.segment, this.offset + GEOMETRY_INDEX_OFFSET_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureInstantiateClusterInfoNV geometryIndexOffset(int value) {
		INT_HANDLE.set(this.segment, this.offset + GEOMETRY_INDEX_OFFSET_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int reserved() {
		return (int) INT_HANDLE.get(this.segment, this.offset + RESERVED_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkClusterAccelerationStructureInstantiateClusterInfoNV reserved(int value) {
		INT_HANDLE.set(this.segment, this.offset + RESERVED_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceAddress")
	public long clusterTemplateAddress() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + CLUSTER_TEMPLATE_ADDRESS_OFFSET);
	}
	
	@NativeType("VkDeviceAddress")
	public VkClusterAccelerationStructureInstantiateClusterInfoNV clusterTemplateAddress(long value) {
		LONG_HANDLE.set(this.segment, this.offset + CLUSTER_TEMPLATE_ADDRESS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkStridedDeviceAddressNV")
	public VkStridedDeviceAddressNV vertexBuffer() {
		return new VkStridedDeviceAddressNV(this.segment, this.offset + VERTEX_BUFFER_OFFSET);
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkClusterAccelerationStructureInstantiateClusterInfoNV> {
		
		private static final StructConstructor<VkClusterAccelerationStructureInstantiateClusterInfoNV> CONSTRUCTOR = VkClusterAccelerationStructureInstantiateClusterInfoNV::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkClusterAccelerationStructureInstantiateClusterInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkClusterAccelerationStructureInstantiateClusterInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkClusterAccelerationStructureInstantiateClusterInfoNV[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}