package net.skds.jvk.generated.structs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import net.skds.jvk.StructConstructor;
import net.skds.jvk.VkStructArray;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;
import net.skds.lib2.natives.struct.CStruct;

import static java.lang.foreign.ValueLayout.*;
import static net.skds.lib2.natives.LinkerUtils.*;
import static java.lang.foreign.MemoryLayout.*;

/**
*<pre>
* C definition:
* struct VkImageFormatProperties {
* 	VkExtent3D maxExtent;
* 	uint32_t maxMipLevels;
* 	uint32_t maxArrayLayers;
* 	VkSampleCountFlags sampleCounts;
* 	VkDeviceSize maxResourceSize;
* };
*</pre>
**/
@AutoGenerated
public final class VkImageFormatProperties extends CStruct {
	
	public static final MemoryLayout MEMORY_LAYOUT = structLayout(
			VkExtent3D.MEMORY_LAYOUT,
			JAVA_INT,
			JAVA_INT,
			JAVA_INT,
			JAVA_LONG
	);
	private static final int MAX_EXTENT_OFFSET = 0;
	private static final int MAX_MIP_LEVELS_OFFSET = 12;
	private static final int MAX_ARRAY_LAYERS_OFFSET = 16;
	private static final int SAMPLE_COUNTS_OFFSET = 20;
	private static final int MAX_RESOURCE_SIZE_OFFSET = 24;
	
	public VkImageFormatProperties() {
		this.segment = Arena.ofAuto().allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkImageFormatProperties(Arena arena) {
		this.segment = arena.allocate(MEMORY_LAYOUT.byteSize());
	}
	
	public VkImageFormatProperties(MemorySegment segment, long offset) {
		super(segment, offset);
	}
	
	
	@NativeType("VkExtent3D")
	public VkExtent3D maxExtent() {
		return new VkExtent3D(this.segment, this.offset + MAX_EXTENT_OFFSET);
	}
	
	@NativeType("uint32_t")
	public int maxMipLevels() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_MIP_LEVELS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkImageFormatProperties maxMipLevels(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_MIP_LEVELS_OFFSET, value);
		return this;
	}
	
	@NativeType("uint32_t")
	public int maxArrayLayers() {
		return (int) INT_HANDLE.get(this.segment, this.offset + MAX_ARRAY_LAYERS_OFFSET);
	}
	
	@NativeType("uint32_t")
	public VkImageFormatProperties maxArrayLayers(int value) {
		INT_HANDLE.set(this.segment, this.offset + MAX_ARRAY_LAYERS_OFFSET, value);
		return this;
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public int sampleCounts() {
		return (int) INT_HANDLE.get(this.segment, this.offset + SAMPLE_COUNTS_OFFSET);
	}
	
	/** optional **/
	@NativeType("VkSampleCountFlags")
	public VkImageFormatProperties sampleCounts(int value) {
		INT_HANDLE.set(this.segment, this.offset + SAMPLE_COUNTS_OFFSET, value);
		return this;
	}
	
	@NativeType("VkDeviceSize")
	public long maxResourceSize() {
		return (long) LONG_HANDLE.get(this.segment, this.offset + MAX_RESOURCE_SIZE_OFFSET);
	}
	
	@NativeType("VkDeviceSize")
	public VkImageFormatProperties maxResourceSize(long value) {
		LONG_HANDLE.set(this.segment, this.offset + MAX_RESOURCE_SIZE_OFFSET, value);
		return this;
	}
	
	
	@AutoGenerated
	public static final class Array extends VkStructArray<VkImageFormatProperties> {
		
		private static final StructConstructor<VkImageFormatProperties> CONSTRUCTOR = VkImageFormatProperties::new;
		
		public Array(int size) {
			super(Arena.ofAuto(), new VkImageFormatProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(Arena arena, int size) {
			super(arena, new VkImageFormatProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
		public Array(MemorySegment segment, long offset, int size) {
			super(segment, offset, new VkImageFormatProperties[size], CONSTRUCTOR, MEMORY_LAYOUT);
		}
		
	}
	
	@Override
	public int getAlignment() {
		return (int) MEMORY_LAYOUT.byteAlignment();
	}
	
	@Override
	public int getSize() {
		return (int) MEMORY_LAYOUT.byteSize();
	}
	
}