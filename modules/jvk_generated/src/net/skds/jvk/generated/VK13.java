package net.skds.jvk.generated;

import java.lang.invoke.MethodHandle;
import net.skds.jvk.VkDefinitions;
import net.skds.jvk.annotation.NativeType;
import net.skds.lib2.annotations.AutoGenerated;

import static net.skds.lib2.natives.SafeLinker.*;

@AutoGenerated
public final class VK13 extends VK12 {
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54;
	
	// Promoted from VK_EXT_pipeline_creation_feedback (extension 193)
	
	public static final int VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 0;
	
	// Promoted from VK_KHR_shader_terminate_invocation (extension 216)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 0;
	
	// Promoted from VK_EXT_tooling_info (extension 246)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 0;
	private static final MethodHandle vkGetPhysicalDeviceToolProperties = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPhysicalDeviceToolProperties", INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS,VK_INCOMPLETE
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkGetPhysicalDeviceToolProperties(@NativeType("VkPhysicalDevice*") long physicalDevice, /* optional */ @NativeType("uint32_t*") long pToolCount, /* optional */ @NativeType("VkPhysicalDeviceToolProperties*") long pToolProperties) {
		try {
			return (int) vkGetPhysicalDeviceToolProperties.invokeExact(physicalDevice, pToolCount, pToolProperties);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// Promoted from VK_EXT_shader_demote_to_helper_invocation (extension 277)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 0;
	
	// Promoted from VK_KHR_shader_non_semantic_info (extension 294)
	// Promoted from VK_EXT_private_data (extension 296)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 0;
	public static final int VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1;
	public static final int VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 2;
	public static final int VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 0;
	
	// Will add VkPrivateDataSlotCreateFlagBits when bits are defined in the future
	
	private static final MethodHandle vkCreatePrivateDataSlot = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCreatePrivateDataSlot", INT, LONG, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkCreatePrivateDataSlot(@NativeType("VkDevice*") long device, @NativeType("VkPrivateDataSlotCreateInfo*") long pCreateInfo, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator, @NativeType("VkPrivateDataSlot**") long pPrivateDataSlot) {
		try {
			return (int) vkCreatePrivateDataSlot.invokeExact(device, pCreateInfo, pAllocator, pPrivateDataSlot);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkDestroyPrivateDataSlot = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkDestroyPrivateDataSlot", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkDestroyPrivateDataSlot(@NativeType("VkDevice*") long device, /* optional, external sync */ @NativeType("VkPrivateDataSlot*") long privateDataSlot, /* optional */ @NativeType("VkAllocationCallbacks*") long pAllocator) {
		try {
			vkDestroyPrivateDataSlot.invokeExact(device, privateDataSlot, pAllocator);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkSetPrivateData = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkSetPrivateData", INT, LONG, INT, LONG, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkSetPrivateData(@NativeType("VkDevice*") long device, @NativeType("VkObjectType") int objectType, @NativeType("uint64_t") long objectHandle, @NativeType("VkPrivateDataSlot*") long privateDataSlot, @NativeType("uint64_t") long data) {
		try {
			return (int) vkSetPrivateData.invokeExact(device, objectType, objectHandle, privateDataSlot, data);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetPrivateData = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetPrivateData", VOID, LONG, INT, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetPrivateData(@NativeType("VkDevice*") long device, @NativeType("VkObjectType") int objectType, @NativeType("uint64_t") long objectHandle, @NativeType("VkPrivateDataSlot*") long privateDataSlot, @NativeType("uint64_t*") long pData) {
		try {
			vkGetPrivateData.invokeExact(device, objectType, objectHandle, privateDataSlot, pData);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// Promoted from VK_EXT_pipeline_creation_cache_control (extension 298)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 0;
	public static final int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256;
	public static final int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512;
	public static final int VK_PIPELINE_COMPILE_REQUIRED = 0;
	public static final int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1;
	
	// Promoted from VK_KHR_synchronization2 (extension 315)
	
	public static final int VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 0;
	public static final int VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1;
	public static final int VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 2;
	public static final int VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 3;
	public static final int VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 4;
	public static final int VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 5;
	public static final int VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 6;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 7;
	public static final int VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1;
	public static final int VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 0;
	public static final int VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1;
	public static final int VK_PIPELINE_STAGE_NONE = 0;
	public static final int VK_ACCESS_NONE = 0;
	private static final MethodHandle vkCmdSetEvent2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetEvent2", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdSetEvent2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkEvent*") long event, @NativeType("VkDependencyInfo*") long pDependencyInfo) {
		try {
			vkCmdSetEvent2.invokeExact(commandBuffer, event, pDependencyInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdResetEvent2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdResetEvent2", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdResetEvent2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkEvent*") long event, /* optional */ @NativeType("VkPipelineStageFlags2") long stageMask) {
		try {
			vkCmdResetEvent2.invokeExact(commandBuffer, event, stageMask);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWaitEvents2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWaitEvents2", VOID, LONG, INT, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdWaitEvents2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int eventCount, @NativeType("VkEvent**") long pEvents, @NativeType("VkDependencyInfo*") long pDependencyInfos) {
		try {
			vkCmdWaitEvents2.invokeExact(commandBuffer, eventCount, pEvents, pDependencyInfos);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdPipelineBarrier2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdPipelineBarrier2", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdPipelineBarrier2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkDependencyInfo*") long pDependencyInfo) {
		try {
			vkCmdPipelineBarrier2.invokeExact(commandBuffer, pDependencyInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdWriteTimestamp2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdWriteTimestamp2", VOID, LONG, LONG, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdWriteTimestamp2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("VkPipelineStageFlags2") long stage, @NativeType("VkQueryPool*") long queryPool, @NativeType("uint32_t") int query) {
		try {
			vkCmdWriteTimestamp2.invokeExact(commandBuffer, stage, queryPool, query);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkQueueSubmit2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkQueueSubmit2", INT, LONG, INT, LONG, LONG);
	
	/**
	*<pre>
	* successcodes = VK_SUCCESS
	* errorcodes = VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST
	*</pre>
	**/
	@NativeType("VkResult")
	public static int vkQueueSubmit2(/* external sync */ @NativeType("VkQueue*") long queue, /* optional */ @NativeType("uint32_t") int submitCount, @NativeType("VkSubmitInfo2*") long pSubmits, /* optional, external sync */ @NativeType("VkFence*") long fence) {
		try {
			return (int) vkQueueSubmit2.invokeExact(queue, submitCount, pSubmits, fence);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// Promoted from VK_KHR_zero_initialize_workgroup_memory (extension 326)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 0;
	
	// Promoted from VK_EXT_image_robustness (extension 336)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 0;
	
	// Promoted from VK_KHR_copy_commands2 (extension 338)
	
	public static final int VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 0;
	public static final int VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1;
	public static final int VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 2;
	public static final int VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 3;
	public static final int VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 4;
	public static final int VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 5;
	public static final int VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 6;
	public static final int VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 7;
	public static final int VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 8;
	public static final int VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 9;
	public static final int VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 10;
	private static final MethodHandle vkCmdCopyBuffer2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyBuffer2", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyBuffer2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyBufferInfo2*") long pCopyBufferInfo) {
		try {
			vkCmdCopyBuffer2.invokeExact(commandBuffer, pCopyBufferInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyImage2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyImage2", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyImage2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyImageInfo2*") long pCopyImageInfo) {
		try {
			vkCmdCopyImage2.invokeExact(commandBuffer, pCopyImageInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyBufferToImage2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyBufferToImage2", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyBufferToImage2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyBufferToImageInfo2*") long pCopyBufferToImageInfo) {
		try {
			vkCmdCopyBufferToImage2.invokeExact(commandBuffer, pCopyBufferToImageInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdCopyImageToBuffer2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdCopyImageToBuffer2", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdCopyImageToBuffer2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCopyImageToBufferInfo2*") long pCopyImageToBufferInfo) {
		try {
			vkCmdCopyImageToBuffer2.invokeExact(commandBuffer, pCopyImageToBufferInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBlitImage2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBlitImage2", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBlitImage2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBlitImageInfo2*") long pBlitImageInfo) {
		try {
			vkCmdBlitImage2.invokeExact(commandBuffer, pBlitImageInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdResolveImage2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdResolveImage2", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdResolveImage2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkResolveImageInfo2*") long pResolveImageInfo) {
		try {
			vkCmdResolveImage2.invokeExact(commandBuffer, pResolveImageInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// Promoted from VK_EXT_subgroup_size_control (STDPROMOTE/PROPLIMCHANGE) (extension 226)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 0;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 2;
	public static final int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1;
	public static final int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2;
	
	// Promoted from VK_EXT_inline_uniform_block (STDPROMOTE/PROPLIMCHANGE) (extension 139)
	
	public static final int VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 0;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 0;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1;
	public static final int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 2;
	public static final int VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 3;
	
	// Promoted from VK_EXT_ycbcr_2plane_444_formats (does not promote the Feature struct, just the formats) (extension 331)
	
	public static final int VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 0;
	public static final int VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1;
	public static final int VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 2;
	public static final int VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 3;
	
	// Promoted from VK_EXT_4444_formats (does not promote the Feature struct, just the formats) (extension 341)
	
	public static final int VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 0;
	public static final int VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1;
	
	// Promoted from VK_EXT_texture_compression_astc_hdr (Feature struct is promoted, but becomes optional) (extension 67)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 0;
	public static final int VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 0;
	public static final int VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1;
	public static final int VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 2;
	public static final int VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 3;
	public static final int VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 4;
	public static final int VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 5;
	public static final int VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 6;
	public static final int VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 7;
	public static final int VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 8;
	public static final int VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 9;
	public static final int VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 10;
	public static final int VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 11;
	public static final int VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 12;
	public static final int VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 13;
	
	// Promoted from VK_KHR_dynamic_rendering (extension 45)
	
	private static final MethodHandle vkCmdBeginRendering = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBeginRendering", VOID, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBeginRendering(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkRenderingInfo*") long pRenderingInfo) {
		try {
			vkCmdBeginRendering.invokeExact(commandBuffer, pRenderingInfo);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdEndRendering = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdEndRendering", VOID, LONG);
	
	@NativeType("void")
	public static void vkCmdEndRendering(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer) {
		try {
			vkCmdEndRendering.invokeExact(commandBuffer);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	public static final int VK_STRUCTURE_TYPE_RENDERING_INFO = 0;
	public static final int VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1;
	public static final int VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 2;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 3;
	public static final int VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 4;
	public static final int VK_ATTACHMENT_STORE_OP_NONE = 0;
	
	// Promoted from VK_EXT_extended_dynamic_state (Feature struct is not promoted) (extension 268)
	
	public static final int VK_DYNAMIC_STATE_CULL_MODE = 0;
	public static final int VK_DYNAMIC_STATE_FRONT_FACE = 1;
	public static final int VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 2;
	public static final int VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 3;
	public static final int VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 4;
	public static final int VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 5;
	public static final int VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 6;
	public static final int VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 7;
	public static final int VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 8;
	public static final int VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 9;
	public static final int VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 10;
	public static final int VK_DYNAMIC_STATE_STENCIL_OP = 11;
	private static final MethodHandle vkCmdSetCullMode = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetCullMode", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetCullMode(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, /* optional */ @NativeType("VkCullModeFlags") int cullMode) {
		try {
			vkCmdSetCullMode.invokeExact(commandBuffer, cullMode);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetFrontFace = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetFrontFace", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetFrontFace(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkFrontFace") int frontFace) {
		try {
			vkCmdSetFrontFace.invokeExact(commandBuffer, frontFace);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPrimitiveTopology = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPrimitiveTopology", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPrimitiveTopology(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkPrimitiveTopology") int primitiveTopology) {
		try {
			vkCmdSetPrimitiveTopology.invokeExact(commandBuffer, primitiveTopology);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetViewportWithCount = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetViewportWithCount", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetViewportWithCount(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int viewportCount, @NativeType("VkViewport*") long pViewports) {
		try {
			vkCmdSetViewportWithCount.invokeExact(commandBuffer, viewportCount, pViewports);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetScissorWithCount = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetScissorWithCount", VOID, LONG, INT, LONG);
	
	@NativeType("void")
	public static void vkCmdSetScissorWithCount(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int scissorCount, @NativeType("VkRect2D*") long pScissors) {
		try {
			vkCmdSetScissorWithCount.invokeExact(commandBuffer, scissorCount, pScissors);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdBindVertexBuffers2 = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdBindVertexBuffers2", VOID, LONG, INT, INT, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkCmdBindVertexBuffers2(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("uint32_t") int firstBinding, @NativeType("uint32_t") int bindingCount, /* optional */ @NativeType("VkBuffer**") long pBuffers, @NativeType("VkDeviceSize*") long pOffsets, /* optional */ @NativeType("VkDeviceSize*") long pSizes, /* optional */ @NativeType("VkDeviceSize*") long pStrides) {
		try {
			vkCmdBindVertexBuffers2.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthTestEnable = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthTestEnable", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDepthTestEnable(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int depthTestEnable) {
		try {
			vkCmdSetDepthTestEnable.invokeExact(commandBuffer, depthTestEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthWriteEnable = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthWriteEnable", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDepthWriteEnable(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int depthWriteEnable) {
		try {
			vkCmdSetDepthWriteEnable.invokeExact(commandBuffer, depthWriteEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthCompareOp = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthCompareOp", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDepthCompareOp(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkCompareOp") int depthCompareOp) {
		try {
			vkCmdSetDepthCompareOp.invokeExact(commandBuffer, depthCompareOp);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthBoundsTestEnable = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthBoundsTestEnable", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDepthBoundsTestEnable(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int depthBoundsTestEnable) {
		try {
			vkCmdSetDepthBoundsTestEnable.invokeExact(commandBuffer, depthBoundsTestEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetStencilTestEnable = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetStencilTestEnable", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetStencilTestEnable(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int stencilTestEnable) {
		try {
			vkCmdSetStencilTestEnable.invokeExact(commandBuffer, stencilTestEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetStencilOp = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetStencilOp", VOID, LONG, INT, INT, INT, INT, INT);
	
	@NativeType("void")
	public static void vkCmdSetStencilOp(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkStencilFaceFlags") int faceMask, @NativeType("VkStencilOp") int failOp, @NativeType("VkStencilOp") int passOp, @NativeType("VkStencilOp") int depthFailOp, @NativeType("VkCompareOp") int compareOp) {
		try {
			vkCmdSetStencilOp.invokeExact(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// Promoted from VK_KHR_shader_integer_dot_product (extension 281)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 0;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1;
	
	// Promoted from VK_EXT_texel_buffer_alignment (extension 282)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1;
	
	// Promoted from VK_KHR_format_feature_flags2 (extension 361)
	
	public static final int VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 0;
	
	// Promoted from VK_EXT_extended_dynamic_state2 (Feature struct and optional state are not promoted) (extension 378)
	
	public static final int VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1;
	public static final int VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 2;
	public static final int VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 4;
	private static final MethodHandle vkCmdSetRasterizerDiscardEnable = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetRasterizerDiscardEnable", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetRasterizerDiscardEnable(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int rasterizerDiscardEnable) {
		try {
			vkCmdSetRasterizerDiscardEnable.invokeExact(commandBuffer, rasterizerDiscardEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetDepthBiasEnable = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetDepthBiasEnable", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetDepthBiasEnable(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int depthBiasEnable) {
		try {
			vkCmdSetDepthBiasEnable.invokeExact(commandBuffer, depthBiasEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkCmdSetPrimitiveRestartEnable = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkCmdSetPrimitiveRestartEnable", VOID, LONG, INT);
	
	@NativeType("void")
	public static void vkCmdSetPrimitiveRestartEnable(/* external sync */ @NativeType("VkCommandBuffer*") long commandBuffer, @NativeType("VkBool32") int primitiveRestartEnable) {
		try {
			vkCmdSetPrimitiveRestartEnable.invokeExact(commandBuffer, primitiveRestartEnable);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	// Promoted from VK_KHR_maintenance4 (extension 414)
	
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 0;
	public static final int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1;
	public static final int VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 2;
	public static final int VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 3;
	public static final int VK_IMAGE_ASPECT_NONE = 0;
	private static final MethodHandle vkGetDeviceBufferMemoryRequirements = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceBufferMemoryRequirements", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDeviceBufferMemoryRequirements(@NativeType("VkDevice*") long device, @NativeType("VkDeviceBufferMemoryRequirements*") long pInfo, @NativeType("VkMemoryRequirements2*") long pMemoryRequirements) {
		try {
			vkGetDeviceBufferMemoryRequirements.invokeExact(device, pInfo, pMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDeviceImageMemoryRequirements = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceImageMemoryRequirements", VOID, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDeviceImageMemoryRequirements(@NativeType("VkDevice*") long device, @NativeType("VkDeviceImageMemoryRequirements*") long pInfo, @NativeType("VkMemoryRequirements2*") long pMemoryRequirements) {
		try {
			vkGetDeviceImageMemoryRequirements.invokeExact(device, pInfo, pMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
	
	private static final MethodHandle vkGetDeviceImageSparseMemoryRequirements = createHandle(VkDefinitions.LIBRARY_LOOKUP, "vkGetDeviceImageSparseMemoryRequirements", VOID, LONG, LONG, LONG, LONG);
	
	@NativeType("void")
	public static void vkGetDeviceImageSparseMemoryRequirements(@NativeType("VkDevice*") long device, @NativeType("VkDeviceImageMemoryRequirements*") long pInfo, /* optional */ @NativeType("uint32_t*") long pSparseMemoryRequirementCount, /* optional */ @NativeType("VkSparseImageMemoryRequirements2*") long pSparseMemoryRequirements) {
		try {
			vkGetDeviceImageSparseMemoryRequirements.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
		} catch (Throwable e) {
			throw new Error(e);
		}
	}
	
}